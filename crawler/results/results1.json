{
    "exercises": [
        {
            "title": "Absolute value",
            "description": "The absolute value of a number is defined as *|n| = n* if *n >= 0*, *|n| = -n* else.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S1",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/absolute_value"
        },
        {
            "title": "Advanced queue",
            "description": "You must implement the ``enqueue`` and ``dequeue`` functions of a `Queue` that is implemented as a simple circular list. This\n`Wikipedia page <https://en.wikipedia.org/wiki/Linked_list#Circularly_linked_vs._linearly_linked>`_ describes such a list as follows:\n\n\"With a circular list, a pointer to the last node gives easy access also to the first node, by following one link. Thus, in applications that require access to both ends of the list (e.g., in the implementation of a queue), a circular structure allows one to handle the structure by a single pointer, instead of two.\"\n\n\n.. image:: https://upload.wikimedia.org/wikipedia/commons/d/df/Circularly-linked-list.svg\n\nAssume that the head of the queue is the leftmost node and that the tail of the queue is the rightmost node. In the previous example, the head and the tail are respectively ``12`` and ``37``. So in this case, the only pointer you can use will point to the ``37`` node.\n\nYou can use the following datastructures for this exercise:\n\n.. code-block:: c\n\n    typedef struct node{\n      struct node* next;\n      int value;\n    } node_t;\n\n    typedef struct queue{\n      struct node* tail;\n      int size;\n    } queue_t  ;",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/advanced_queue"
        },
        {
            "title": "ArrayList",
            "description": "Vous devez modifier une librairie qui implémente une ArrayList en y ajoutant une fonction. Cette ArrayList s'utilise comme suit\n\n.. code-block:: c\n\n\n   int main(void) {\n        struct array_list *head = arraylist_init((size_t) 2, (size_t) sizeof(int));\n        int first = 5;\n        int second = 6;\n        int third = 7;\n        int tmp;\n\n        int ret;\n\n        if (!head)\n                return 0;\n\n        set_element(head, 0, (void *)&first);\n        set_element(head, 1, (void *)&second);\n\n        get_element(head, 1, (void *)&tmp);\n        // tmp contient 6\n        add_tail(head, (void *)&third);\n        get_element(head, 2, (void *)&tmp);\n        // tmp contient 7\n        printf(\"array-list size: %d element-size %d\\n\", get_size(head), get_elem_size(head));\n        // affiche array-list size: 3 element-size 4\n        array_list_destroy(head);\n        return 0;\n   }\n\nLe syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n- http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n- http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n- http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions librairies)\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/alist"
        },
        {
            "title": "Get an array from a binary file using mmap",
            "description": "Given a file containing a linked list of the structure *student_t* following, you have to write a function to load the entire linked list from the file and to return a pointer to the head of this linked list. Assume that, in the file, if **a** is followed by **b**, you will have ``a->next = b``.\n\n.. code-block:: c\n\n    typedef struct student{\n        struct student* next;\n        int noma;\n    } student_t;\n\nIn this exercice, you **cannot** use *fopen*, *read*, *fread*, *fgetc*, *fgets*, which means that you must use `mmap(2). <https://sites.uclouvain.be/SystInfo/manpages/man2/mmap.2.html>`_\n\nIn case of error (using malloc), you have to free **all** the memory you have allocated.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Louis Navarre",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Close",
                    "category": 0
                },
                {
                    "text": "Open",
                    "category": 0
                },
                {
                    "text": "Pointer",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "Beta, S5"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/array_mmap"
        },
        {
            "title": "Traduction de code assembleur",
            "description": "Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n\n- http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n- http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n- http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions librairies)",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/asm1"
        },
        {
            "title": "Traduction de code assembleur",
            "description": "Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n\n- http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n- http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n- http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/asm2"
        },
        {
            "title": "Traduction de code assembleur",
            "description": "Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n    - http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)\n\n**Attention:** veuillez utiliser la version **HTML** du syllabus",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/asm3"
        },
        {
            "title": "Traduction de code assembleur",
            "description": "Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n    - http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)\n\n**Attention:** veuillez utiliser la version **HTML** du syllabus",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/asm4"
        },
        {
            "title": "Simple linked list",
            "description": "We ask you to write two simple functions that are  needed to implement a simple linked list.\n\n\n.. code-block:: c\n\n    /**\n    * Structure node\n    *\n    * @next: pointer to the next node in the list, NULL if last node_t\n    * @value: value stored in the node\n    */\n    typedef struct node {\n      struct node *next;\n      int value;\n    } node_t;\n\n    /**\n    * Structure list\n    *\n    * @first: first node of the list, NULL if list is empty\n    * @size: number of nodes in the list\n    */\n    typedef struct list {\n      struct node *first;\n      int size;\n    } list_t;\n\n\n**In your functions, you cannot use the function** `calloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html>`_\n\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Malloc",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/basic_linked_list"
        },
        {
            "title": "Bitwise operation: high order bits",
            "description": "In this exercise, we will work with operation on bits. When we speak about the position of a bit, index 0 corresponds to lowest order bit, 1 to the second-lowest order bit, ...\n\nIn C source code, you can write a number in binary (base 2) by prefixing it via 0b., e.g. 0b11010 = 26.\n\nThis exercise will introduce some non-standard data types which guarantee that the variable has a fixed number of bits. Indeed, on some machines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to perform bitwise operations, we have to know first on how many bits we are working.\n\nFor this, C introduces a new class of variable types :\n\n- *int8_t* (signed integer of 8 bits)\n- *uint8_t* (unsigned integer of 8 bits)\n- *uint16_t* (unsigned integer of 16 bits)\n\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These types are defined in <stdint.h>",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bits_leftmost"
        },
        {
            "title": "Bitwise operation: extract low order bits",
            "description": "In this exercise, we will work with operations on bits. When we speak about the position of a bit, index 0 corresponds to lowest order bit, 1 to the second-lowest order bit, ...\n\nIn C source code, you can write a number in binary (base 2) by prefixing it via 0b., e.g. ``0b11010`` = 26.\n\nThis exercise will introduce some non-standard data types which guarantee that the variable has a fixed number of bits. Indeed, on some machines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to perform bitwise operations, we have to know first on how many bits we are working.\n\nFor this, C introduces a new class of variable types :\n\n- *int8_t* (signed integer of 8 bits)\n- *uint8_t* (unsigned integer of 8 bits)\n- *uint16_t* (unsigned integer of 16 bits)\n\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These types are defined in <stdint.h>",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bits_rightmost"
        },
        {
            "title": "Bitwise operation: cycling bits",
            "description": "In this exercise, we will work with operations on bits. When we speak about the position of a bit, index 0 corresponds to lowest order bit, 1 to the second-lowest order bit, ...\n\nIn C source code, you can write a number in binary (base 2) by prefixing it via 0b., e.g. 0b11010 = 26.\n\nThis exercise will introduce some non-standard data types which guarantee that the variable has a fixed number of bits. Indeed, on some machines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to perform bitwise operations, we have to know first on how many bits we are working.\n\nFor this, C introduces a new class of variable types :\n\n- *int8_t* (signed integer of 8 bits)\n- *uint8_t* (unsigned integer of 8 bits)\n- *uint16_t* (unsigned integer of 16 bits)\n\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These types are defined in <stdint.h>",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bits_spin"
        },
        {
            "title": "Bitwise operation: resetting the highest order bit",
            "description": "In this exercise, we will work with operations on bits. When we speak about the position of a bit, index 0 corresponds to lowest order bit, 1 to the second-lowest order bit, ...\n\nIn C source code, you can write a number in binary (base 2) by prefixing it via 0b., e.g. 0b11010 = 26.\n\nThis exercise will introduce some non-standard data types which guarantee that the variable has a fixed number of bits. Indeed, on some machines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to perform bitwise operations, we have to know first on how many bits we are working.\n\nFor this, C introduces a new class of variable types :\n\n- *int8_t* (signed integer of 8 bits)\n- *uint8_t* (unsigned integer of 8 bits)\n- *uint16_t* (unsigned integer of 16 bits)\n\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These types are defined in <stdint.h>",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bits_strong"
        },
        {
            "title": "Bitwise operation: counting set bits",
            "description": "In this exercise, we will work with operations on bits. When we speak about the position of a bit, index 0 corresponds to lowest order bit, 1 to the second-lowest order bit, ...\n\nIn C source code, you can write a number in binary (base 2) by prefixing it via 0b., e.g. 0b11010 = 26.\n\nThis exercise will introduce some non-standard data types which guarantee that the variable has a fixed number of bits. Indeed, on some machines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to perform bitwise operations, we have to know first on how many bits we are working.\n\nFor this, C introduces a new class of variable types :\n\n- *int8_t* (signed integer of 8 bits)\n- *uint8_t* (unsigned integer of 8 bits)\n- *uint16_t* (unsigned integer of 16 bits)\n\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These types are defined in <stdint.h>",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bits_sum"
        },
        {
            "title": "Opérations sur les bits",
            "description": "On souhaite effectuer des opérations spécifiques sur certains bits d'un entier non-signé de 32 bits. Lorsque l'on parle de position, l'indice 0 correspond au bit le plus faible, et 31 au bit le plus fort. Dans cet exercice, un `unsigned char` représente toujours un seul bit et ne pourra donc que prendre les valeurs numériques 0 ou 1 (et non '0' et '1')\n\nÉcrivez une fonction `unsigned char get_bit(unsigned int x, unsigned int pos)` qui renvoie le bit à la position `pos` de x.\n\nÉcrivez une fonction `unsigned int set_bit(unsigned int x, unsigned int pos, unsigned char value)` qui met le bit à la position `pos` de x à la valeur `value`.\n\nÉcrivez une fonction `unsigned char get_3_leftmost_bits(unsigned int x)` qui renvoie les 3 bits les plus à gauches de x. Par exemple, si on a la séquence 11011001, la fonction doit renvoyer la valeur correspondant à 00000110.\n\nÉcrivez une fonction `unsigned char get_4_rightmost_bits(unsigned int x)` qui renvoie les 4 bits les plus à droite de x.\n\nÉcrivez une fonction `unsigned int unset_last_bit(unsigned int x)` qui met à 0 le premier bit de poids fort à 1 qu'il trouve, et ne fait rien s'il n'y a pas de bit mis à 1.\n\nÉcrivez une fonction `unsigned int cycle_bits(unsigned int x, unsigned int n)` qui déplace tous les bits de n places vers la gauche selon la formule x[(i+n)%32] = x[i] où x[i] représente le ième bit de x.\n\nVous pouvez faire appel aux fonctions `get_bit` et `set_bit` dans les autres.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bitwise-ops"
        },
        {
            "title": "Gestion d'une librairie",
            "description": "On souhaite gérer le catalogue d'une librairie dans lequel chaque livre est identifié par son auteur et son titre. La structure de données choisie est la suivante : il y a une liste chaînée d'auteurs dont chaque élément pointe vers une liste chaînée d'ouvrages.\n\n.. code-block:: c\n\n    typedef struct cellAuteur {\n        char *auteur;\n        struct cellLivre *Livres;\n        struct cellAuteur *next;\n    } cellAuteur;\n\n    typedef struct cellLivre {\n        char *titre;\n        struct cellLivre *suiv;\n    } cellLivre;\n\nÉcrivez une fonction `cellAuteur *existe(cellAuteur *librairie, char *strAuteur)` qui teste si un auteur existe dans la liste librairie et dans ce cas renvoie un pointeur sur sa cellule de la liste (et NULL sinon).\n\nÉcrivez une fonction `int compteOuvrage(cellAuteur *librairie, char *strAuteur)` qui compte le nombre de livres d'un auteur dans la liste librairie.\n\nÉcrivez une fonction `void add(cellAuteur *librairie, char *strAuteur, char *strTitre)` qui ajoute dans le catalogue un livre de l'auteur indiqué. L'auteur existe dans le catalogue. Un même livre ne peut pas être présent 2 fois dans la catalogue.\n\nÉcrivez une fonction `void supprimer(cellAuteur **librairie, char *strAuteur)` qui supprime du catalogue un auteur et tous ses livres. L'auteur existe dans le catalogue.\n\nVous avez accès aux fonctions de `string.h`.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bookstore"
        },
        {
            "title": "Simple Binary Search Tree",
            "description": "For this task, you will implement a simple binary search on an existing binary tree. A binary tree has the following structure:\n\n.. image:: BST/bst.png\n    :height: 340px\n    :width: 540px\n    :scale: 100%\n\n\nThis binary tree is composed of nodes implemented using the following structure.\n\n.. code-block:: c\n\n    /*\n    * Node has a value, @value, and two children, @left and @right.\n    * All the children of @left and itself have a smaller value than the node and all the children of @right and itself have a larger value than node\n    */\n    typedef struct node{\n        int value;\n        struct node* left; // to smaller values\n        struct node* right; // to larger values\n    } node_t;\n\nThe binary tree itself is defined as follows.\n\n.. code-block:: c\n\n    typedef struct bt{\n        struct node* root;\n    } bt_t;\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/BST"
        },
        {
            "title": "BST : Insert and Delete",
            "description": "To help you study your english course, you've got the wonderful idea of creating a Binary Search Tree (BST). This will also help you to study for the LSINF1252 course! The key of each node will be the english word and the value will be the french word corresponding. Those are represented using an array of char.\nSo let's define our 2 structures :\n\n.. code-block:: c\n\n    typedef struct bt {\n        struct node *root;\n    } bt_t;\n\n    typedef struct node {\n        char *enWord;\n        char *frWord;\n        struct node *left;\n        struct node *right;\n    } node_t;\n\n**What is a Binary Search Tree (BST) ?**\n\nA Binary Search Tree is a tree for which every node has a special property : the subtree defined by node.left only contains keys(enWord) lower than the node's key. Similarly, the subtree defined by node.right only contains keys higher than the node's key. This is helpful when searching for a specific key in the data structure.\n\nTODO : SCHEME NEEDED + EXPLAIN WHICH NODE IS THE ROOT.\n+ CHANGE THE CODE : word -> enWord, definition -> frWord.\n\n**Your mission**\n\nYour mission will be to implement the **insert** and the **delete** functions.\n\n- **Insert** function :\n\nFor each node we know this : every key (*enWord*) in the node.left subpart is lower than the key of the node. Similarly, every key (*enWord*) in the node.right subpart is lower than the key of the node. We use the alphabetical order to check if one word is lower or higher than another one.\n\n- **Delete** function :\n\nDeleting a node in a tree like that might not be easy ! That's why I'll explain you how to proceed (you'll have to use this procedure in order to get the points).\nIf the node we want to delete has 0 or only 1 child, it's quite easy, we only have to replace this node by his child (if there is one).\nWhen it comes to a node which has two children, it's harder. We first have to find the right subtree's leftmost child. In the example, if we want to suppress *XXX*, the leftmost node of the right subpart is *YYY*. Then, we can move *YYY* to *XXX* and replace *YYY* by his child (if it has one).\n\nSCHEME NEEDED for XXX and YYY.\n\n*Hints :*\n\n- ``char *enWord`` and ``char *frWord`` are pointers, memory must be allocated by using `malloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html>`_ to copy the strings in the tree.\n\n- Other useful commands: `strcpy(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/strcpy.3.html>`_, `strlen(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/strlen.3.html>`_ and `strcmp(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/strcmp.3.html>`_.\n\n- Do not forget to free **all** the allocated space deleting an element.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Alexandre Gobeaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/BST-Insert_Delete"
        },
        {
            "title": "Parcours d'un arbre binaire de recherche",
            "description": "On souhaite parcourir un arbre binaire de recherche. Un arbre de recherche binaire est une structure de données où chaque nœud possède une clé et une valeur. En outre, chaque nœud peut avoir 2 nœuds fils : un à gauche dont la clé est toujours inférieure à la sienne, et un à droite dont la clé est toujours supérieure à la sienne. Autrement dit si vous êtes à un nœud dont la clé vaut 10 et que vous cherchez un nœud dont la clé vaut 5, vous savez que vous devez descendre à gauche pour espérer trouver un éventuel nœud dont la clé vaut 5.\n\n.. code-block:: c\n\n    typedef struct BSTreeNode {\n        int key;\n        int value;\n\n        struct BSTreeNode *left;\n        struct BSTreeNode *right;\n    } Node;\n\n\nÉcrivez une fonction `int has_key(Node root, int key)` qui vérifie si l'arbre binaire dont le sommet est le nœud root possède un nœud dont la clé vaut key et renvoie 1 si oui, renvoie 0 sinon.\n\nÉcrivez une fonction `int compare(Node root_a, Node root_b)` qui vérifie si les 2 arbres binaires passés en argument sont identiques (ils ont la même structure et tous les nœuds possèdent la même paire clé/valeur). Renvoie 1 si les arbres sont identiques, 0 sinon. Indice : pensez récursivement.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/btree-access"
        },
        {
            "title": "Coder calloc en utilisant malloc",
            "description": "Ecrire la fonction ``calloc2``, ayant le même prototype et le même fonctionnement que `calloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/calloc.3.html>`_ mais qui utilise `malloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html>`_ pour allouer la mémoire.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/calloc2"
        },
        {
            "title": "Comparing functions",
            "description": "Pointers to functions can be used to handle functions in a dynamic fashion, and will be of great importance later in this course. It is hence important to grasp how they work.\n\nIn this exercise, you will code a function which receives pointers to two functions, to determine if these functions are equivalent. Two functions are considered to be equivalent if they always produce the same output for the same input.\n\nThe functions passed by pointers will be of the form ``uint8_t func(uint8_t n)``.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/cmp_func"
        },
        {
            "title": "Le programme test",
            "description": "La commande `test(1) <https://sites.uclouvain.be/SystInfo/manpages/man1/test.1.html>`_ permet d'évaluer une expression passée en paramètre. Elle retourne:\n\n- ``0`` si l'expression passée en argument est vraie\n- ``1`` si l'expression passée en argument est fausse\n\nOn vous demande d'écrire un sous-ensemble de la commande `test(1) <https://sites.uclouvain.be/SystInfo/manpages/man1/test.1.html>`_ en C. Les expressions à implémenter sont ``-eq``, ``-ge``, ``-gt``, ``-le``, ``-lt`` et ``-ne``.\n\nPour rappel, la commande `test(1) <https://sites.uclouvain.be/SystInfo/manpages/man1/test.1.html>`_ est décrite dans la `page de manuel  <https://sites.uclouvain.be/SystInfo/manpages/man1/test.1.html>`_ qui lui est consacrée.\n\nPour répondre à cette question, vous devez structurer votre programme avec des appels de sous-fonction et donc de ne pas faire toute l'exécution dans la fonction ``main()``.\n\nIl existe plusieurs façons pour tester votre code, une de ces façons est de regarder dans le shell le contenu de la variable ``$?`` après chaque exécution de votre programme. Une autre façon est de profiter de l'instruction conditionnelle ``if-then-else`` du shell.\n\n\n\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Gregory Detal",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Fabien Duchêne",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/commandetest"
        },
        {
            "title": "Count the '\\0'",
            "description": "The character '\\\\0' identifies the end of a string in C. But it can also play the role of a real character.\n\nIn this exercice, write the body of the function ``counting_zero``, which counts the number of occurence of the character '\\\\0'.\n\nYou cannot use any function from the string library.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Louis Navarre",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                },
                {
                    "text": "Sum",
                    "category": 0
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/count_zero"
        },
        {
            "title": "Jeu de dames: tests de base",
            "description": ".. raw:: html\n\n    <p>\n      Cette tâche vous permet de vérifier que votre programme de jeu de dames passe les vérifications de base, telles que présence et fonctionnement du Makefile, nommage correct des exécutables, etc. Si votre programme ne passe pas ces tests, il ne sera <b>pas corrigé</b>.\n    </p>\n\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "David Lebrun",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/dames"
        },
        {
            "title": "Liste doublement chaînée",
            "description": "Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n    - http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)\n\n**Attention:** veuillez utiliser la version **HTML** du syllabus",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/DoubleLL"
        },
        {
            "title": "Manipulation de liste",
            "description": "Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n    - http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)\n\n**Attention:** veuillez utiliser la version **HTML** du syllabus",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "C"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/EmployeList"
        },
        {
            "title": "Factorial",
            "description": "The factorial of an integer *n!* is defined as ``n! = 1*2*3*...*(n-1)*n``, with *0! = 1*.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S1",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/factorial"
        },
        {
            "title": "Parcours de fichiers",
            "description": "Parcourez un fichier sans jamais utiliser l'appel système read.\nLe syllabus est accessible depuis http://sites.uclouvain.be/SystInfo",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/Filemap"
        },
        {
            "title": "Déterminer la valeur de retour d'un programme exécutable",
            "description": "Dans un programme similaire à un shell, on vous demander d'écrire une fonction qui permet de lancer un exécutable et d'indiquer si :\n\n* le programme ne s'est pas exécuté ou a retourné une valeur de retour positive\n* le programme s'est exécuté correctement et a retourné une valeur de retour =0\n* le programme a été interrompu par un signal\n\nLe syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n - http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n - http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n - http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/fork"
        },
        {
            "title": "Threads : plus grand commun diviseur",
            "description": "On cherche à calculer le plus grand commun diviseur de deux très grands nombres. Pour ce faire, on calcule tous les diviseurs de chacun des 2 nombres, et on regarde quel est leur PGCD. Pour ce faire, on déclare la liste chaînée suivante, permettant d'enregistrer en mémoire les diviseurs d'un nombre :\n\n.. code-block:: c\n\n    struct Node {\n        unsigned int divisor;\n        struct Node *next;\n    };\n\n\nÉcrivez une fonction `void *factorize(void *n)` qui retourne un pointeur vers une liste chaînée contenant tous les diviseurs dans l'ordre décroissant du nombre de type `unsigned int` vers lequel n pointe.\n\nÉcrivez une fonction `unsigned int gcd(unsigned int a, unsigned int b)` qui va lancer l'exécution de `factorize` pour a et b dans 2 threads différents et va extraire des deux listes renvoyées le PGCD. Le nombre 1 est considéré comme un diviseur. Cette fonction renvoie 0 si une erreur s'est produite.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/gcd"
        },
        {
            "title": "Conversions hexadécimales",
            "description": "On souhaite convertir un entier non signé vers sa représentation hexadécimale. Par exemple l'entier 42 vaut \"2A\" en hexadécimal. De même, on souhaite faire la conversion dans l'autre sens.\n\nÉcrivez une fonction `unsigned int hex_to_int(char *hex)` qui prend en argument une chaîne de caractères représentant un nombre hexadécimal (cette chaîne ne peut comporter que les chiffres de 0 à 9 et les lettres A à F).\n\nÉcrivez une fonction `char *int_to_hex(unsigned int value, char *dest)` qui prend en argument un entier non-signé et enregistre sa représentation hexadécimale dans la chaîne de caractères indiquée par dest. On suppose que dest est un tableau de 9 char au minimum. La fonction devra toujours renvoyer le pointeur dest.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/hexadecimal"
        },
        {
            "title": "Indexation d'un texte",
            "description": "On souhaite indexer un texte afin de savoir quels mots reviennent le plus fréquemment dans un corpus. Le processus d'indexation se fait en 2 phases : on compte d'abord le nombre d'occurrences de chaque mot, et on supprime ensuite de la table d'indexation tous les mots qui n'ont pas été indexés au moins N fois. Le corpus est une chaîne de caractères composées uniquement de minuscules et où le seul délimiteur est un espace (pas de ponctuation). Votre programme n'est jamais censé produire d'erreurs de segmentation.\n\nOn définit la structure suivante représentant une entrée de l'index :\n\n.. code-block:: c\n\n    typedef struct indexEntry {\n        char word[26];\n        int count; //nombre de fois qu'un mot est apparu dans le corpus\n        struct indexEntry *next;\n    } Entry;\n\nÉcrivez une fonction `Entry *build_index(char *corpus)` qui renvoie l'index associé au corpus passé en paramètre. Vous pouvez modifier la chaine passée en argument.\n\nÉcrivez une fonction `void filter_index(Entry **index_head, int treshold)` qui supprime de l'index tous les mots qui n'ont pas été recensés au moins treshold fois.\n\nVous avez accès aux fonctions de `string.h` et de `stdlib.h`.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/index-text"
        },
        {
            "title": "Tri par insertion",
            "description": "On désire implémenter un algorithme de tri par insertion sur un tableau de N entiers, le tableau et sa taille étant passés en argument.\n\nL'algorithme de tri est le suivant : Pour chaque élément d'indice i (i variant de 1 à N-1)\n\n- cet élément devient la clé\n- on la compare avec l'élément d'indice i-1\n- si la clé est plus petite, on les échange et on recommence la comparaison avec l'élément précédent (d'indice i-2) et ainsi de suite, tant que la clé est plus petite que l'élément qui lui précède (ou qu'on est revenu au début du tableau)\n- quand la clé est à sa place (c'est-à-dire qu'elle est plus grande que ou égale à l'élément qui lui précède), la boucle intérieure est finie et on passe à l'élément d'indice i+1.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/insertion-sort"
        },
        {
            "title": "Intersection de fichiers",
            "description": "Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n    - http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)\n\n**Attention:** veuillez utiliser la version **HTML** du syllabus",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/intersection"
        },
        {
            "title": "Listes chaînées: concepts de base",
            "description": ".. raw:: html\n\n    <p>\n      Une liste chaînée est une structure de données permettant de représenter une séquence d’éléments. Dans cet exercice, une liste chaînée sera représentée par un pointeur sur la structure suivante:\n    </p>\n    <pre class=\"code\">\n    typedef struct node {\n      int value;\n      struct node *next;\n    } node;\n    </pre>\n    <p>\n      La liste vide est représentée par un pointeur nul. Le but des questions suivantes est de vous familiariser avec les listes chaînées en C. (Remarque : vous ne devez jamais traiter le cas des listes contenant un cycle.)\n    </p>\n\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/linked_lists_1"
        },
        {
            "title": "Listes chaînées: exercices avancés",
            "description": ".. raw:: html\n\n    <p>\n      Cet exercice contient des exercices plus avancés sur les listes chaînées. Il est conseillé de commencer par le premier exercice sur les listes chaînées avant celui-ci. À nouveau, une liste chaînée sera représentée par un pointeur sur la structure suivante\n    </p>\n    <pre class=\"code\">\n         typedef struct node {\n           int value; /* valeur du nœud */\n           struct node *next; /* pointeur vers l’élément suivant */\n         } node;\n    </pre>\n    <p>\n      La liste vide est représentée par un pointeur nul. Le but de l’exercice est de comprendre comment manipuler les pointeurs pour modifier des structures chaînées.\n    </p>\n    <p>\n      Dans toutes les sous-questions, vous devez réutiliser les nœuds des listes passées en argument et modifier leur structure. Il n’est jamais nécessaire d’allouer un nouveau nœud. (Remarque : vous ne devez jamais traiter le cas des listes contenant un cycle.)\n    </p>\n\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/linked_lists_2"
        },
        {
            "title": "Filtering a linked list",
            "description": "You have a linked list. Each element of the list is a ``struct node``.\n\n.. code-block:: c\n\n    struct node {\n        struct node *next;\n        int hash;\n        int id;\n        char name[20];\n        char buffer[100];\n        unsigned int timestamp;\n        char acl;\n        short flow;\n        char *parent;\n        void *fifo;\n    };",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/linked_structs"
        },
        {
            "title": "Reading arguments",
            "description": "When you execute a C program, its function ``main()`` is called with, as parameters, the name of the program and the arguments after the executable's name.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "S2"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/main_argc"
        },
        {
            "title": "malloc, realloc et free INCOMPLETE",
            "description": "La type de la plupart des variables en C est facile à déterminer. Néanmoins, le\nC contient aussi des types qui ne diffèrent que de façons subtiles, comme les",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/malloc"
        },
        {
            "title": "Multiplication de matrices",
            "description": "Écrivez une fonction ``int access(int *A, int taille, int ordonnee, int abscisse)`` qui renvoie l'élément d'abscisse et d'ordonnée indiquées dans une matrice carrée taille x taille d'entiers (il s'agit donc de l'élément `A[ordonnee][abscisse]`). Les indices `ordonnee` et `abscisse` vont de 1 à `taille`.\n\nÉcrivez une fonction qui effectue la multiplication de deux matrices carrées taille x taille d'entiers. Le prototype de la fonction est la suivante : `void mult(int *A, int *B, int *C, int taille)` et elle calcule C = A x B. Les trois matrices sont stockées sous forme de tableau ligne par ligne et la place de la matrice C est déjà allouée.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/matrix-mult"
        },
        {
            "title": "strlen, strcat et strcasecmp",
            "description": "La libraire `string(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/string.3.html>`_ implémente un grand nombre de fonctions de manipulation des strings qui vous seront utiles lors de différents projets de programmation.\n\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Pointer",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S2"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/mini-projet-string"
        },
        {
            "title": "Reading from the wire",
            "description": "Back in 1977, you want to read your e-mail with your freshly bought Apple II. You are connected to the ARPANET through a modem, but unfortunately the modem's manufacturer has only given a single function ``modem_read``, to read the data received by the modem, with the following prototype :\n\n``void modem_read(void *buffer, int *buf_len);``\n\nThis function fills the supplied buffer with the data received from the modem (an array of ``char``), and writes the number of bytes written to the value pointed by ``buf_len``. It can write up to maximum 256 bytes in a single call. This function is guaranteed to return.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Pointer",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/modem_read"
        },
        {
            "title": "Manipulate the memory",
            "description": "Given the following structure *university_t*:\n\n.. code-block:: c\n\n    typedef struct university {\n        char* city;\n        int creation;\n        person_t* rector;\n    } university_t;\n\nAnd the structure *person_t*:\n\n.. code-block:: c\n\n    typedef struct person {\n        char* name;\n        int salary;\n        int age;\n    } person_t;\n\nYou are asked to implement the functions ``init_all`` and ``free_all``, which respectively initialises the structure *universiy_t* and frees all the memory associated with it.\n\nThe *name* and the *city* have been allocated with *malloc*.\n\n*Hint:* all the data may not have been initialised correctly. Therefore, you have to handle all the cases (e.g. some pointers can be already NULL, and don't need to be freed).",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Louis Navarre",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Alexandre Gobeaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S3",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/multi-free"
        },
        {
            "title": "Mes propres sémaphores",
            "description": "On souhaite écrire notre propre type de sémaphore à l'aide de mutex. On déclare pour ce faire les 2 structures suivantes :\n\n.. code-block:: c\n\n    typedef struct semProcess {\n        pthread_mutex_t mutex;\n        struct semProcess *next;\n    } sem_process_t;\n\n    typedef struct mySem {\n        int value;\n        int capacity;\n        sem_process_t *blocked_procs;\n        pthread_mutex_t mutex;\n    } mysem_t;\n\nChaque sémaphore contient une valeur et une liste de processus bloqués. Le mutex de mySem devra être utilisé pour éviter que des appels concurrents des fonctions sousmentionnées sur la même sémaphore ne soient pas exécutés simultanément.\n\nÉcrivez une fonction `int mysem_wait(mysem_t *sem)` qui bloque le fil d'exécution si `value` de `sem` vaut 0 et ajoute le processus à la fin de la liste des processus bloqués. Pour bloquer un processus, vous devrez ajouter un `sem_process_t` à `blocked_procs` du sémaphore et verrouiller le mutex de `sem_process_t`. Si `value` est plus grand que 0, il est décrémenté.\n\nÉcrivez une fonction `int mysem_post(mysem_t *sem)` qui incrémente `value` de `sem` si aucun autre processus n'est bloqué, et sinon débloque le premier processus de la liste des processus bloqués. `value` ne peut jamais excéder `capacity`. **ATTENTION** : Ne libérez pas la structure sem_process_t d'un processus libéré, contentez-vous de supprimer son mutex. Considérez que la fonction `mysem_close` que vous n'avez pas à implémenter s'occupe de la libération des ressources.\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/my-sem"
        },
        {
            "title": "My strlen - REVIEWED",
            "description": "Your objective is to implement `strlen <https://sites.uclouvain.be/SystInfo/manpages/man3/strlen.3.html>`_ one of the basic functions of the C library that deals with strings.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/my_strlen"
        },
        {
            "title": "Ordered  linked list",
            "description": "Given the provided implementation of a linked list, you need to implement the ``insert`` function based on a specific order relation. The goal is to implement an ordered list similar to a `LinkedList` with a `Comparator` in Java.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/order_relation_linked_list"
        },
        {
            "title": "Soumission du projet de seconde session",
            "description": "Cette tâche permet de vérifier la validité de l'archive à soumettre pour le projet de seconde session sur les matrices creuses. Une archive ne passant pas le test ne sera pas corrigée.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/p3check"
        },
        {
            "title": "Palindrome",
            "description": "Palindrome are strings of text which read the same backward as forward, i.e. : \"racecar\", \"a man a plan a canal panama\" or \"kayak\".",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/palindrome"
        },
        {
            "title": "Producteurs/Consommateurs",
            "description": "Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n    - http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)\n\n**Attention:** veuillez utiliser la version **HTML** du syllabus\n\n\n.. image:: PC/buffer.png",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/PC"
        },
        {
            "title": "Pointer arithmetic",
            "description": "A hacker wanted to challenge you and encrypted your hard drive. To unlock your drive, he gave you a function ``get_key(int a, char b, int c)`` which returns the decryption key if the correct parameters are given.\n\nHe then hid the parameters *a*, *b* and *c* in memory, and gave you a pointer from which you can retrieve these parameters.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S3",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/pointer_types"
        },
        {
            "title": "Polynômes",
            "description": "On souhaite gérer des polynômes réels de degré inférieur ou égal à 10 en utilisant la structure suivante :\n\n`typedef struct { double coeff[10]; } poly;`\n\nqui servira à représenter le polynôme où coeff[0] est le coefficient du terme indépendant, coeff[1] le coefficient du terme en x, etc.\n\nÉcrivez une fonction `double eval(poly *P, double x)` qui calcule la valeur du polynôme P au point x. On pourra se servir de la formule de Horner : P(x) = ((...(a_9*x + a_8)*x + a_7)*x + ...)x + a_1)*x + a_0 où a_i est coeff[i].\n\nÉcrivez une fonction `void derivee(poly *P, poly *Pderiv)` qui inscrit dans `Pderiv` la dérivée du polynôme P.\n\nÉcrivez une fonction double `racine(poly *P, double x0)` qui calcule via la méthode de Newton la racine du polynôme P. La méthode est la suivante : on part d'un point initial, et on construit une suite de points qui se rapprochent de la racine en calculant à chaque étape un nouveau point à partir de la valeur du polynôme et de sa dérivée : x_n+1 = x_n - P(x_n)/P'(x_n). La fonction s'arrête lorsque abs(P(x_n)) < 0.0001. On suppose que le calcul converge toujours vers une racine.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/poly"
        },
        {
            "title": "Printing data",
            "description": "In this exercise, you will familiarize yourself with the functions `printf(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/printf.3.html>`_ (printing on the standard output) and `sprintf(3) <`printf <https://sites.uclouvain.be/SystInfo/manpages/man3/sprintf.3.html>`_ (text formatting).",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/printf"
        },
        {
            "title": "Modification de fichier",
            "description": "La fonction ``reverse``, dont les spécifications sont reprises ci-dessous, permet de manipuler les données dans un fichier.\n\n.. code-block :: c\n\n   /*\n    * @pre filename!=NULL\n    * @post Modifie le contenu du fichier filename en échangeant :\n    *  - le premier byte du fichier avec le dernier\n    *  - le deuxième byte avec l'avant dernier\n    *  - ...\n    * Apres modification, le fichier est fermé.\n    * retourne 0 en cas de succès, -1 en cas d'erreur.\n    * L'implémentation ne peut pas utiliser read, write, fread, fwrite, fgetc, fgets, ... Ce qui implique que mmap est obligatoire.\n    */\n\nLe syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\nLes pages de manuel sont accessibles depuis les URLs suivants :\n\n* http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n* http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n* http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions librairies)",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/reverse"
        },
        {
            "title": "Calculatrice en notation polonaise inversée",
            "description": "La notation polonaise inversée permet d'écrire de façon non-ambigüe sans parenthèses des formules arithmétiques. Par exemple, le calcul ((1 + 2) × 4) + 3 peut être noté 1 2 + 4 * 3 + en notation polonaise inverse, ou encore 3 4 1 2 + * +. L'avantage de cette notation est qu'elle est très facilement compréhensible par un ordinateur : on imagine une pile où on peut soit ajouter un élément sur la pile, soit retirer le dernier élément ajouté. En parcourant la formule arithmétique, si on rencontre un nombre, on l'ajoute à la pile, si on rencontre une opérande (par ex. le symbole '+'), on retire les 2 derniers éléments de la pile, on en fait la somme et on ajoute le résultat à la pile.\n\nPour ce problème, vous ne pourrez utiliser que la variable globale `double stack[STACK_SIZE]`, représentant la pile, et `int stack_height`, représentant la hauteur actuelle de la pile, qui seront déjà initialisées à 0 et accessibles par vos fonctions. Vous pouvez supposer que les exemples utilisés par les tests feront en sorte que le nombre d'éléments actuels dans la pile ne dépassera jamais `STACK_SIZE`.\n\nÉcrivez une fonction  void push(double value)` qui permet d'ajouter l'élément value à la pile.\n\nÉcrivez une fonction `double pop(void)` qui enlève et retourne l'élément au sommet de la pile.\n\nÉcrivez une fonction `double rpn(char *expr)` qui calcule l'expression en notation polonaise inverse contenue dans expr et retourne le résultat. Vous pouvez supposer que `expr` contiendra toujours une expression correcte où il ne restera jamais qu'un seul élément sur la pile à la fin de l'exécution. Indice : utilisez la fonction strtok(3) pour séparer les différents éléments de la chaîne et la fonction atof(3) pour convertir l'éventuel nombre rencontré en double. Exemple : \"4 2 5 * + 1 3 2 * + /\" est censé renvoyer 2. Les opérandes possibles sont + (addition), - (soustraction), * (multiplication) et / (division).",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/rpn-calc"
        },
        {
            "title": "Redirection des flux de sortie et d'erreur standards",
            "description": "Dans un shell, il est parfois nécessaire d'exécuter des programmes en redirigeant leurs flux standards de sortie et d'erreur vers un fichier.\n\nLe syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n- http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n- http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n- http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/run_redir"
        },
        {
            "title": "Capture The Flag 1",
            "description": "Téléchargez `cette archive <https://inginious.info.ucl.ac.be/course/LSINF1252/s1_ctf1/archive.tar.gz>`_, ouvrez ``FirstMission`` et suivez les instructions. Un code individuel vous sera fourni à la fin de l'exercice. Entrez-le ci-dessous pour confirmer que vous avez complètement réalisé cet exercice.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "Command line",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S1"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_ctf1"
        },
        {
            "title": "Capture The Flag 2",
            "description": "Téléchargez `cette archive <https://inginious.info.ucl.ac.be/course/LSINF1252/s1_ctf2/CTF2.tar.gz>`_. Placez son contenu dans un dossier de votre choix, lisez le fichier ``FirstMission`` et suivez les consignes.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "S1",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_ctf2"
        },
        {
            "title": "Diff",
            "description": "3 students are suspected of doing illegal things with computers of the university. They know that the computers send logs to the server and so hid their activity from the server. But they don't know that logs are also saved on the different computers.\nThere are the logs from the server and from the students, use `diff(1) <https://sites.uclouvain.be/SystInfo/manpages/man1/diff.1.html>`_ to compare them and find which students are innocent.\n\n- `syslog <https://inginious.info.ucl.ac.be/course/LSINF1252/s1_diff/syslog.log>`_\n- `student 1 <https://inginious.info.ucl.ac.be/course/LSINF1252/s1_diff/student1.log>`_\n- `student 2 <https://inginious.info.ucl.ac.be/course/LSINF1252/s1_diff/student2.log>`_\n- `student 3 <https://inginious.info.ucl.ac.be/course/LSINF1252/s1_diff/student3.log>`_",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "multiple_choice"
                },
                {
                    "text": "Command line",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S1"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_diff"
        },
        {
            "title": "grep",
            "description": "The `grep(1) command <https://sites.uclouvain.be/SystInfo/manpages/man1/grep.1.html>`_ can be used to detect or extract lots of information from text files. When working with source code, `grep(1) <https://sites.uclouvain.be/SystInfo/manpages/man1/grep.1.html>`_ can help you to find in which files some functions or constants have been defined. For this exercise, we will use the source code of the `CUnit <http://cunit.sourceforge.net>`_ testing framework that you can download as a `tar archive  <https://inginious.info.ucl.ac.be/course/LSINF1252/s1_grep/CUnit.tar>`_.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "S1",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_grep"
        },
        {
            "title": "Pipes",
            "description": "In this exercise you will learn to use pipes, refer to `this section <https://sites.uclouvain.be/SystInfo/notes/Theorie/html/intro.html#shell>`_ for their use.\n\nDownload the following `input <https://inginious.info.ucl.ac.be/course/LSINF1252/s1_pipes/input.txt>`_ from where you want to extract an alphabetically **sorted** list of **unique** hashtags. This can easily be done with pipes. To only select hashtags from the input, you can either use ``sed '/ [^{#}]/d'`` or `grep(1) <https://sites.uclouvain.be/SystInfo/manpages/man1/grep.1.html>`_.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "Command line",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S1"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_pipes"
        },
        {
            "title": "tar",
            "description": "Unix users often need to backup files and directories or send them over the Internet. `tar(1) <https://sites.uclouvain.be/SystInfo/manpages/man1/tar.1.html>`_ is a very useful tool which can be used to create compressed archives of directories and all the files that they contain. At the end of a project, you will have created the following files (you can download them from `here <https://inginious.info.ucl.ac.be/course/LSINF1252/s1_tar/Enonce.zip>`_)\n\n.. code-block:: console\n\n    /\n        file\n        folder1/\n            file1.c\n            file2.c\n            file3.c\n        folder2/\n            file1.h\n            fime2.h\n            file3.h\n\nUsing `tar(1) <https://sites.uclouvain.be/SystInfo/manpages/man1/tar.1.html>`_, create a ``.tar.gz`` compressed archive which contains all these files and directories and submit it below.\n\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "Command line",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S1"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_tar"
        },
        {
            "title": "make basics",
            "description": "*Estimated time: 20 minutes*\n\n``make`` is a task runner for targets described in a `Makefile`. It is mostly used to control the compilation of an executable from source code. Thus, you can use it to automate the tidious task of compiling your c code, or even automate the compilation of a report made with LaTeX.\n\n``make`` a new beginning\n------------------------\n\nTo give you a first taste, open up a *terminal* and type the following command: ``make``.\n\n``make`` will greet you with the following message:\n\n.. code-block::\n\n    make: *** No targets specified and no makefile found.  Stop.\n\nSo what happened? ``make`` first start to search in your *current directory* for a file called ``Makefile``. This file contains *instructions*, aka *rules*, that tell ``make`` what to do.  Since there is no such file, ``make`` stops almost instantly.\n\n``make`` it simple\n------------------\n\nNow write a simple hello world program, which you will save into a file called ``hello.c``. This program will print the following on the standard output:\n\n.. code-block::\n\n     Hello make\n\nNow, fire up your terminal, use ``cd path/to/hello/folder/`` to go to the directory which contains ``hello.c`` (`download hello.c <https://inginious.info.ucl.ac.be/course/LSINF1252/s2_make/hello.c>`_ to compare with what you did) and type: ``make hello``\n\nNow the ``make`` comes alive and tells you something like:\n\n.. code-block::\n\n    gcc     hello.c   -o hello\n\nWow! What happened? When you typed ``make hello``, ``hello`` is what is called a **target**. A **target** is usually the name of a file that is generated by a program; examples of targets are executable or object files.\n\nBasically, ``make`` will search for a file named ``hello`` and detect from that file what programming language it uses. For most languages, ``make`` has some basic builtin recipes, called **implicit rules**, to compile it. Here the **recipe** is given in the above output.\n\nIn that output:\n\n* ``gcc`` stands for *GNU C Compiler*;\n* ``hello.c`` the C program to be compiled;\n* ``-o hello`` an option to place the output of the compilation in the file ``hello``.\n\nNow if you type ``ls`` in your command line, you will see that a file ``hello`` appeared. This is the **executable** built by ``make`` from ``hello.c``. Now you can execute it and verify what is printed on the standard output.\n\nIf you type again ``make hello`` in your command line, it will tell you:\n\n.. code-block::\n\n    make: 'hello' is up to date.\n\nThat is because ``make`` only builds the files that are changed. If ``hello`` is more recent than its source file ``hello.c``, ``make`` will skip the compilation process.\n\nTo see this, modify ``hello.c`` to write the following on the standard output:\n\n.. code-block::\n\n    Hello, make!\n\nFinally, run ``make hello`` again. Since ``hello.c`` is more recent than ``hello``, ``make`` will compile the source file again.\n\nThats it, you made your first experiences with ``make``.\n\nNow I strongly recommend you read `sections 2.1 to 2.3. in the GNU make manual <https://www.gnu.org/software/make/manual/make.html#Introduction>`_. It will only take you 10 minutes (included in the above given estimated time) and will help you understand how to ``make`` magic happen.\n\nOnce you read these 3 sections, let us practice a bit.\n\nTo try the following questions locally, you can download a zip file of the questions folder `here <https://inginious.info.ucl.ac.be/course/LSINF1252/s2_make/make_me.zip>`_.\n\n----\n\nReferences\n----------\n\n* https://sites.uclouvain.be/SystInfo/notes/Outils/html/make.html\n* https://www.gnu.org/software/make/manual/",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Pablo Gonzalez Alvarez",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "Makefile"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S2",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s2_make"
        },
        {
            "title": "make basics - calculator",
            "description": "*Estimated time: 5 minutes*\n\nYou have just built a simple calculator. When typing ``ls`` in your command line, the source folder has the following structure:\n\n.. code-block:: console\n\n    calc.c    calc.h    Makefile    operations.c    operations.h\n\n``calc.c`` contains the calculator which handles the 4 basic operations: addition, substraction, multiplication, and division. These 4 operations are implemented in ``operations.c``.\n\nAs you might have noticed, there are also two other files: ``calc.h`` and ``operations.h``. These are the corresponding **header** files of ``calc.c`` and ``operations.c``. These headers contain the function prototypes and specifications, but not their definitions. They can also contain ``extern`` declarations of variables. For more on that, see `this page <https://www.tutorialspoint.com/cprogramming/c_header_files.htm>`_ or chapter 4 in [kernighan2006c]_.\n\nWhen compiling this calculator, you need to specify in the ``Makefile`` rules the header files needed by ``calc.c``, that is both ``calc.h`` and ``operations.h``.\n\n----\n\n.. [kernighan2006c] Kernighan, B. W., & Ritchie, D. M. (2006). The C programming language.\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Pablo Gonzalez Alvarez",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "Makefile"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S2",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s2_make_calc"
        },
        {
            "title": "make basics - multiple choice questions",
            "description": "*Estimated time: 5 minutes*",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Pablo Gonzalez Alvarez",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "multiple_choice"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S2",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s2_make_mcq"
        },
        {
            "title": "Cunit basics",
            "description": "*Estimated time: 5 minutes*",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "CUnit",
                    "category": 0
                },
                {
                    "text": "S3",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s3_cunit_basics"
        },
        {
            "title": "make more basics",
            "description": "*Estimated time: 20 minutes*\n\nFirst, read `sections 2.4 to 2.7. in the GNU make manual <https://www.gnu.org/software/make/manual/make.html#Variables-Simplify>`_. It will only take you 10 minutes (included in the above given estimated time) and will help you understand how to ``make`` more magic happen.\n\nAs you have just read, one very useful use of Makefiles is to use variables. You can use a variable to define the C compiler you will use and the flags you want it to use.\n\nFor instance, let us consider the following excerpt of a Makefile:\n\n.. code-block:: console\n\n    # See gcc/clang manual to understand all flags\n    CFLAGS += -std=c99 # Define which version of the C standard to use\n    CFLAGS += -Wall # Enable the 'all' set of warnings\n    CFLAGS += -Werror # Treat all warnings as error\n    CFLAGS += -Wshadow # Warn when shadowing variables\n    CFLAGS += -Wextra # Enable additional warnings\n    CFLAGS += -O2 -D_FORTIFY_SOURCE=2 # Add canary code, i.e. detect buffer overflows\n    CFLAGS += -fstack-protector-all # Add canary code to detect stack smashing\n\n    # Object files\n    OBJ = # TODO\n\n    ## all        : Build calculator (by default)\n    # Default target\n    all: calc\n\n    ## calc        : Build calculator\n    calc: # TODO\n\n    calc.o: # TODO\n\n    operations.o: # TODO\n\n    .PHONY: clean mrproper help\n\n    ## clean        : Remove auto-generated files\n    clean:\n        @rm -f src/*.o\n\n    ## mrproper    : Remove both auto-generated & built files\n    mrproper: clean\n        @rm -f calc\n\n    ## help        : Show different make options\n    help: Makefile\n        @sed -n 's/^##//p' $<\n\n\n\n\n\nIn this file we used 3 variables: ``CC`` to define the C Compiler; ``CFLAGS`` to define the C Compiler flags; ``OBJ`` to define the object files. This is a common use of variables to both simplify the Makefile and easily change the settings of the compiler.\n\nNotice the use of two ``.PHONY`` targets: ``clean`` which will remove auto-generated files, e.g. object files; ``mrproper`` which will remove both auto-generated & built files, e.g. executable files; ``help`` which will search for lines starting with ``##`` and print them on ``stdout`` without the ``##``. Try it out by tipping ``make help``.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Pablo Gonzalez Alvarez",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S3",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s3_make"
        },
        {
            "title": "make more basics - multiple choice questions",
            "description": "*Estimated time: 15 minutes*",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "multiple_choice"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S3",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s3_make_mcq"
        },
        {
            "title": "make tests",
            "description": "*Estimated time: 15 minutes*\n\nThis week, we will see how to automate the testing process.\nYou have the following project folder structure:\n\n.. code-block::\n\n    src/\n        calc.c\n        calc.h\n        operations.c\n        operations.h\n    test/\n        calc_test.c\n        operations_test.c\n    Makefile\n\nThe ``Makefile`` is partially done, but somehow the target ``test`` for building the tests was lost.\n\n.. code-block::\n\n    CC = gcc\n    # See gcc/clang manual to understand all flags\n    CFLAGS += -std=c99 # Define which version of the C standard to use\n    CFLAGS += -Wall # Enable the 'all' set of warnings\n    CFLAGS += -Werror # Treat all warnings as error\n    CFLAGS += -Wshadow # Warn when shadowing variables\n    CFLAGS += -Wextra # Enable additional warnings\n    CFLAGS += -O2 -D_FORTIFY_SOURCE=2 # Add canary code, i.e. detect buffer overflows\n    CFLAGS += -fstack-protector-all # Add canary code to detect stack smashing\n\n    # We have no libraries to link against except libc, but we want to keep\n    # the symbols for debugging\n    LDFLAGS= -rdynamic -lcunit\n\n    ## all        : Build calc (by default)\n    # Default target\n    all: calc\n\n    ## debug        : Build calc in debug mode\n    # If we run `make debug` instead, keep the debug symbols for gdb\n    # and define the DEBUG macro.\n    debug: CFLAGS += -g -DDEBUG -Wno-unused-parameter -fno-omit-frame-pointer\n    debug: clean calc\n\n    ## calc        : Build calc\n    # We use an implicit rule: look for the files {calc,operations}.{c,h},\n    # compile them and link the resulting *.o into an executable named calc\n    calc: calc.o operations.o\n        $(CC) $(CFLAGS)  -o calc {calc,operations}.o\n\n    # We use an implicit rule: look for the files calc.{c,h},\n    # compile them w/out linking\n    calc.o: src/calc.c src/calc.h\n        $(CC) $(CFLAGS) -c src/calc.{c,h}\n    # We use an implicit rule: look for the files operations.{c,h},\n    # compile them w/out linking\n    operations.o: src/operations.c src/operations.h\n        $(CC) $(CFLAGS) -c src/operations.{c,h}\n\n    # YOUR CODE HERE #\n\n    # Declare clean, mrproper and help as a phony targets\n    .PHONY: clean mrproper help\n\n    ## clean        : Remove auto-generated files from build\n    clean:\n        @rm -f *.o\n\n    ## clean-debug        : Removve auto-generated files from debug mode build\n    clean-debug:\n        @rm -f src/*.gch\n    ## mrproper    : Remove both auto-generated & built files\n    mrproper: clean clean-debug\n        @rm -f calc\n\n    ## help        : Show different make options\n    help: Makefile\n        @sed -n 's/^##//p' $<\n\nTo try locally, you can download the project folder `_here <>`",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Pablo Gonzalez Alvarez",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "Makefile"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S3",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s3_make_tests"
        },
        {
            "title": "Save struct into file",
            "description": "*Estimated time: 25 minutes*\n\nYou are currently processing an array composed of ``struct point`` defined below. In this programme, you need to store the content of the entire array in a file to be able to reuse it later. Write a C function to write the array composed of ``struct point`` into a file. The file may already exist or not. After the execution of the function, the file should only contain the array. If the file has to be created, the user who created it must have the permission to read it.\n\n.. code-block:: c\n\n    typedef struct point {\n        int x;\n        int y;\n        int z;\n    } point_t;\n\nUse only ``open(2)``, ``write(2)`` and ``close(2)``. You can only call ``write(2)`` once.\n\nHint : read carefully the man page of ``open(2)`` to manage all the  cases mentioned above. Be sure to open the file with the appropriate rights.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Open",
                    "category": 0
                },
                {
                    "text": "Close",
                    "category": 0
                },
                {
                    "text": "File",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S5"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s4_file_save_struct"
        },
        {
            "title": "Reading integers in a binary file",
            "description": "*Estimated time: 25 minutes*\n\nGiven a binary file containing some (possibly none) positive integers (``int``) that were stored in the file by successive calls of ``write(fd,&num,sizeof(int))`` write code that computes the sum of all integers that were stored in the file. The function returns the sum when there are no errors. In case of errors, it returns.\n\n- If ``open()`` fails, return ``-1``.\n- If ``read()`` fails, return ``-2``.\n- If ``close()`` fails, return ``-3``.\n\nYou can only use ``open(2)``, ``read(2)``, ``write(2)`` and ``close(2)``.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Close",
                    "category": 0
                },
                {
                    "text": "Open",
                    "category": 0
                },
                {
                    "text": "Sum",
                    "category": 0
                },
                {
                    "text": "File",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S5"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s4_read_file_array_integer"
        },
        {
            "title": "Get and set on array stored in binary file",
            "description": "*Estimated time: 30 minutes*\n\nGiven a file containing a large array of integers, you have to write a function to edit the element at a given index in the array and another function to retrieve a specific element from this array.\n\nSince the array is huge, you cannot load it completely in memory. Consequently, you have to naviguate directly through the array in the file by using ``lseek(2)``.\n\nYou may want to use ``fstat(2)`` to obtain informations about a given file.\n\nUse only ``open(2)``, ``read(2)``, ``write(2)``, ``close(2)`` and ``lseek(2)``.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Close",
                    "category": 0
                },
                {
                    "text": "Open",
                    "category": 0
                },
                {
                    "text": "S5",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s5_big_array_get_set"
        },
        {
            "title": "File copy",
            "description": "*Estimated time: 30 minutes*\n\nGiven a file containing arbitrary bytes, you must write a function that copies the file. Obviously, your function cannot modify the content of the original file. Beware that the copied file should have the same permissions as the original file.\n\nUse only ``open(2)``, ``read(2)``, ``write(2)``, ``stat(2)`` and ``close(2)``.\n\n*Hint: you may need either to go through the file or to get the total size to copy all of it.*",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Close",
                    "category": 0
                },
                {
                    "text": "Permission",
                    "category": 0
                },
                {
                    "text": "Copy",
                    "category": 0
                },
                {
                    "text": "Open",
                    "category": 0
                },
                {
                    "text": "S5",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s5_file_copy"
        },
        {
            "title": "File exists",
            "description": "*Estimated time: 10 minutes*\n\nUsing `open(2) <https://sites.uclouvain.be/SystInfo/manpages/man2/open.2.html>`_, determine if a file exists.\n\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "File",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S5"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s5_file_exists"
        },
        {
            "title": "Search and replace",
            "description": "Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n- http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n- http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n- http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/Search_and_replace"
        },
        {
            "title": "Bitwise operation: setting a bit",
            "description": "In this exercise, we will work with operations on bits. When we speak about the position of a bit, index 0 corresponds to lowest order bit, 1 to the second-lowest order bit, ...\n\nIn C source code, you can write a number in binary (base 2) by prefixing it via 0b., e.g. 0b11010 = 26.\n\nThis exercise will introduce some non-standard data types which guarantee that the variable has a fixed number of bits. Indeed, on some machines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to perform bitwise operations, we have to know first on how many bits we are working.\n\nFor this, C introduces a new class of variable types :\n\n- *int8_t* (signed integer of 8 bits)\n- *uint8_t* (unsigned integer of 8 bits)\n- *uint16_t* (unsigned integer of 16 bits)\n\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These types are defined in <stdint.h>",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/set_bit"
        },
        {
            "title": "Écrire un shell",
            "description": ".. raw:: html\n\n    <p>\n      Le shell est un outil dans les systèmes UNIX qui vous permet facilement exécuter d’autres programmes, et même de les combiner de façon intelligente : vous pouvez, par exemple, utiliser <code>grep foo fichier</code> pour trouver les lignes qui contiennent <code>foo</code> dans un fichier, <code>wc -l fichier</code> pour compter le nombre de lignes dans un fichier ; mais en les combinant, on peut écrire <code>grep foo fichier | wc -l</code> pour compter le nombre de lignes qui contiennent dans un fichier.\n    </p>\n    <p>\n      Dans cet exercice, vous allez implémenter la partie du shell qui exécute une commande ou qui en combine deux. (Remarque : toutes les tableaux d’arguments passés à vos fonctions contiennent comme premier élément le chemin vers l’exécutable et comme dernier élément <code>NULL</code>).\n    </p>\n\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/shell"
        },
        {
            "title": "Simple stack",
            "description": "You are asked to implement the ``pop`` and ``push`` functions of the following `stack <https://en.wikipedia.org/wiki/Stack_(abstract_data_type)>`_ interface :\n\n.. code-block:: c\n\n    struct node {\n        node *next;\n        char *name;\n    };\n\n.. image:: https://upload.wikimedia.org/wikipedia/commons/b/b4/Lifo_stack.png\n        :align: right\n        :height: 540px\n        :width: 773px\n        :scale: 50%\n\n\n\n*Hints* :\n\n- ``char *name`` is also a pointer, memory must be allocated by using `malloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html>`_ to copy the string on the stack.\n\n- Other useful commands: `strncpy(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/strncpy.3.html>`_ and `strlen(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/strlen.3.html>`_.\n\n- Do not forget to free **all** the allocated space when popping one element.\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/simple_stack"
        },
        {
            "title": "Sleepy malloc",
            "description": "The `malloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html>`_ function may fail, for instance if the OS has no free memory remaining. In this case, it may be possible that some other processes may free some memory after some time.\n\nIn our program, instead of reporting an error immediately if no free memory is available, we will wait some time to see if the OS has freed memory for us.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S3",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/sleep_malloc"
        },
        {
            "title": "Soumission du projet fractale",
            "description": "Cette tâche vous permet de soumettre votre projet. Elle va également valider le format de votre archive, la présence des fichiers requis, la présence des cibles requises dans votre Makefile et la bonne compilation de votre projet. Le format requis est décrit dans l'énoncé disponible sur Moodle.\n\nVotre archive doit respecter le format de nommage `fractal_NUMGroupe_NOM1_NOM2.zip`. **Un seul des deux membres du groupe doit soumettre.**\n\nLa dernière soumission **valide** sera considérée pour l'évaluation. En l'absence de telle soumission (donc si votre soumission comporte une erreur), votre projet **ne sera pas considéré pour l'évaluation**.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Quentin De Coninck",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/soumission-projet-fractale"
        },
        {
            "title": "Global and local variables",
            "description": "In a C program, variables are stored in different regions in memory, depending on where the variables have been initialized. Each memory region has different properties about how the variables can be accessed, modified, ... This exercise will show you how global variables and variables on the stack are managed.\n\n.. code-block:: c\n\n    int result;\n\n    void sum1(int a1, int b1) {\n        a1 = a1 + b1;\n    }\n\n    void main(int argc, char **argv) {\n        int a1 = 5, b1 = 6;\n\n        sum1(a1, b1);\n        printf(\"sum1: %d\\n\", a1);\n\n        int a2 = 3, b2 = 7;\n        sum2(a2, b2)\n        printf(\"sum2: %d\\n\", result);\n\n        int a3 = 1, b3 = 8;\n        sum3(&a3, &b3);\n        printf(\"sum3: %d\\n\", a3);\n    }",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "Pointer",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/stack_vs_heap"
        },
        {
            "title": "Exponentially static counter - REVIEWED",
            "description": "A variable declared inside a function with the keyword *static* implies that the value of this variable will be kept across the different calls to this function.\n\nFor example, the first call to your function should return ``1``. The next call ``2``, then ``4``, ..., ``4096``, ``1``, ...",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/static_counter"
        },
        {
            "title": "Improved strcpy",
            "description": "The classic function ``char *strcpy(char *destination, const char *source);`` `strcpy(3) <https://linux.die.net/man/3/strcpy>`_ needs a destination buffer where the source string is copied. We ask you to code a function which allocates a buffer itself, and then performs the copy.\n\nThe use of copy functions as ``memcpy`` is not allowed.\n\n*Hint* : use `malloc(3) <https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html>`_",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Malloc",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/strcpy"
        },
        {
            "title": "Manipulation de chaines de caractères",
            "description": "Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n    - http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)\n\n**Attention:** veuillez utiliser la version **HTML** du syllabus",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/strsplit"
        },
        {
            "title": "Echange de valeurs de fractions",
            "description": "Soit la définition de la structure représentant des fractions entières suivante:\n\n.. code-block:: c\n\n    struct fract_t {\n            int num;\n            int denum;\n    };\n\nOn veut pouvoir swapper (échanger) les valeurs de deux fractions en utilisant la fonction ``void swap(struct fract_t *a, struct fract_t *b)``. Ecrivez le code de cette fonction.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Fabien Duchêne",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Christoph Paasch",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/swap"
        },
        {
            "title": "Swap my integers",
            "description": "",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Pointer",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S2"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/swap2int"
        },
        {
            "title": "Through the array",
            "description": "In C, an array is a set of variables sharing the same data type : ``int array[3] = {42, 1337, 0};``.\n\nAn item of an array can be retrieved through its index.\nFor example ``array[1]`` gives the second element of the array (here ``1337``).",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S1",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/tab_find"
        },
        {
            "title": "Trier une liste chainée",
            "description": "Le but de cet exercice est de trier une liste chaînée. Pour ce faire, on vous laisse le choix de l'algorithme que vous souhaitez implémenter. La seule contrainte est que la liste se décrit comme suit :\n\n.. code-block:: c\n\n    struct list {\n        struct node* head;\n    }\n    struct node {\n        int elem;\n        struct node* next;\n    }",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Cécile Hautecoeur",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Aurélie Massart",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "StudentJob"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/tri"
        },
        {
            "title": "true false",
            "description": "true false",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/truefalse"
        },
        {
            "title": "Les types (1/2)",
            "description": "Le type de la plupart des variables en C est facile à déterminer. Néanmoins, le\nC contient aussi des types qui diffèrent de façons parfois subtiles.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S3",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/types"
        },
        {
            "title": "Les types (2/2)",
            "description": "Le type de la plupart des variables en C est facile à déterminer. Néanmoins, le\nC contient aussi des types qui diffèrent de façons parfois subtiles.",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S3",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/types2"
        },
        {
            "title": "Stockage d'un vecteur de réels dans un fichier",
            "description": "Le syllabus est accessible depuis l'URL http://sites.uclouvain.be/SystInfo\n\nLes pages de manuel sont accessibles depuis les URLs suivants :\n    - http://sites.uclouvain.be/SystInfo/manpages/man1 (commandes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man2 (appels systèmes)\n    - http://sites.uclouvain.be/SystInfo/manpages/man3 (fonctions des librairies)\n\n**Attention:** veuillez utiliser la version **HTML** du syllabus",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/Vectorfile"
        }
    ],
    "own_categories": {
        "0": "thématique",
        "1": "Misconception",
        "2": "autres"
    },
    "extraction_date": "2019-12-07T15:53:48.060Z",
    "url": "https://github.com/UCL-INGI/LSINF1252"
}