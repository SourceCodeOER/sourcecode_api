{
    "exercises": [
        {
            "title": "Phase de réalisation",
            "description": "```{=html}\r\n<p>\r\n  Complétez les champs ci-dessous conformément à l'énoncé de la phase de réalisation de la mission 7.\r\n</p>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Virginie Van den Schrieck",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/105_java",
            "archive_properties": {
                "folders": [
                    "105_java"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation",
            "description": "```{=html}\r\n<p>\r\n  On vous demande d'écrire deux classes, Temps et Chanson.\r\n</p>\r\n<p>\r\n  La classe Temps représente un temps décomposé en heures, minutes et secondes. Elle doit posséder les méthodes suivantes :\r\n</p>\r\n<ul>\r\n  <li>public Temps(int h, int m, int s), avec m et s compris entre 0 et 59)\r\n  </li>\r\n  <li>public int toSecondes(), qui renvoie le nombre total de secondes pour ce temps.\r\n  </li>\r\n  <li>public int delta(Temps t), qui retourne la différence entre ce temps-ci et t, en secondes (positif si ce temps-ci est plus grand).\r\n  </li>\r\n  <li>public boolean apres(Temps t) : renvoie true si ce temps-ci est plus grand que t.\r\n  </li>\r\n  <li>public void ajouter(Temps t) : ajoute t à ce temps-ci. Corrige de manière à ce que les minutes et les secondes soient dans l’intervalle [0 . . . 59], en reportant au besoin les valeurs hors limites sur les unités supérieures (60 secondes = 1 minute, 60 minutes = 1 heure).\r\n  </li>\r\n  <li>public String toString() : retourne ce temps sous la forme de texte “heures :minutes :secondes”. Astuce : la méthode String.format(\"%02d:%02d:%02d\", heures, minutes, secondes) retourne le String désiré avec les nombres en deux chiffres en ajoutant les zéros nécessaires.\r\n  </li>\r\n</ul>\r\n<p>\r\n  La classe Chanson, quant à elle, représente une chanson caractérisée par un titre (String), un auteur (String), et une durée (Temps). Ses méthodes sont les suivantes :\r\n</p>\r\n<ul>\r\n  <li>public Chanson(String t, String a, Temps d);\r\n  </li>\r\n  <li>public String getTitre() : renvoie le titre de la chanson\r\n  </li>\r\n  <li>public String getAuteur() : retourne l'auteur de cette chanson\r\n  </li>\r\n  <li>public Temps getDuree() : retourne la durée de cette chanson\r\n  </li>\r\n  <li>public String toString() : retourne un String décriant cette chanson sous le format TITRE - AUTEUR - DUREE\r\n  </li>\r\n</ul>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Virginie Van den Schrieck",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/106_java",
            "archive_properties": {
                "folders": [
                    "106_java"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation",
            "description": "```{=html}\r\n<p>\r\n  Complétez les champs ci-dessous conformément à l'énoncé de la phase de réalisation de la mission 9.\r\n</p>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Virginie Van den Schrieck",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/108_java",
            "archive_properties": {
                "folders": [
                    "108_java"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation",
            "description": "```{=html}\r\n<p>\r\n  Complétez les champs ci-dessous conformément à l'énoncé de la phase de réalisation de la mission 3.\r\n</p>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Virginie Van den Schrieck",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/111_java",
            "archive_properties": {
                "folders": [
                    "111_java"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation",
            "description": "```{=html}\r\n<p>\r\n  Complétez la classe BioInfo conformément à l'énoncé de la phase de réalisation de la mission 4.\r\n</p>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Virginie Van den Schrieck",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/112_java",
            "archive_properties": {
                "folders": [
                    "112_java"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Structures chainées",
            "description": "```{=html}\r\n<p>\r\n  Complétez ici le corps de la classe <code>Stack</code> qui doit implémenter l'interface <code>StackIF.java</code>. Vous devez mettre un constructeur qui ne prend aucun paramètre.\r\n</p>\r\n<p>\r\n  Pour rappel, voici l'interface <code>StackIF</code> :\r\n</p>\r\n<pre class=\"code\">\r\npublic interface StackIF\r\n{\r\n   /**\r\n    * @pre c != null\r\n    * @post L'état c a été ajouté au sommet de cette pile\r\n    */\r\n   public void push (State c);\r\n\r\n   /**\r\n    * @pre -\r\n    * @post La valeur renvoyée contient l'état se trouvant au sommet\r\n    *       de cette pile. Cet état est par ailleurs retiré de cette pile.\r\n    *       Si cette pile est vide, génère une EmptyStackException.\r\n    */\r\n   public State pop() throws EmptyStackException;\r\n\r\n   /**\r\n    * @pre -\r\n    * @post La valeur renvoyée contient le nombre d'éléments de cette pile.\r\n    */\r\n   public int size();\r\n\r\n   /**\r\n    * @pre -\r\n    * @post La valeur renvoyée contient true si cette pile est vide,\r\n    *       et false sinon.\r\n    */\r\n   public boolean isEmpty();\r\n\r\n   /**\r\n    * @pre 0 &lt;= n &lt; size()\r\n    * @post La valeur renvoyée contient le n-ième élément de cette pile,\r\n    *       l'élément au sommet étant celui d'indice 0.\r\n    */\r\n   public State peek (int n);\r\n}\r\n</pre>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Sébastien Combéfis",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/14_java",
            "archive_properties": {
                "folders": [
                    "14_java"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Exercice complémentaire 1",
            "description": "```{=html}\r\n<p>\r\n  On souhaite compter le nombre d'entiers positifs compris entre deux bornes a et b, non incluses.\r\n</p>\r\n<p>\r\n  Vous devez définir la méthode <code>countPosIntBetween</code> qui compte le nombre d'entiers compris entre les deux paramètres entiers a et b, non inclus.\r\n</p>\r\n<p>\r\n  Par exemple, le nombre d'entiers positifs compris entre -1 et 2, bornes non incluses, sera égal à 2.\r\n</p>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Virginie Van den Schrieck",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/85_java",
            "archive_properties": {
                "folders": [
                    "85_java"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Recherche du plus long palindrome",
            "description": "```{=html}\r\n<p>\r\n  Un palindrome est un mot dont l’ordre des caractères reste le même qu’on le lise de gauche à droite ou de droite à gauche, comme radar ou kayak. Votre objectif dans cet exercice est de trouver le plus long palindrome contenu dans une chaîne de caractères, et d'en renvoyer la longueur.\r\n</p>\r\n<p>\r\n  Détecter le plus long palindrome dans une chaîne de caractères est un problème compliqué. En informatique, lorsqu'on est face à un problème compliqué, la meilleure approche pour le résoudre est de le découper en petits problèmes plus simples. Il suffit ensuite d'écrire une méthode pour résoudre chaque sous-problème, et de combiner ces méthodes pour résoudre le problème compliqué.\r\n</p>\r\n<p>\r\n  Pour rechercher le plus long palindrome, une piste est d'abord d'écrire une méthode permettant d'extraire d'une chaîne de caractères de longueur n les sous-chaînes de longueur n-1, n-2, etc. Notez que la classe String contient des méthodes qui pourraient vous aider pour cela.\r\n</p>\r\n<p>\r\n  Vous devez donc écrire une méthode dont la spécification est la suivante :\r\n</p>\r\n<pre class=\"code\">\r\n/*\r\n * @pre - s != null\r\n *\r\n * @post retourne la longueur du plus long palindrome trouvé dans s.\r\n */\r\n<b>public static int</b> longueurPlusLongPalindrome(String s);\r\n</pre>\r\n<p>\r\n  À titre d’exemple, le code ci-dessous :\r\n</p>\r\n<pre class=\"code\">\r\nSystem.out.println (longueurPluslongPalindrome (\"KAYAKAK\"));\r\nSystem.out.println (longueurPluslongPalindrome (\"AVABCD\"));\r\n\r\n</pre>\r\n<p>\r\n  Affiche les valeurs 5 et 3.\r\n</p>\r\n<p>\r\n  Pour résoudre ce problème, pensez à la découper en sous-problèmes et n’hésitez pas à utiliser une ou plusieurs méthodes privées supplémentaires.\r\n</p>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Virginie Van den Schreick",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/87_java",
            "archive_properties": {
                "folders": [
                    "87_java"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Exercice complémentaire 2",
            "description": "```{=html}\r\n<p>\r\n  On souhaite compter le nombre d'entiers distincts parmi une série de cinq entiers\r\n</p>\r\n<p>\r\n  Vous devez définir la méthode <code>countDistinctInt</code> qui compte le nombre d'entiers uniques parmi les cinq paramètres a, b, c, d et e\r\n</p>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Virginie Van den Schrieck",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/88_java",
            "archive_properties": {
                "folders": [
                    "88_java"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Ordonne",
            "description": "`a`, `b` et `c` sont des variables contenant un entier. Ecrivez le code\r\npermettant de placer la valeur `true` dans la variabe booléenne\r\n`ordonne` si `a < b < c` et `false` sinon.\r\n\r\n``` java\r\nboolean ordonne; // la variable à changer (true/false)\r\nint a;\r\nint b;\r\nint c;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q10",
            "archive_properties": {
                "folders": [
                    "m01Q10"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Moyenne",
            "description": "Les variables `a`, `b` et `c` contiennent des nombres réels. Placez dans\r\nla variable `moyenne` la moyenne arithmétique entre ces trois nombres.\r\nSi vous avez un doute sur la définition de cette moyenne, consultez [sa\r\npage sur\r\nwikipédia](https://fr.wikipedia.org/wiki/Moyenne_arithm%C3%A9tique)\r\n\r\n``` java\r\ndouble moyenne; // le résultat de la moyenne\r\ndouble a;\r\ndouble b;\r\ndouble c;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Naitali Brandon",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q11",
            "archive_properties": {
                "folders": [
                    "m01Q11"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Maximum",
            "description": "Les variables `a`, `b` et `c` contiennent un entier. Ecrivez le code\r\nJava permettant de stocker dans la variable `maximum` le plus grand de\r\nces trois nombres.\r\n\r\n``` java\r\nint a;\r\nint b;\r\nint c;\r\nint maximum; // le plus grand parmi a, b, c\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q12",
            "archive_properties": {
                "folders": [
                    "m01Q12"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Minimum",
            "description": "Les variables `a`, `b`, `c` et `d` contiennent chacune un nombre entier.\r\nEcrivez le code permettant de placer dans la variable `min` le minimum\r\nentre ces quatre nombres.\r\n\r\n``` java\r\nint a;\r\nint b;\r\nint c;\r\nint d;\r\nint min; // le plus petit parmi a, b, c, d\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q13",
            "archive_properties": {
                "folders": [
                    "m01Q13"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Compteur de différence",
            "description": "Les variables `a`,`b` et `c` contiennent des entiers. Placez dans la\r\nvariable `count` le nombre d\\'entiers distincts.\r\n\r\nPar exemple, si `a` vaut `3`, `b` vaut `5` et `c` vaut `3`, alors\r\n`count` contiendra la valeur `2`. Lorsque toutes les variables\r\ncontiennent la même valeur, `count` doit valoir `1`.\r\n\r\n``` java\r\nint count; // le nombre d'entiers différents\r\nint a;\r\nint b;\r\nint c;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q14",
            "archive_properties": {
                "folders": [
                    "m01Q14"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Sélecteur de saison",
            "description": "Connaissant une date (`jour`/`mois`) de l\\'année 2016, placez dans la\r\nvariable `saison` le nom de la saison correspondante. Pour rappel, en\r\n2016 les saisons officielles commençaient aux dates suivantes :\r\n\r\n-   le printemps le dimanche 20 mars 2016\r\n-   l'été le lundi 20 juin 2016\r\n-   l'automne le jeudi 22 septembre 2016\r\n-   l'hiver le mercredi 21 décembre 2016\r\n\r\n``` java\r\nint jour; // le jour\r\nint mois; // le mois\r\nString saison; // le nom de la saison (automne, hiver, printemps, été)\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q15",
            "archive_properties": {
                "folders": [
                    "m01Q15"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Nombre de secondes depuis minuit",
            "description": "Dans un programme gérant une horloge, vous devez calculer le nombre de\r\nsecondes qui se sont écoulées depuis minuit. Placer le résultat de votre\r\ncalcul dans la variable `total`.\r\n\r\nExemple : 22h14m12s = 80052s\r\n\r\n``` java\r\nint heure; // le nombre d'heures\r\nint minute; // le nombre de minutes\r\nint seconde; // le nombre de secondes\r\nint total = 0; // le nombre de secondes depuis minuit\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q16",
            "archive_properties": {
                "folders": [
                    "m01Q16"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Année bissextile",
            "description": "Ecrivez un programme qui place la valeur `true` dans la variable\r\n`resultat` si `annee` correspond à une année bissextile et `false`\r\nsinon.\r\n\r\nPour rappel, une année sera [bissextile](https://fr.wikipedia.org/wiki/Année_bissextile) :\r\n\r\n:   -   si l\\'année est divisible par 4 et non divisible par 100, ou\r\n    -   si l\\'année est divisible par 400.\r\n\r\n``` java\r\nint annee; // l'année à vérifier\r\nboolean resultat;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q17",
            "archive_properties": {
                "folders": [
                    "m01Q17"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Siècle",
            "description": "Créer un programme permettant de déterminer le siècle d\\'une année.\r\nPlacez le résultat de votre calcul dans la variable `siecle`.\r\n\r\n``` java\r\nint annee;  // l'année à vérifier\r\nint siecle; // le siècle de l'année\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q18",
            "archive_properties": {
                "folders": [
                    "m01Q18"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Calcul d'amende",
            "description": "La police vous engage pour développer un programme permettant de\r\ncalculer l\\'amende qu\\'un conducteur de voiture devra payer en cas\r\nd\\'infraction. La loi stipule que le conducteur devra payer 5 euros par\r\nkm/h au-dessus de la vitesse maximale autorisée, avec un minimum de\r\n12.5€.\r\n\r\nPour tout dépassement de plus de 10 km/h, l\\'amende est doublée !\r\n\r\nVotre programme reçoit la vitesse maximale autorisée et la vitesse\r\nréelle de la voiture. Il calcule l\\'éventuelle amende.\r\n\r\n*Exemple* :\r\n\r\n-   Si la vitesse maximum est de 50km/h et que le véhicule roule à\r\n    62km/h, l\\'amende sera de 12\\*5\\*2=120€.\r\n-   Si la vitesse maximum est de 50km/h et que le véhicule roule à\r\n    56km/h, l\\'amende sera de 6\\*5=30€.\r\n-   Si la vitesse maximum est de 50km/h et que le véhicule roule à\r\n    51km/h, l\\'amende sera de 12.5€.\r\n\r\n``` java\r\ndouble vitesseMaximale = // valeur réelle positive\r\ndouble vitesseVehicule = // valeur réelle positive\r\ndouble amende = 0; // modifié par votre programme et renvoie la valeur de l'amende\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q2",
            "archive_properties": {
                "folders": [
                    "m01Q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Caractère",
            "description": "La variable `carac` contient un caractère (chiffre ou lettre minuscule).\r\nEcrivez le code Java qui place dans la variable `retour`, la chaîne de\r\ncaractères :\r\n\r\n-   `chiffre` si `carac` contient un chiffre\r\n-   `voyelle` si `carac` contient une voyelle\r\n-   `consonne` sinon\r\n\r\n``` java\r\nchar carac; // le caractère à vérifier\r\nString retour; // chiffre, voyelle ou consonne\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q20",
            "archive_properties": {
                "folders": [
                    "m01Q20"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Indice de Quételet",
            "description": "L\\'[indice de\r\nQuételet](https://fr.wikipedia.org/wiki/Indice_de_masse_corporelle),\r\nutilisé par les diététiciens, est révélateur de l\\'état d\\''une\r\npersonne.\r\n\r\nUne personne normale devrait avoir un indice compris entre 20 et 25. En\r\ndessous de 20, elle est considérée comme mince, au dessus de 25, elle a\r\nun embonpoint. Au-delà de 30, elle est obèse!\r\n\r\nCet indice est calculé comme étant le rapport entre le poids d\\'une\r\npersonne, exprimé en kg et le carré de sa taille, exprimé en mètre.\r\n\r\nComplétez le programme ci-dessous pour calculer l\\'indice de Quételet\r\nd\\'un personne et stocker dans la chaîne de caractères `etat` la valeur\r\n`mince` pour une personne ayant un indice strictement inférieur à 20,\r\n`normal` pour une personne dont l\\'indice est compris entre 20 et 25,\r\n`embonpoint` si l\\'indice est strictement supérieur à 25 et inférieur ou\r\négal à 30 et `obèse` lorsqu\\'il est strictement supérieur à 30 \\...\r\n\r\n``` java\r\ndouble taille; // taille d'une personne en m\r\nint poids; // poids d'une personne en kg\r\nString etat; // état de la personne (mince, normal, embonpoint, obèse)\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier MARTIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q3",
            "archive_properties": {
                "folders": [
                    "m01Q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Calcul de prix",
            "description": "Une autoroute à péage est divisée en sections. Chaque section est\r\nidentifiée par un entier. La première section a le numéro 1, le suivante\r\nle 2, \\... Les véhicules doivent **entrer en début de section** et\r\n**sortir et fin de section**.\r\n\r\nLe prix à payer pour un véhicule dépend du nombre de sections parcourues\r\n: la première section coûte 1 euro et les suivantes coûtent 50 centimes.\r\n\r\nÉcrivez un programme qui reçoit la section d\\'entrée et la section de\r\nsortie d\\'une voiture. Il place ensuite dans la variable `prix` le\r\nmontant du payage.\r\n\r\n``` java\r\nint sectionEntree = // le point d'entrée\r\nint sectionSortie = // le point de sortie\r\ndouble prix = 0; // le prix à payer\r\n```\r\n\r\nExemples :\r\n\r\n-   Si `sectionEntree` vaut 3 et `sectionSortie` vaut 5, la voiture a\r\n    parcouru 3 sections (les section 3, 4 et 5), donc le prix est 2.0€\r\n    (1€ + 0.5€ + 0.5€).\r\n-   Si `sectionEntree` vaut 2 et `sectionSortie` vaut 2, la voiture a\r\n    parcouru 1 section (la section 2), donc le prix est 1€.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier MARTIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q4",
            "archive_properties": {
                "folders": [
                    "m01Q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : OU exclusif",
            "description": "Le [OU exclusif](https://fr.wikipedia.org/wiki/Fonction_OU_exclusif)\r\n(XOR en anglais) est un opérateur logique à l\\'instar du \\\"et\\\" et du\r\n\\\"ou\\\". Il vous est demandé d\\'implémenter ce XOR, sachant que, pour `a`\r\net `b` deux booléens, le résultat de `a XOR b` est `true` si un et un\r\nseul des booléens est `true`, et `false` sinon.\r\n\r\nPour cette question, il est conseillé d\\'utiliser les instructions\r\nconditionelles et les expressions `&&`, `||` et la négation logique `!`.\r\n\r\nPour rappel, les expressions booléennes sont décrites dans la section\r\n[2.5 : Details of Expressions]{.title-ref}\\_ du livre et l\\'instruction\r\nconditionelle dans la section [3.1 : Blocks, Loops, and\r\nBranches](http://math.hws.edu/javanotes/c3/s1.html)\r\n\r\n``` java\r\nboolean a;\r\nboolean b;\r\nboolean xor; // placer dans cette variable votre résultat\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Lucas Ody",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q5",
            "archive_properties": {
                "folders": [
                    "m01Q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Fizzbuzz",
            "description": "Écrivez un programme qui permet de jouer au jeu du\r\n[fizzbuzz](https://en.wikipedia.org/wiki/Fizz_buzz)\r\n\r\nVous recevez un nombre (stocké dans la variable `i`).\r\n\r\nNous allons ici implémenter une version simplifiée du jeu. Pour\r\nl\\'entier `i`, le jeu consiste en :\r\n\r\n-   On stocke `fizz` dans la variable `temp` si le nombre est divisible\r\n    par 3.\r\n-   On stocke `buzz` dans la variable `temp` si le nombre est divisible\r\n    par 5.\r\n-   On stocke `fizzbuzz` dans la variable `temp` si le nombre est\r\n    divisible par 3 et par 5.\r\n-   On stocke `non` dans la variable `temp` s\\'il n\\'est divisible ni\r\n    par 3 ni par 5.\r\n\r\n``` java\r\nint i = // le nombre à vérifier (i >= 1)\r\nString temp = \"\" // fizz, buzz, fizzbuzz, non\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier MARTIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q6",
            "archive_properties": {
                "folders": [
                    "m01Q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Somme d'entiers pairs",
            "description": "On vous demande d\\'écrire un programme permettant de calculer la somme\r\ndes entiers pairs entre 1 et `n` (inclus).\r\n\r\n*Exemple* : pour `n=5` votre programme retourner 6 (2+4)\r\n\r\nPour vous aider dans cette tâche, il vous est possible d\\'utiliser le\r\nsymbole `%` qui calcule un modulo.\r\n\r\nVotre code utilisera la variable `n` et placera son résultat dans la\r\nvariable `sum`.\r\n\r\n``` java\r\nint n = // n peut prendre n'importe quelle valeur supérieure à zéro\r\nint sum = 0; // sum est la variable dans laquelle vous devez écrire le résultat final\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q7",
            "archive_properties": {
                "folders": [
                    "m01Q7"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Médiane",
            "description": "Considérons un programme utilisant trois variables entières : `int a`,\r\n`int b`, `int c`.\r\n\r\nComment feriez-vous, en utilisant uniquement des instructions\r\nconditionelles (`if (...) {...} else {...}` pour calculer la\r\n[médiane](https://fr.wikipedia.org/wiki/Médiane_(statistiques)) de ces\r\ntrois valeurs.\r\n\r\nPour rappel, la médiane est la valeur qui est telle qu'il y a exactement\r\nune valeurs inférieure à elle et une valeur supérieure à elle. Les\r\ninstructions conditionelles sont décrites dans la section\r\n[3.1](http://math.hws.edu/javanotes/c3/s1.html) du livre.\r\n\r\n``` java\r\nint a, int b, int c; // Les valeurs entières à comparer\r\nint mediane; // La médiane à déterminer\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q8",
            "archive_properties": {
                "folders": [
                    "m01Q8"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : IN/OUT",
            "description": "Mettre la variable `in` à la valeur `true` si `x` se trouve dans\r\nl'intervalle fermé $[a,b]$ et `false` sinon.\r\n\r\n``` java\r\nboolean in; // résultat de votre calcul à placer ici\r\nint x; // la valeur à vérifier\r\nint a; // borne inférieure de l'intervalle\r\nint b; // borne supérieure de l'intervalle\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01Q9",
            "archive_properties": {
                "folders": [
                    "m01Q9"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour\r\nla Mission 1.\r\n\r\nVous attendons une archive **.zip** contenant uniquement les fichiers :\r\n\r\n-   MiseEnRoute.java\r\n-   README.txt\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01real",
            "archive_properties": {
                "folders": [
                    "m01real"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Bilan Final",
            "description": "La [suite de\r\nSyracuse](https://fr.wikipedia.org/wiki/Conjecture_de_Syracuse) est une\r\nsuite de naturels, définie de la manière suivante. Le premier naturel de\r\nla suite est n\\'importe quel naturel non-nul, que nous noterons $s_0$.\r\nOn peut ensuite calculer les éléments suivants de la suite en appliquant\r\nla formule suivante :\r\n\r\n$$u_{n+1}= \\dfrac{u_n}{2} \\mbox{ si } u_n \\mbox{ est pair,}$$$$u_{n+1}= 3u_n + 1  \\mbox{ si } u_n \\mbox{ est impair.}$$\r\n\r\nPar exemple, en partant de 11, on obtient : 11 34 17 52 26 13 40 20 10 5\r\n16 8 4 2 1 4 2...\r\n\r\nRemarquez qu\\'une fois que le nombre 1 est atteint, la suite 1 4 2 1 4\r\n2... se répète indéfiniment. La conjecture de Collatz est l\\'hypothèse\r\nmathématique selon laquelle toutes les suites de Syracuse atteignent\r\ntoujours 1, peu importe le naturel $s_0$ choisi. Il s\\'agit actuellement\r\nd'un conjecture, c'est-à-dire qu'aucune preuve mathématique n'a pu être\r\nélaborée. Tous les tests effectués actuellement n\\'ont néanmoins pas\r\npermis de trouver un $s_0$ tel que la suite de Syracuse en découlant\r\nn\\'atteigne pas 1.\r\n\r\nAfin d\\'aider les mathématiciens à éventuellement trouver un\r\ncontre-exemple, écrivez un programme Java qui permet de calculer la\r\nsuite de Syracuse pour n'importe quel naturel non-nul $s_0$. Le\r\nprogramme s\\'arrête bien entendu lorsque le naturel 1 est atteint.\r\n\r\nVous devez afficher chaque élément de la suite sur la sortie standard,\r\navec `System.out.println()`. La valeur de départ vous est déjà fournie\r\net se trouve dans une variable de type `int` nommée `s0`.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Sébastien Combéfis",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01_bf",
            "archive_properties": {
                "folders": [
                    "m01_bf"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "QCM",
            "description": "Mission 1 : Mise en Route\r\n=========================\r\n\r\nCes questions ont pour objectif de vous permettre de tester vous-même\r\nvotre compréhension de la matière couverte par cette mission de mise en\r\nroute.\r\n\r\nCes questions supposent que vous avez lu les sections suivantes du livre\r\nde référence JavaNotes\\_ :\r\n\r\n> -   [1 : Overview: The Mental Landscape]{.title-ref}\\_\r\n>     -   [1.1 : The Fetch and Execute Cycle: Machine\r\n>         Language]{.title-ref}\\_\r\n>     -   [1.2 : Asynchronous Events: Polling Loops and\r\n>         Interrupts]{.title-ref}\\_\r\n>     -   [1.3 : The Java Virtual Machine]{.title-ref}\\_\r\n>     -   [1.4 : Fundamental Building Blocks of Programs]{.title-ref}\\_\r\n>     -   [1.5 : Objects and Object-oriented Programming]{.title-ref}\\_\r\n>     -   [1.7 : The Internet and Beyond]{.title-ref}\\_\r\n> -   [2 : Programming in the Small I: Names and Things]{.title-ref}\\_\r\n>     -   [2.1 : The Basic Java Application]{.title-ref}\\_\r\n>     -   [2.2 : Variables and the Primitive Types]{.title-ref}\\_\r\n>     -   [2.3 : Strings, Objects, Enums, and Subroutines]{.title-ref}\\_\r\n>         (sauf [2.3.3 : Introduction to Enums]{.title-ref}\\_)\r\n>     -   [2.5 : Details of Expressions]{.title-ref}\\_ (sauf [2.5.7 :\r\n>         Type Conversion of Strings]{.title-ref}\\_)\r\n>     -   [2.6 : Programming Environments]{.title-ref}\\_ (sauf [2.6.3 :\r\n>         IDEs and Eclipse]{.title-ref}\\_)\r\n> -   [3 : Programming in the Small II: Control]{.title-ref}\\_\r\n>     -   [3.1 : Blocks, Loops, and Branches]{.title-ref}\\_\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m01_qcm",
            "archive_properties": {
                "folders": [
                    "m01_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 1: Les bases",
            "description": "Voici quelques questions QCM pour vérifier votre compréhension de la\r\nMission 2 du cours, après lecture du livre de référence.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02dem1",
            "archive_properties": {
                "folders": [
                    "m02dem1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 2 : Somme d'entiers",
            "description": "Les boucles, notamment les boucles `for`, sont un concept clé en\r\nprogrammation. Pour vous entraîner à l\\'utilisation de boucles `for`,\r\nécrivez une boucle for qui permettra de calculer la somme des n premiers\r\nentier PAIRS supérieurs à zéro, en fonction de la variable n, déjà\r\ndéfinie à une valeur supérieure ou égale à zéro. Le résultat final doit\r\nêtre stocké dans la variable `sum` à la fin de la boucle, elle aussi\r\ndéjà définie. Lorsque n est négatif, le résultat doit valoir zéro.\r\n\r\n``` java\r\nint n = // n peut prendre n'importe quelle valeur\r\nint sum = 0;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Clémentine MUNYABARENZI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02dem2",
            "archive_properties": {
                "folders": [
                    "m02dem2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 3 : Puissances",
            "description": "Les langages de programmation sont souvent utilisés à des fins\r\nmathématiques et il est intéressant de savoir implémenter certaines\r\nfonctions mathématiques simples.\r\n\r\nDans cet exercice, il vous est demandé d\\'implémenter à l\\'aide d\\'une\r\nboucle une portion de programme qui permet de calculer un entier `a`\r\nélevé à la puissance `n`.\r\n\r\nNotez que `n` est plus grand ou égal à zéro et vous ne devez donc pas\r\ngérer le cas où `n` est négatif. Le résultat final doit être stocké dans\r\nla variable `valeur`, qui est déjà initialisée à 1 pour vous.\r\n\r\n``` java\r\nint n = // n est non-négatif\r\nint a = // a peut prendre n'importe quelle valeur\r\nint valeur = 1;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02dem3",
            "archive_properties": {
                "folders": [
                    "m02dem3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 4 : Plus grand diviseur",
            "description": "En programmation, il est souvent intéressant de connaitre le reste de la\r\ndivison euclidienne de deux nombres, notamment pour savoir si un nombre\r\nest pair ou non. En java, pour connaître le reste d\\'une division, on\r\nutilise l\\'instruction \\\"modulo\\\" (se note \\\"`%`\\\"), ainsi `5 % 3` vaut\r\n`2`. En sachant cela, utilisez une boucle `for` pour déterminer le plus\r\ngrand diviseur entier de n (hormis lui-même).\r\n\r\nPensez aux cas \\\"border lines\\\" : quand `n` vaut `0` ou `1`, on attend\r\nune réponse égale à `0`. La réponse finale doit-être stockée dans la\r\nvariable `biggest`.\r\n\r\n``` java\r\nint n = // n est plus grand ou égal à 0\r\nint biggest = 0;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02dem4",
            "archive_properties": {
                "folders": [
                    "m02dem4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 5 : Nombres premiers",
            "description": "Les nombres premiers sont un concept important en mathématiques. Un\r\nnombre premier est un nombre entier qui n\\'a pour diviseurs que 1 et\r\nlui-même. Notez que 0 et 1 ne sont pas des nombres premiers. En\r\nutilisant une boucle for, écrivez un petit bout de code permettant de\r\nvérifier si le nombre n est premier ou non. Vous devez stocker votre\r\nréponse dans la variable booléenne `prime` une fois la boucle terminée,\r\ndéjà initialisée à `true` pour vous. Une fois votre programme terminé,\r\nprime vaudra `true` si n est premier, et `false` si n n\\'est pas\r\npremier.\r\n\r\n``` java\r\nint n = // n est plus grand ou égal à zéro\r\nboolean prime = true;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02dem5",
            "archive_properties": {
                "folders": [
                    "m02dem5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Exercice complémentaire 1 : Exercice rapide",
            "description": "Pouvez-vous prédire la sortie du code suivant en moins de 5 secondes?\r\n\r\n``` java\r\nfor( int i = 0 ; i < 5; i++)\r\n{\r\n    System.out.println(\"∗∗∗∗∗\") ;\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Clémentine Munyabarenzi",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02ec1",
            "archive_properties": {
                "folders": [
                    "m02ec1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Exercice supplémentaire : Calculer le reste d'une division entière",
            "description": "Calculez le reste de la division entière entre `a` et `b` en utilisant\r\nuniquement une boucle `for` et des soustractions. On supposera `a>0` et\r\n`b>0`.\r\n\r\nExemple : Le reste de la division entière de 5 par 3 vaut 2\r\n\r\n``` java\r\nint a; //a un entier strictement positif\r\nint b; //b un entier strictement positif\r\nint reste; // le reste de la division entière.\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon Naitali",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02Q1",
            "archive_properties": {
                "folders": [
                    "m02Q1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Calcul du nombre diviseurs distincts",
            "description": "Calculer le *nombre* de diviseurs distincts d\\'un entier strictement\r\npositif.\r\n\r\n``` java\r\nint a; // l'entier a\r\nint resultat = 0;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon Naitali",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02Q10",
            "archive_properties": {
                "folders": [
                    "m02Q10"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Dessin d'un triangle",
            "description": "En utilisant des boucle(s) `for`, écrivez le code permettant d\\'afficher\r\nun triangle rectangle isocèle dont la longueur du côté vous est fournié.\r\n\r\nPour rappel, `System.out.print('0')` permet d\\'afficher le caractère `0`\r\nà l\\'écran et `System.out.println()` permet d\\'aller à la ligne.\r\n\r\nA titre d\\'exemple, voici un triangle dont le côté est de `4` :\r\n\r\n``` console\r\n0\r\n00\r\n000\r\n0000\r\n```\r\n\r\n``` java\r\nint cote = // la longueur du cote\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02Q3",
            "archive_properties": {
                "folders": [
                    "m02Q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Dessin de H",
            "description": "Dessiner la lettre H en utilisant de l\\'ASCII-art avec le caractère `*`.\r\nVotre programme reçoit comme entrée la hauteur de la lettre à dessiner\r\n(supposée impaire) et sa largeur. N\\'affichez pas d\\'espaces inutiles à\r\ndroite de votre lettre.\r\n\r\nA titre d\\'exemple, si `hauteur` vaut 5 et `largeur` 3, vous devez\r\nafficher.\r\n\r\n``` console\r\n* *\r\n* *\r\n***\r\n* *\r\n* *\r\n```\r\n\r\n``` java\r\nint hauteur; // la hauteur du H\r\nint largeur; // la largeur du H\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02Q4",
            "archive_properties": {
                "folders": [
                    "m02Q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Dessin de X",
            "description": "En utilisant le caractère `*`, dessinez une lettre `X` dont on vous\r\ndonne la hauteur (supposée impaire). N\\'affichez pas d\\'espaces inutiles\r\nà droite de votre lettre.\r\n\r\nExemple avec une hauteur de 5, avec \\\"-\\\" symbolisant un espace :\r\n\r\n``` console\r\n*---*\r\n-*-*\r\n--*\r\n-*-*\r\n*---*\r\n```\r\n\r\n``` java\r\nint hauteur; // la hauteur du X\r\n```\r\n\r\nNB: Même un retour à la ligne est un caractère de trop!\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02Q5",
            "archive_properties": {
                "folders": [
                    "m02Q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Dessin de S",
            "description": "Dessinez la lettre S en utilisant le caractère `*` lorsque l\\'on vous\r\ndonne la `hauteur`. La largeur du S sera toujours de 3 caractères. Les\r\nespaces ne sont nécéssaires que s\\'il y a une étoile après.\r\n\r\nExemple avec une hauteur de 5, avec \\\"-\\\" symbolisant un espace:\r\n\r\n``` console\r\n***\r\n*\r\n***\r\n--*\r\n***\r\n```\r\n\r\n``` java\r\nint hauteur; // la hauteur du S\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02Q6",
            "archive_properties": {
                "folders": [
                    "m02Q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Calcul d'intérêts",
            "description": "Vous avez aujourd\\'hui `base` € sur votre livret d\\'épargne. Si vous le\r\nlaissez `x` années à un taux d\\'intérêt supposé fixe de `y` pourcents,\r\nquel sera le solde de votre livret après ces `x` années ?\r\n\r\n``` java\r\nint x; // le nombre d'années\r\ndouble y; // le pourcentage\r\ndouble base; // l'argent sur le compte sans les intérêts\r\ndouble resultat; // le resultat du calcul\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02Q7",
            "archive_properties": {
                "folders": [
                    "m02Q7"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Calcul de factorielle",
            "description": "En mathématiques, la factorielle d\\'un entier `x`, notée $x!$\r\nstrictement positif est le produit des entiers strictement positifs\r\ninférieurs ou égaux à `x`. Calculer la factorielle d\\'un entier et\r\nstocker la valeur dans la variable `resultat`.\r\n\r\nExemple : $5! = 5×4×3×2×1 = 120$\r\n\r\n``` java\r\nint x; // l'entier\r\nint resultat = 0;\r\n```\r\n\r\nTip : faites attention à la valeur de la variable resultat !\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon Naitali",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02Q8",
            "archive_properties": {
                "folders": [
                    "m02Q8"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Somme des entiers entre a et b",
            "description": "`a` et `b` sont deux entiers tels que $a<b$. Calculez la somme des\r\nentiers se trouvant dans l\\'intervalle fermé $[a,b]$ en utilisant une\r\nboucle `for`.\r\n\r\n``` java\r\nint a; // l'entier a\r\nint b; // l'entier b\r\nint resultat = 0;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon Naitali",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02Q9",
            "archive_properties": {
                "folders": [
                    "m02Q9"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour\r\nla Mission 2.\r\n\r\nVous attendons une archive **.zip** contenant uniquement les fichiers :\r\n\r\n-   Equation.java\r\n-   EquationSimple.java\r\n-   TextIO.java\r\n-   README.txt\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02real",
            "archive_properties": {
                "folders": [
                    "m02real"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Bilan Final",
            "description": "Soit un naturel non-nul $x$, le naturel non-nul $d$ est un **diviseur\r\npropre** de $x$ s\\'il est compris entre $x$ (exclus) et qu\\'il divise\r\n$x$.\r\n\r\nCe qui va nous intéresser dans le cadre de cette question de bilan\r\nfinal, c\\'est le nombre de diviseurs propres. Vous devez écrire un\r\nprogramme qui va, étant donné un naturel non-nul `n`, afficher à\r\nl\\'écran le nombre de diviseurs propres que possède chacun des naturels\r\ncompris entre $1$ et $n$ (tous les deux inclus).\r\n\r\nPar exemple, si la variable `n` vaut $7$, votre programme doit afficher\r\nsur la sortie standard, grâce à `System.out.println()`, ceci :\r\n\r\n``` console\r\n1:0\r\n2:1\r\n3:1\r\n4:2\r\n5:1\r\n6:3\r\n7:1\r\n```\r\n\r\nVotre programme doit afficher son résultat exactement comme présenté\r\ndans l\\'exemple ci-dessus. Vous ne devez pas déclarer, ni initialiser la\r\nvariable de type `int` nommée `n`, elle vous sera fournie.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Sébastien Combéfis",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02_bf",
            "archive_properties": {
                "folders": [
                    "m02_bf"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "QCM",
            "description": "Mission 2. Les bases de Java\r\n============================\r\n\r\nCette mission a pour objectif de renforcer vos connaissances des\r\nconcepts de base de la programmation en Java.\r\n\r\nCes questions supposent que vous avez lu les sections suivantes du livre\r\nde référence JavaNotes\\_ :\r\n\r\n> -   [2 : Programming in the Small I: Names and Things]{.title-ref}\\_\r\n>\r\n>     > -   [2.4 : Text Input and Output]{.title-ref}\\_ (sauf [2.4.2 :\r\n>     >     Text Output]{.title-ref}\\_, [2.4.4 : Formatted\r\n>     >     Output]{.title-ref}\\_, [2.4.5 : Introduction to File\r\n>     >     I/O]{.title-ref}\\_, et [2.4.6 : Using Scanner for\r\n>     >     Input]{.title-ref}\\_).\r\n>\r\n> -   [3 : Programming in the Small II: Control]{.title-ref}\\_\r\n>\r\n>     > -   [3.2 : Algorithm Development]{.title-ref}\\_\r\n>     > -   [3.3 : The while and do..while Statements]{.title-ref}\\_\r\n>     >     (sauf [3.3.3 : break and continue]{.title-ref}\\_)\r\n>     > -   [3.4 : The for Statement]{.title-ref}\\_ (sauf [3.4.4 : Enums\r\n>     >     and for-each Loops]{.title-ref}\\_)\r\n>     > -   [3.5 : The if Statement]{.title-ref}\\_\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m02_qcm",
            "archive_properties": {
                "folders": [
                    "m02_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Démarrage 1: Conversions",
            "description": "Considérez les déclaratons suivantes :\r\n\r\nL\\'on souhaite faire en sorte que d\\'une part la valeur le la variable\r\n*money* se retrouve dans la variable *wallet\\_i* et que d\\'autre part la\r\nvaleur de la variable *euro* se retrouve dans la variable *wallet\\_d*.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03dem1",
            "archive_properties": {
                "folders": [
                    "m03dem1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Démarrage 2 : Le Nombre Maximum",
            "description": "Ecrivez *la signature* et *le corps* d'une methode baptisée `afficheMax`\r\nqui prend deux nombres entiers comme arguments et **affiche** le plus\r\ngrand de ces nombres. La spécification de cette méthode est :\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Clémentine Munyabarenzi",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03dem2",
            "archive_properties": {
                "folders": [
                    "m03dem2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Démarrage 3 : Nombres impairs",
            "description": "Ecrivez la signature et le corps d\\'une méthode baptisée `impair` qui\r\nprend comme argument un entier **n** positif et retourne `true` si **n**\r\nest impair et `false` sinon. Pour rappel, si **n** est un entier positif\r\n`n % 2` vaut le reste de la division entière de **n** par 2. La\r\nspécification de cette méthode est:\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Clémentine Munyabarenzi",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03dem3",
            "archive_properties": {
                "folders": [
                    "m03dem3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 4 : Lettre L",
            "description": "Un étudiant montre à son tuteur la méthode main ci-dessous :\r\n\r\nLors de son exécution elle affiche les caractères suivants à l\\'écran:\r\n\r\n>     Hauteur du L\r\n>     7\r\n>     Largeur du L\r\n>     5\r\n>\r\n>     X\r\n>     X\r\n>     X\r\n>     X\r\n>     X\r\n>     X\r\n>     XXXXX\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03dem4",
            "archive_properties": {
                "folders": [
                    "m03dem4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Démarage 5 : Diviseurs Entiers",
            "description": "La section *3.4.2* du livre présente un programme qui permet de calculer\r\net d'afficher le nombre de diviseurs entiers d'un nombre entier.\r\nRéutilisez ce code de façon à construire la méthode `nDiv` répondant à\r\nla spécification et la signature suivante :\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Clémentine Zaninka",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03dem5",
            "archive_properties": {
                "folders": [
                    "m03dem5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* intervalle fermé",
            "description": "On vous demande d\\'écrire une méthode permettant de dire si un nombre se\r\ntrouve dans l\\'intervalle fermé $[a,b]$ dont les spécifications sont les\r\nsuivantes:\r\n\r\n``` java\r\n/*\r\n * @pre a < b\r\n * @post retourne true si x est dans [a,b] false sinon\r\n */\r\n```\r\n\r\nVotre méthode devra s\\'appeler `intervalle` et prendra comme premier\r\nargument `a`, la borne inférieure de l\\'intervalle, comme deuxième\r\nargument, `b`, la borne supérieure et comme dernier argument la valeur à\r\ntester. Ces trois arguments sont des entiers.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03Q1",
            "archive_properties": {
                "folders": [
                    "m03Q1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Calculer la surface d'un rectangle",
            "description": "On vous demande d\\'écrire la méthode `surface` qui permet de calculer la\r\nsurface d\\'un rectangle. On supposera que la `longueur` et la `largeur`\r\nqui sont passées en arguments sont des entiers positifs.\r\n\r\n``` java\r\n/*\r\n * @pre largeur > 0, longueur > 0\r\n * @post retourne la surface du rectangle dont les\r\n *       largeur et longueur sont données.\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03Q2",
            "archive_properties": {
                "folders": [
                    "m03Q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q*  Maximum",
            "description": "Ecrivez la signature et le corps de la méthode `max` qui prend comme\r\nparamètres les entiers `a`, `b` , `c` qui retourne le maximum de 3\r\nnombres et dont la spécification est:\r\n\r\n``` java\r\n/*\r\n * @pre\r\n * @post retourne le maximum entre les entiers a, b et c\r\n */\r\n```\r\n\r\nVous pouvez réutiliser votre code de la question supplémentaire maximum\r\nde la mission 1.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03Q3",
            "archive_properties": {
                "folders": [
                    "m03Q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** Médiane",
            "description": "Ecrivez la méthode `mediane` qui prend comme arguments trois entiers et\r\nretourne la\r\n[médiane](https://fr.wikipedia.org/wiki/Médiane_(statistiques)) entre\r\nces nombres.\r\n\r\nPour vous aider on vous donne les méthodes\r\n`public static int min(int x, int y)` et\r\n`public static int max(int x, int y)` que vous pouvez utiliser dans\r\nvotre code. Leurs spécifications sont :\r\n\r\n``` java\r\n/*\r\n * @pre -\r\n * @post retourne le minimum entre a et b\r\n */\r\npublic static int min(int a, int b);\r\n\r\n/*\r\n * @pre -\r\n * @post retourne le maximum entre a et b\r\n */\r\npublic static int max(int a, int b);\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03Q4",
            "archive_properties": {
                "folders": [
                    "m03Q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q*  Calcul du volume d'une sphère",
            "description": "Ecrivez la méthode `volume` qui calcule le volume d\\'une\r\n[sphère](https://fr.wikipedia.org/wiki/Sphère). Elle prend en paramètre\r\nle rayon de la sphère (nombre réel).\r\n\r\nPour rappel, le volume d\\'une sphère de rayon r est\r\n$\\frac{4\\times\\pi\\times{r^{3}}}{3}$\r\n\r\nEn Java, la constante $\\pi$ est définie dans la classe\r\n[Math](https://docs.oracle.com/javase/7/docs/api/java/lang/Math.html)\r\ncomme la constante `Math.PI`\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03Q5",
            "archive_properties": {
                "folders": [
                    "m03Q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** Calcul de la factorielle",
            "description": "La [factorielle](https://fr.wikipedia.org/wiki/Factorielle) d\\'un entier\r\n`n` est le produit des nombres entiers strictement positifs inférieurs\r\nou égaux à `n`.\r\n\r\nEcrivez la signature et le corps de la méthode `fact` dont les\r\nspécifications sont :\r\n\r\n``` java\r\n/*\r\n * @pre n > 0\r\n * @post retourne la valeur de la factorielle de n\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03Q6",
            "archive_properties": {
                "folders": [
                    "m03Q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** Carré parfait",
            "description": "En mathématiques, un nombre entier est un [carré\r\nparfait](https://fr.wikipedia.org/wiki/Carré_parfait) si il est le carré\r\nd\\'un autre nombre entier.\r\n\r\nEcrivez la méthode `carparf` dont les spécifications sont (`x` est un\r\nentier) :\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03Q7",
            "archive_properties": {
                "folders": [
                    "m03Q7"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Soumettez l\\'archive zip contenant le fichier LibMath.java et README.txt\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03real1",
            "archive_properties": {
                "folders": [
                    "m03real1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Bilan Final",
            "description": "Un étudiant a écrit le programme Java suivant qui permet de compter le\r\nnombre de chiffres de la représentation décimale d\\'un nombre naturel\r\ndonné.\r\n\r\nVous devez définir la méthode `chiffresPairs` qui renvoie `true` si le\r\nnombre de chiffres de son paramètre est pair et `false` sinon.\r\nN\\'hésitez pas à décomposer le problème en sous-problèmes et de définir\r\ndes méthodes privées complémentaires.\r\n\r\nVoici un exemple :\r\n\r\n-   `chiffresPairs(5555)` doit retourner `true`\r\n-   `chiffresPairs(555)` doit retourner `false`\r\n-   `chiffresPairs(-555)` doit retourner `false`\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03_bf",
            "archive_properties": {
                "folders": [
                    "m03_bf"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "QCM",
            "description": "Mission 3. Méthodes et sous-routines\r\n====================================\r\n\r\nCes questions supposent que vous avez lu les sections suivantes du livre\r\nde référence JavaNotes\\_\r\n\r\n> -   [4 : Programming in the Large I: Subroutines]{.title-ref}\\_\r\n>\r\n>     > -   [4.1 : Black Boxes]{.title-ref}\\_\r\n>     >\r\n>     > -   [4.2 : Static Subroutines and Static\r\n>     >     Variables]{.title-ref}\\_\r\n>     >\r\n>     > -   [4.2.1: Subroutine Definitions]{.title-ref}\\_\r\n>     >\r\n>     > -   [4.2.2 : Calling Subroutines]{.title-ref}\\_\r\n>     >\r\n>     > -   [4.2.3 : Subroutines in Programs]{.title-ref}\\_\r\n>     >\r\n>     > -   [4.2.4 : Member Variables]{.title-ref}\\_\r\n>     >\r\n>     > -   [4.3 : Parameters]{.title-ref}\\_\r\n>     >\r\n>     >     > -   [4.3.1 : Using Parameters]{.title-ref}\\_\r\n>     >     > -   [4.3.2 : Formal and Actual Parameters]{.title-ref}\\_\r\n>     >     > -   [4.3.3 : Overloading]{.title-ref}\\_\r\n>     >     > -   [4.3.4 : Subroutine Examples]{.title-ref}\\_\r\n>     >     > -   [4.3.6 : Global and Local Variables]{.title-ref}\\_\r\n>     >\r\n>     > -   [4.4 : Return Values]{.title-ref}\\_\r\n>     >\r\n>     >     > -   [4.4.1 : The return statement]{.title-ref}\\_\r\n>     >     > -   [4.4.2 : Function Examples]{.title-ref}\\_\r\n>     >     > -   [4.4.3 : 3N+1 Revisited]{.title-ref}\\_\r\n>     >\r\n>     > -   [4.6 : More on Program Design]{.title-ref}\\_\r\n>     >\r\n>     > -   [4.6.1 : Preconditions and Postconditions]{.title-ref}\\_\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m03_qcm",
            "archive_properties": {
                "folders": [
                    "m03_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Questions de démarrage 1 : La classe Character",
            "description": "La classe `Character` de l\\'API Java\r\n(<https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html>)\r\ncontient un bon nombre de méthodes qui pourront vous être utiles pour\r\nmanipuler des caractères. Avec ces exercices, vous serez un peu plus\r\nfamiliers avec certaines méthodes qui vous seront certainement utiles\r\ndans le futur.\r\n\r\n``` java\r\nchar c = // un caractère, représentant un chiffre ou non\r\nchar d = // un caractère de a à z, en majuscule ou non\r\nboolean b; // à assigner dans la Question 1\r\nchar e;    // à assigner dans la Question 2\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04dem1",
            "archive_properties": {
                "folders": [
                    "m04dem1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 2 : Concaténation",
            "description": "En java, on retrouve des types de variables primitifs comme `int`,\r\n`char`, `double`, qui commencent par une minuscule, mais aussi des\r\nobjets, dont les `String` font partie. Cependant, les `String` sont des\r\nobjets un peu particuliers qui permettent certaines opérations qui les\r\ndifférencient des objets, comme la concaténation des `String`. La\r\nconcaténation de deux `String` consiste à former un nouveau `String` qui\r\ncontient le contenu du premier et du deuxième mis bout à bout. Ainsi,\r\nconcaténer le `String` `\"Harry\"` et le `String` `\"gateau\"` nous donne le\r\n`String` `\"Harrygateau\"`.\r\n\r\nNous allons maintenant vous demander d\\'implémenter le corps de la\r\nméthode `cat`, qui permet de renvoyer la concaténation de deux `String`,\r\n`s1` et `s2`. Voici les signatures de la méthode `cat`. Veillez bien à\r\nrespecter scrupuleusement les spécifications\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04dem2",
            "archive_properties": {
                "folders": [
                    "m04dem2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 3 : Longueur d'un String",
            "description": "Comme dit précédemment, le type `String` est un type quelque peu\r\nparticulier en Java. Pour faire des opérations sur des `String`, on a\r\ntrès souvent besoin de leur longueur. En vous référant à l\\'API Java de\r\nla classe `String`\r\n(<http://docs.oracle.com/javase/7/docs/api/java/lang/String.html>),\r\nécrivez en une seule ligne le corps de la méthode `showLength()`, qui\r\naffiche sur la sortie standard la longueur de l\\'argument `s`. La\r\nméthode doit être implémenté de sorte que lorsqu\\'on l\\'appelle trois\r\nfois de suite avec comme argument `\"Popol\"`, `\"Jeanjean\"` et `\"abc\"`, de\r\nlongueurs 5, 8 et 3, on retrouve la sortie standard dans cet état :\r\n\r\n    5\r\n    8\r\n    3\r\n\r\nVoici la signature de la méthode `showLength()`. Veillez à bien\r\nrespecter les spécifications :\r\n\r\n``` java\r\n/*\r\n * @pre -\r\n * @post affiche la longueur de s sur la sortie standard\r\n */\r\n public static void showLength(String s) {\r\n     // à compléter\r\n }\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04dem3",
            "archive_properties": {
                "folders": [
                    "m04dem3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 4 : toUpper",
            "description": "Il est parfois utile de s\\'assurer qu\\'un String est en majuscule. La\r\nméthode `Character.toUpperCase()` de la classe `Character` de l\\'API\r\nJava permet de récupérer la majuscule d\\'un caractère qu\\'on lui passe\r\nen argument. En utilisant cette méthode, implémentez la méthode\r\n`toUpper` qui retourne un `String` identique à celui passé en argument,\r\nmais en majuscule. Attention à ne pas utiliser une autre méthode que\r\n`Character.toUpperCase()`.\r\n\r\nVoici la signature de la méthode `toUpper` à implémenter. Respectez bien\r\nles spécifications :\r\n\r\n``` java\r\n/*\r\n *    @pre  s non vide\r\n *    @post retourne s en majuscules\r\n */\r\n public static String toUpper(String s) {\r\n     // À implémenter\r\n }\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04dem4",
            "archive_properties": {
                "folders": [
                    "m04dem4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 5 : La méthode containsChar()",
            "description": "Écrivez le corps de la méthode de la méthode `containsChar()` qui prend\r\ndeux arguments, `s1` et `s2`, et qui vérifie si tous les caractères\r\nprésents dans `s1` sont aussi présents dans `s2`. Si c\\'est le cas, la\r\nméthode retourne `true`. Le cas des `String` vides ne doit pas être\r\ngéré.\r\n\r\nVoici les spécifications de la méthode `containsChar()` :\r\n\r\n``` java\r\n/**\r\n *    @pre  s1 et s2 non-vides\r\n *    @post Retourne true si s1 contient uniquement des\r\n *          caractères qui sont aussi dans s2.\r\n *          Retourne false sinon.\r\n */\r\n public static boolean containsChar(String s1, String s2){\r\n         // À implémenter\r\n }\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04dem5",
            "archive_properties": {
                "folders": [
                    "m04dem5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Occurences de c dans s",
            "description": "Ecrivez la méthode `int countChar(String s, char c)` permettant de\r\ncompter le nombre d\\'occurences du caractère `c` dans `s` et dont la\r\nspécification est :\r\n\r\n``` java\r\n/*\r\n * @pre s != null\r\n * @post retourne le nombre d’occurrences du caractère c dans la chaîne s\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04Q1",
            "archive_properties": {
                "folders": [
                    "m04Q1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** représentation entière",
            "description": "Ecrivez la méthode `int d2i(String s)` qui retourne la représentation\r\nentière d\\'un nombre entier fourni sous la forme d\\'un String. Par\r\nexemple, \\\"012345\\\" doit renvoyer 1235. N\\'utilisez pas de méthode de\r\nparsing comme `parseInt` ou `parseDouble`.\r\n\r\nLa spécification est:\r\n\r\n``` java\r\n/*\r\n * @pre s != null et s est la représentation d'un nombre entier dans le \r\n *      système décimal (il contient uniquement des chiffres)\r\n * @post retourne la représentation du nombre sous forme d'un entier\r\n */\r\n```\r\n\r\nLa méthode ci-dessous pourrait vous aider à résoudre facilement cette\r\nquestion :\r\n<http://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#getNumericValue(char)>\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04Q10",
            "archive_properties": {
                "folders": [
                    "m04Q10"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q***  Caractère le plus fréquent",
            "description": "Ecrivez la méthode `char plusFrequent(String s)` qui permet de\r\ndéterminer le caractère le plus présent dans la chaine de caractères\r\n`s`.\r\n\r\nA titre d\\'exemple, le caractère le plus fréquent de la chaîne `abbDDaa`\r\nest `a`. Si la chaîne contient des caractères avec le même nombre\r\nd\\'occurences maximal, renvoyez le premier trouvé de gauche à droite.\r\n\r\nLa spécification est:\r\n\r\n``` java\r\n/*\r\n * @pre s!=null\r\n * @post retourne le caractère qui se trouve le plus grand\r\n *      nombre de fois dans la chaîne s\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04Q11",
            "archive_properties": {
                "folders": [
                    "m04Q11"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Caractère dans String",
            "description": "Ecrivez la méthode `boolean isIn(char c, String s)` dont la\r\nspécification est :\r\n\r\n``` java\r\n/*\r\n * @pre s!=null\r\n * @post retourne true si le caractère c est dans s, false sinon\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04Q2",
            "archive_properties": {
                "folders": [
                    "m04Q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* chaîne composée de chiffres",
            "description": "Ecrivez la méthode `boolean entierValide(String s)` permettant de\r\nretourner `true` uniquement si la chaine de caractères `s` ne contient\r\nque des chiffres. la spécification est :\r\n\r\n``` java\r\n/*\r\n  * @pre s != null\r\n  * @post retourne true uniquement si la chaine de caractères\r\n  *       s ne contient que des chiffres\r\n  */\r\n```\r\n\r\nIl y a une méthode dans la classe Character qui devrait vous aider à\r\nvérifier qu\\'un caractère est un chiffre, voir\r\n<https://docs.oracle.com/javase/7/docs/api/java/lang/Character.html>\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04Q3",
            "archive_properties": {
                "folders": [
                    "m04Q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** Vérification de mot de passe",
            "description": "De nombreux sites web imposent des contraintes sur les mots de passe que\r\nles utilisateurs peuvent utiliser. L\\'objectif est généralement de\r\nforcer les utilisateurs à choisir des mots de passe difficiles à trouver\r\npar des attaquants éventuels.\r\n\r\nEcrivez la méthode `boolean motDePasseValide(String s)` permettant de\r\nvérifier la validité d\\'un mot de passe `s`. La contrainte imposée à un\r\ntel mot de passe est qu\\'il doit au moins contenir 8 caractères, un\r\nchiffre. La spécification de cette méthode est :\r\n\r\n``` java\r\n/*\r\n * @pre s!=null\r\n * @post retourne true uniquement si la chaine de caractères\r\n *       s est un mot de passe valide, c-a-d qu'elle\r\n *       contient au moins 8 caractères, au moins une lettre\r\n *       minuscule, au moins un chiffre et au moins une lettre majuscule\r\n */\r\n```\r\n\r\nVous trouverez dans la classe\r\n[Character](https://docs.oracle.com/javase/7/docs/api/java/lang/Character.html)\r\ndes méthodes utiles pour cette tâche.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04Q4",
            "archive_properties": {
                "folders": [
                    "m04Q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : binaire",
            "description": "Ecrivez la méthode `boolean binaire(String s)` qui retourne `true`\r\nuniquement si la chaine de caractères `s` ne contient que les caractères\r\n`0` ou `1`\r\n\r\nLa spécification est :\r\n\r\n``` java\r\n/*\r\n * @pre s != null, s.length() >= 1\r\n * @post retourne true uniquement si la chaine de caractères\r\n *       s ne contient que les caractères 0 ou 1\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04Q5",
            "archive_properties": {
                "folders": [
                    "m04Q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** containsOnly",
            "description": "Ecrivez la méthode `boolean containsOnly(String s, String c)` qui\r\nretourne `true` si la chaine `s` contient uniquement des caractères se\r\ntrouvant dans la chaine `c`, `false` sinon.\r\n\r\nLa spécification est :\r\n\r\n``` java\r\n/*\r\n * @pre s != null, c != null, tous les caractères de la chaine c sont différents\r\n * @post retourne true si la chaine s contient uniquement des\r\n *       caracteres se trouvant la chaine c, false sinon\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04Q6",
            "archive_properties": {
                "folders": [
                    "m04Q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : le palindrome",
            "description": "Ecrivez la méthode `boolean palindrome(String s)` qui vérifie si une\r\nchaine de caractères `s` est un palindrome. Pour rappel, vous trouverez\r\nplus d\\'informations sur les palindromes sur\r\n[Wikipedia](https://en.wikipedia.org/wiki/Palindrome).\r\n\r\nPour simplifier les choses, votre programme prend en compte les signes\r\ndiacritiques (accents, trémas, cédilles) et les espaces. Par exemple\r\n\\\"camilleellimaç\\\" ou encore \\\"la mariée ira mal\\\" ne doivent pas être\r\nconsidérés comme des palindromes.\r\n\r\nLa spécification de cette méthode est :\r\n\r\n``` java\r\n/*\r\n * @pre s != null\r\n * @post retourne true si s est un palindrome, false sinon\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04Q7",
            "archive_properties": {
                "folders": [
                    "m04Q7"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q*  méthode contains",
            "description": "Ecrivez la méthode `boolean contains(String s, String in)` qui retourne\r\ntrue si la chaine de caractère `in` se trouve dans la chaine de\r\ncaractères `s`. N\\'utilisez pas la méthode `contains()` ou `indexOf()`\r\nde String. La spécification est :\r\n\r\n``` java\r\n/*\r\n * @pre s != null, in != null\r\n * @post retourne true si la chaine de caractère in se trouve\r\n *     dans la chaîne de caractères s\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04Q8",
            "archive_properties": {
                "folders": [
                    "m04Q8"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* notation binaire",
            "description": "Les ordinateurs manipulent les nombres en utilisant le [système\r\nbinaire](https://fr.wikipedia.org/wiki/Système_binaire).\r\n\r\nEcrivez la méthode `int b2i(String s)` qui permet de transformer un\r\nnombre en notation binaire en sa représentation sous forme d\\'entier .\r\n\r\nLa spécification de cette méthode est :\r\n\r\n``` java\r\n/*\r\n * @pre s != null\r\n *      s est la représentation d'un nombre binaire\r\n *      s contient uniquement des 1 et des 0\r\n * @post retourne la représentation entière du nombre binaire\r\n *      correspondant à cette chaîne\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04Q9",
            "archive_properties": {
                "folders": [
                    "m04Q9"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour\r\nla mission 4.\r\n\r\nVous attendons une archive **.zip** contenant uniquement les fichiers :\r\n\r\n-   BioInfo.java\r\n-   README.txt\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04real",
            "archive_properties": {
                "folders": [
                    "m04real"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de bilan final",
            "description": "La classe **String** contient de nombreuses méthodes permettant de\r\nmanipuler les chaînes de caractères. Parmi celles-ci, on peut citer\r\n`length()` qui retourne la longueur de la chaîne de caractères,\r\n`charAt(int i)` qui retourne le caractère de la ième position ou\r\n`substring(int begin, int end)` qui retourne la sous-chaîne de\r\ncaractères démarrant à la position `begin` et se terminant à la position\r\n`end - 1`.\r\n\r\nEn utilisant ces méthodes, vous devez écrire une méthode dont la\r\nspécification est la suivante :\r\n\r\n``` java\r\n/*\r\n * @pre - p != null, s != null\r\n *      - p est un pattern, c’est-à-dire une chaîne de caractères composées de\r\n *        lettres, de chiffres et de zéro, une ou plusieurs fois le caractère ?\r\n *      - s contient des lettres et des chiffres, mais pas le caractère ?\r\n * @post - retourne le nombre d’occurrences du pattern p à l’intérieur de la chaîne\r\n *         de caractères s.\r\n *       - Une occurrence est une sous-chaîne de s de même longueur\r\n *         que p qui contient les mêmes caractères que p à toutes les positions\r\n *         où p ne contient pas de caractère ?\r\n */\r\npublic static int count (String p, String s);\r\n```\r\n\r\nÀ titre d'exemple, le code ci-dessous :\r\n\r\n``` java\r\nSystem.out.println(count(\"AB\",\"CDEF\"));\r\nSystem.out.println(count(\"?B\",\"CABDEF\"));\r\nSystem.out.println(count(\"A?\",\"CABDEACF\"));\r\nSystem.out.println(count(\"AA\",\"CAAABDEAAF\"));\r\nSystem.out.println(count(\"??\",\"CAAAB\"));\r\n```\r\n\r\nAffiche les valeurs 0, 1, 2, 3 et 4.\r\n\r\nPour résoudre ce problème, pensez à la découper en sous-problèmes et\r\nn'hésitez pas à utiliser une ou plusieurs méthodes privées\r\nsupplémentaires.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Sébastien Combéfis",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04_bf",
            "archive_properties": {
                "folders": [
                    "m04_bf"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "QCM",
            "description": "Mission 4. Manipulation de chaînes de caractères\r\n================================================\r\n\r\nCes questions supposent que vous avez lu les sections suivantes du livre\r\nde référence JavaNotes\\_\r\n\r\n> -   [2.3 : Strings, Objects, Enums, and Subroutines]{.title-ref}\\_\r\n>     -   [2.3.1 : Built-in Subroutines and Functions]{.title-ref}\\_\r\n>     -   [2.3.2 : Operations on Strings]{.title-ref}\\_\r\n>     -   [2.3.3 : Introduction to Enums]{.title-ref}\\_ n\\'est pas vu\r\n>         dans le cadre de ce cours\r\n> -   [4.7 : The Truth About Declarations]{.title-ref}\\_\r\n>     -   [4.7.1 : Initialization in Declarations]{.title-ref}\\_\r\n>     -   [4.7.2 : Named Constants]{.title-ref}\\_\r\n>     -   [4.7.3 : Naming and Scope Rules]{.title-ref}\\_\r\n\r\nLes sections vues précédemment restent bien entendu d\\'actualité.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 4"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m04_qcm",
            "archive_properties": {
                "folders": [
                    "m04_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 1 : Syntaxe et Tableaux",
            "description": "Répondez aux questions simples suivantes au sujet de la syntaxe des\r\ntableaux. Vous *devez* respecter les noms de variables suggérés. (Nous\r\nutilisons le type `int` pour les entiers et le type `double` pour les\r\nréels.)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05dem1",
            "archive_properties": {
                "folders": [
                    "m05dem1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 2 : Compararer des tableaux",
            "description": "Un étudiant utilise des tableaux de réels pour représenter des vecteurs\r\nmathématiques. Ces tableaux sont définis comme suit :\r\n\r\nL\\'étudiant propose la méthode suivante pour tester que deux vecteurs\r\nsont identiques :\r\n\r\nIl teste sa méthode sur les deux tableaux ci-dessus et conclut que sa\r\nméthode est correcte. Qu\\'en pensez-vous ?\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Clémentine Munyabarenzi",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05dem2",
            "archive_properties": {
                "folders": [
                    "m05dem2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 3 : Matrice unité",
            "description": "Ecrivez la méthode suivante :\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Clémentine Munyabarenzi",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05dem3",
            "archive_properties": {
                "folders": [
                    "m05dem3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 4 : Sommes de Matrices",
            "description": "Ecrivez en appliquant la *programmation défensive*, une version de la\r\nméthode dont la spécification est la suivante :\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Clémentine Munyabarenzi",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05dem4",
            "archive_properties": {
                "folders": [
                    "m05dem4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Démarrage 5 : Méthode Main",
            "description": "Dans une classe, on trouve une méthode dont la signature est :\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Munyabarenzi Clémentine Zaninka",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05dem5",
            "archive_properties": {
                "folders": [
                    "m05dem5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* : Tous la même valeur",
            "description": "Ecrivez la méthode `boolean allSame(double [] v)` qui retourne vrai si\r\ntous les éléments du tableau ont la même valeur, false sinon. la\r\nspécification est :\r\n\r\n``` java\r\n/*\r\n * @pre v != null, v contient au moins 2 éléments\r\n * @post retourne vrai si tous les éléments du tableau ont la même valeur, false sinon\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier MARTIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q1",
            "archive_properties": {
                "folders": [
                    "m05Q1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** : Somme",
            "description": "Ecrivez la méthode `double[] somme(double[] a, double[] b)` qui retourne\r\nun tableau dont chaque élément est la somme des éléments des tableaux a\r\net b au même indice. la spécification est :\r\n\r\n``` java\r\n/*\r\n * @pre a != null, b != null, a.length == b.lenght\r\n * @post retourne un tableau dont chaque élément est la somme des éléments\r\n *       des tableaux a et b au même indice\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q10",
            "archive_properties": {
                "folders": [
                    "m05Q10"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q*** : Top",
            "description": "Ecrivez la méthode `int[] top(int n, int[] v)` qui retourne un tableau\r\nde longueur `n` dont les éléments sont dans l\\'ordre croissant et qui\r\ncontient les `n` plus grands entiers du tableau `v` .\r\n\r\nPar exemple :\r\n\r\n-   `top(3, {5,0,4,1,2})` doit retourner `{2,4,5}`\r\n-   `top(1, {5,3})` doit retourner `{3}`\r\n-   `top(2, {5,1,3})` doit retourner `{3,5}`\r\n\r\nLa spécification est :\r\n\r\n``` java\r\n/*\r\n * @pre v != null, n < v.length\r\n * @post retourne un tableau de longueur n\r\n *       dont les éléments sont dans l'ordre croissant\r\n *       et qui contient les n plus grands entiers du tableau v\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q11",
            "archive_properties": {
                "folders": [
                    "m05Q11"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* : Oppose",
            "description": "Ecrivez les méthodes `oppose` et `oppose2` dont les spécifications et\r\nsignatures sont :\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q12",
            "archive_properties": {
                "folders": [
                    "m05Q12"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* : Valeur max du tableau",
            "description": "Ecrivez la méthode `double max(double[] v)` qui retourne le maximum du\r\ntableau de réels v. la spécification est :\r\n\r\n``` java\r\n/*\r\n * @pre v != null\r\n * @post retourne le maximum du tableau de réels v\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q2",
            "archive_properties": {
                "folders": [
                    "m05Q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* : Valeur moyenne du tableau",
            "description": "Ecrivez la méthode `double mean(double[] v)` qui retourne la moyenne\r\narithmétique du tableau de réels v. la spécification est :\r\n\r\n``` java\r\n/*\r\n * @pre v != null\r\n * @post retourne la moyenne arithmétique du tableau de réels v\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q3",
            "archive_properties": {
                "folders": [
                    "m05Q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* : Tableau croissant",
            "description": "Ecrivez la méthode `boolean croissant(int[] t)` qui retourne true si les\r\néléments du tableau `t` sont croissants, false sinon. la spécification\r\nest :\r\n\r\n``` java\r\n/*\r\n * @pre t != null\r\n * @post retourne true si les éléments du tableau t sont croissants, false sinon\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier MARTIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q4",
            "archive_properties": {
                "folders": [
                    "m05Q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** : Vecteur",
            "description": "Ecrivez la méthode `double[] initVector(int n, double i)` qui retourne\r\nun vecteur de n éléments tous initialisés à la valeur i. la\r\nspécification est :\r\n\r\n``` java\r\n/*\r\n * @pre n > 0\r\n * @post retourne un vecteur de n éléments tous initialisés à la valeur i\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q5",
            "archive_properties": {
                "folders": [
                    "m05Q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** : Matrice identité",
            "description": "Ecrivez la méthode `double[][] matriceIdentite(int n)` qui retourne la\r\nmatrice identité de taille n×n. la spécification est :\r\n\r\n``` java\r\n/*\r\n * @pre n > 0\r\n * @post retourne la matrice identité de taille n×n\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q6",
            "archive_properties": {
                "folders": [
                    "m05Q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** : Count",
            "description": "Ecrivez la méthode `int count(int v, int[][] m)` qui compte le nombre\r\nd\\'occurences de la valeur `v` dans `int[][] m`. la spécification est :\r\n\r\n``` java\r\n/*\r\n * @pre m != null\r\n * @post compte le nombre d'occurences de la valeur v dans int[][] m\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q7",
            "archive_properties": {
                "folders": [
                    "m05Q7"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** : replace",
            "description": "Ecrivez la méthode `void replace(int v, int w, int[][] m)` qui remplace\r\ntoutes les d\\'occurences de la valeur `v` dans `int[][] m` par la valeur\r\n`w`. la spécification est :\r\n\r\n``` java\r\n/*\r\n * @pre m != null\r\n * @post remplace toutes les d'occurences de la valeur v\r\n *       dans le tableau int[][] m par la valeur w.\r\n *       Modifie la matrice m.\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q8",
            "archive_properties": {
                "folders": [
                    "m05Q8"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** : Decale",
            "description": "Ecrivez la méthode `void decaleDroite(char[] v)` qui modifie le tableau\r\n`v` en décalant tous les caractères d\\'une position vers la droite et\r\n`v[0]` a été mis à la valeur `*` (étoile). Par exemple, si\r\n`v = ['a', 'b', 'c']`, le résultat attendu est `['*', 'a', 'b']`. La\r\nspécification est :\r\n\r\n``` java\r\n/*\r\n * @pre v != null\r\n * @post Modifie le tableau v en décalant tous les caractères\r\n *       d'une position vers la droite\r\n *       et v[0] est mis à la valeur '*' (étoile)\r\n */\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier MARTIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05Q9",
            "archive_properties": {
                "folders": [
                    "m05Q9"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour\r\nla mission 5.\r\n\r\nNous attendons une archive **.zip** contenant uniquement les fichiers :\r\n\r\n-   ImageGray.java\r\n-   LibrairieImage.java\r\n-   LibrairieIO.java\r\n-   Test.java\r\n-   TestRescale.java\r\n-   TestBrighten.java\r\n-   TestContains.java\r\n-   TestSubtract.java\r\n-   README.txt\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05real",
            "archive_properties": {
                "folders": [
                    "m05real"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "(a) : Question de Bilan Final",
            "description": "Dans cette question de bilan final, on va s\\'intéresser à l\\'écriture de\r\nméthodes dont le but est de modifier les éléments d\\'un tableau passé en\r\nparamètre. Le but de ces méthodes est de déplacer tous les éléments du\r\ntableau d\\'un certain nombre de cases vers la droite.\r\n\r\nCommençons par la méthode `rotateRightOne`. Elle va décaler tous les\r\néléments du tableau passé en paramètre, d\\'une case vers la droite.\r\nVoici sa spécification précise :\r\n\r\n``` java\r\n/*\r\n * @pre tab != null\r\n * @post Le tableau tab a été modifié et tous ses éléments sont décalés\r\n *       d'une position vers la droite (le dernier élément revenant\r\n *       en première position)\r\n */\r\n public static void rotateRightOne(int[] tab) {\r\n     // Question 1\r\n }\r\n```\r\n\r\nEnsuite, vous devez écrire une méthode `rotateRight` qui déplace tous\r\nles éléments d\\'un tableau, vers la droite, d\\'un certain nombre `n` de\r\npositions. Voici sa spécification précise :\r\n\r\n``` java\r\n/*\r\n * @pre tab != null\r\n * @post Le tableau tab a été modifié et tous ses éléments sont décalés\r\n *       de n positions vers la droite, c'est-à-dire que les éléments\r\n *       qui se trouvaient en i se retrouvent en (i + n) % tab.length\r\n */\r\npublic static void rotateRight(int[] tab, int n) {\r\n    // Question 2\r\n}\r\n```\r\n\r\nN\\'oubliez pas d\\'éviter la duplication de code, et d\\'éventuellement\r\nréutiliser l\\'une des deux méthodes dans l\\'autre.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05_bf",
            "archive_properties": {
                "folders": [
                    "m05_bf"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "QCM",
            "description": "Mission 5. Tableaux\r\n===================\r\n\r\nCes questions supposent que vous avez lu les sections suivantes du livre\r\nde référence JavaNotes\\_\r\n\r\n> -   [2 : Programming in the Small I: Names and Things]{.title-ref}\\_\r\n>\r\n> > -   [2.5 : Details of Expressions]{.title-ref}\\_\r\n> >     -   [2.5.7 : Type Conversion of Strings]{.title-ref}\\_\r\n>\r\n> -   [7 : Arrays]{.title-ref}\\_\r\n>\r\n> > -   [7.1 : Creating and Using Arrays]{.title-ref}\\_\r\n> >     -   [7.1.1 : Arrays]{.title-ref}\\_\r\n> >     -   [7.1.2 : Using Arrays]{.title-ref}\\_\r\n> >     -   [7.1.3 : Array Initialization]{.title-ref}\\_\r\n> > -   [7.2 : Programming With Arrays]{.title-ref}\\_\r\n> >     -   [7.2.1 : Arrays and for Loops]{.title-ref}\\_\r\n> >     -   [7.2.3 : Array Types in Subroutines]{.title-ref}\\_\r\n> >     -   [7.2.4 : Random Access]{.title-ref}\\_\r\n> >     -   [7.2.6 : Variable Arity Methods]{.title-ref}\\_\r\n> > -   [7.4 : Searching and Sorting]{.title-ref}\\_\r\n> >     -   [7.4.1 : Searching]{.title-ref}\\_\r\n> > -   [7.5 : Multi-dimensional Arrays]{.title-ref}\\_\r\n> >     -   [7.5.1 : Creating Two-dimensional Arrays]{.title-ref}\\_\r\n> >     -   [7.5.2 : Using Two-dimensional Arrays]{.title-ref}\\_\r\n>\r\n> -   [8 : Correctness, Robustness, Efficiency]{.title-ref}\\_\r\n>\r\n> > -   [8.4 : Assertions and Annotations]{.title-ref}\\_\r\n> >     -   [8.4.1 : Assertions]{.title-ref}\\_\r\n\r\nLes sections vues précédemment restent bien entendu d\\'actualité.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 5"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m05_qcm",
            "archive_properties": {
                "folders": [
                    "m05_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 1 : Pair.opposite()",
            "description": "Maintenant que les objets sont une notion un peu plus familière, nous\r\nallons vous demander de travailler avec des classes en Java, qui ne sont\r\nmaintenant plus de simple conteneurs à méthodes `static`.\r\n\r\nConsidérez la classe `Pair` suivante :\r\n\r\n``` java\r\npublic static class Pair{\r\n    private int a;    // le premier élément de la paire\r\n    private int b;    // le second élément de la paire\r\n\r\n    /**\r\n     *     @pre     -\r\n     *     @post    crée une paire avec a et b non-initialisés\r\n     */\r\n     public Pair(){\r\n\r\n     }\r\n\r\n    /**\r\n     * @pre    -\r\n     * @post    crée une paire composée de x et y\r\n     */\r\n     public Pair(int x, int y){\r\n        a = x;\r\n        b = y;\r\n     }\r\n\r\n    /**\r\n     * @pre    -\r\n     * @post    donne au premier élément de la paire la valeur nA\r\n     */\r\n     public void setA(int nA){\r\n        a = nA;\r\n     }\r\n\r\n    /**\r\n     * @pre    -\r\n     * @post    donne au second élément de la paire la valeur nB\r\n     */\r\n     public void setB(int nB){\r\n        b = nB;\r\n     }\r\n\r\n    /**\r\n     * @pre     -\r\n     * @post    retourne le premier élément de la paire\r\n     */\r\n     public int getA(){\r\n        return a;\r\n     }\r\n\r\n    /**\r\n     * @pre    -\r\n     * @post    retourne le second élément de la paire\r\n     */\r\n     public int getB(){\r\n        return b;\r\n     }\r\n\r\n    /**\r\n     * @pre        -\r\n     * @post    retourne une nouvelle instance de Pair dont les deux\r\n     *             éléments sont les opposés de ceux de cette paire-ci.\r\n     *            L'instance appelante reste inchangée.\r\n     */\r\n     public Pair opposite(){\r\n         // À implémenter\r\n     }\r\n}\r\n```\r\n\r\nPrenez le temps d\\'analyser cette classe, puis, une fois que vous\r\nl\\'aurez bien comprise, implémentez le corps de la méthode `opposite` de\r\nla classe pair. Cette méthode renvoie une nouvelle instance de la classe\r\n`Pair` telle que ses variables d\\'instance, `a` et `b`, valent l\\'opposé\r\ndes variables `a` et `b` de l\\'instance qui y fait appel. Voici un\r\nexemple de l\\'utilisation de cette méthode :\r\n\r\n``` java\r\nPair p,q;\r\np = new Pair();\r\np.setA(10);\r\np.setB(-2);\r\nq = p.opposite();\r\nSystem.out.println(q.getA() +  \", \" + q.getB());    // affiche \"-10, 2\"\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06dem1",
            "archive_properties": {
                "folders": [
                    "m06dem1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 2 : OrderedPair",
            "description": "Considérez maintenant la classe `OrderedPair`, qui prend comme variable\r\nd\\'instance un objet de type `Pair` dont la classe se trouve dans la\r\nqueston précédente. Voici la classe `OrderedPair` :\r\n\r\n``` java\r\npublic class OrderedPair {\r\n\r\n    private boolean ordered;  /* vrai si p est ordonnée */\r\n                            /* p.getA() <= p.getB() */\r\n    private Pair p;\r\n\r\n    /**\r\n     * @pre -\r\n     * @post crée un paire ordonnée (0,0)\r\n     */\r\n    public OrderedPair() {\r\n      p = new Pair(0, 0);\r\n      ordered = true;\r\n    }\r\n\r\n    /**\r\n     * @pre -\r\n     * @post donne au premier élément de la paire la valeur nA\r\n     */\r\n    public void setA(int nA) {\r\n      // À implémenter\r\n    }\r\n    /**\r\n     * @pre -\r\n     * @post donne au second élément de la paire la valeur nB\r\n     */\r\n    public void setB(int nB) {\r\n      // À implémenter\r\n    }\r\n\r\n    /**\r\n     * @pre    -\r\n     * @post donne à la variable ordered la valeur nOrdered\r\n     */\r\n     public void setOrdered(boolean nOrdered){\r\n         /* Pas donné */\r\n     }\r\n\r\n    /**\r\n     * @pre -\r\n     * @post retourne vrai si la paire est ordonnée, faux sinon\r\n     */\r\n    public boolean getOrdered() {\r\n      return ordered;\r\n    }\r\n\r\n    /**\r\n     * @pre -\r\n     * @post retourne le premier élément de la paire\r\n     */\r\n    public int getA() {\r\n      return p.getA();\r\n    }\r\n\r\n    /**\r\n     * @pre -\r\n     * @post retourne le second élément de la paire\r\n     */\r\n    public int getB() {\r\n      return p.getB();\r\n    }\r\n}\r\n```\r\n\r\nLe but de l\\'exercice est d\\'implémenter les méthodes `setA()` et\r\n`setB()` sans oublier de mettre à jour `ordered` en fonction des\r\nnouvelles valeurs des nombres dans la paire.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06dem2",
            "archive_properties": {
                "folders": [
                    "m06dem2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 3 : Drapeau.same()",
            "description": "Un étudiant a écrit la classe `Drapeau` ci-dessous. Il aimerait y\r\najouter la méthode `same` permettant de savoir si deux objets `Drapeau`\r\nsont dans le même état, mais il ne sait pas bien comment s\\'y prendre et\r\nvous demande votre aide pour y arriver.\r\n\r\nVoici la classe `Drapeau` :\r\n\r\n``` java\r\n/**\r\n * Une classe simple avec un objet contenant un booleen\r\n */\r\n\r\npublic static class Drapeau {\r\n    private boolean drapeau; // la valeur du drapeau\r\n\r\n    // Constructeur\r\n    /**\r\n     * @pre : -\r\n     * @post : un objet de type Drapeau est cree et\r\n     *            represente le booleen passe en argument\r\n     */\r\n    public Drapeau(boolean b) {\r\n        drapeau = b;\r\n    }\r\n\r\n    /**\r\n     * @pre -\r\n     * @post le drapeau vaut b\r\n     */\r\n    public void set(boolean b) {\r\n        drapeau = b;\r\n    }\r\n\r\n    /**\r\n     * @pre -\r\n     * @post retourne la valeur du drapeau\r\n     */\r\n    public boolean get() {\r\n        return drapeau;\r\n    }\r\n\r\n    /**\r\n     *    @pre     -\r\n     *    @post     Retourne true si d.get() == this.get().\r\n     *            Retourne false sinon\r\n     */\r\n    public boolean same(Drapeau d){\r\n        // À implémenter\r\n    }\r\n}\r\n```\r\n\r\nAidez cet étudiant en détresse et implémentez la méthode `same` dont les\r\nspécifications sont fournies ci-dessus. Pensez à gérer le cas où\r\n`d == null`, car les préconditions ne font aucune supposition.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06dem3",
            "archive_properties": {
                "folders": [
                    "m06dem3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 4 : Lecture de fichiers",
            "description": "Depuis le début du cours, la librairie `TextIO`\r\n(<http://math.hws.edu/eck/cs124/javanotes6/source/TextIO.java>) vous\r\npermet de lire des messages sur l\\'entrée standard. Cependant, `TextIO`\r\npermet aussi de lire des fichiers. En analysant la librairie `TextIO`,\r\ncomplétez les deux lignes incomplètes de manière à lire complètement le\r\nfichier `cotes.txt` qui contient les cotes de plusieurs personnes.\r\n\r\nVoici le code à compléter :\r\n\r\n``` java\r\npublic static void lireCotes() {\r\n    /*1*/\r\n    while (/*2*/) {\r\n        String prenom = TextIO.getWord();\r\n        String nom = TextIO.getWord();\r\n        int cote = TextIO.getInt();\r\n        TextIO.getln();\r\n        System.out.println(nom + \", \" + prenom + \": \" + cote);\r\n    }\r\n    System.out.println(\"Le fichier a été lu entièrement.\");\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06dem4",
            "archive_properties": {
                "folders": [
                    "m06dem4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* constructeur Date",
            "description": "Dans un programme Java, on écrit une classe permettant de représenter\r\nune date. Les variables d\\'instant de cette classe sont définies comme\r\nsuite :\r\n\r\n``` java\r\n/**\r\n * Une classe pour encoder une date\r\n *\r\n * @author Olivier Bonaventure\r\n * @version Oct. 2016\r\n */\r\npublic class Date{\r\n  public int jour; // le jour du mois\r\n  public int mois; // le mois\r\n  public int annee; // l'année\r\n  //...\r\n}\r\n```\r\n\r\nLe constructeur de cette classe a comme spécification :\r\n\r\n``` java\r\n/*\r\n * @pre 1 <= jour <= 31, 1 <= mois <= 12\r\n * @post retourne une date, les mois commencent à 1 pour janvier\r\n *       On ne gère pas les années bissextiles, février est supposé toujours\r\n *       contenir 28 jours\r\n */\r\n```\r\n\r\nVoici quelques exemples d\\'utilisation du constructeur :\r\n\r\n``` java\r\nDate poisson = new Date(1,4,2017); // 1er avril 2017\r\nDate noel = new Date(25,12,2016); // 25 décembre 2016\r\n```\r\n\r\nEcrivez le constructeur de cette classe `Date`.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06Q1",
            "archive_properties": {
                "folders": [
                    "m06Q1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* memeSurface",
            "description": "Considérons la classe `Rectangle`:\r\n\r\n``` java\r\n/**\r\n  * Un objet Java représentant un rectangle\r\n  *\r\n  * @author O. Bonaventure\r\n  * @version Oct. 2016\r\n  */\r\n public class Rectangle{\r\n     private double longueur;\r\n     private double largeur;\r\n\r\n     /**\r\n      * @pre long, larg > 0\r\n      * @post a construit un rectangle de longueur lon et de largeur larg\r\n      */\r\n     public Rectangle(double lon, double larg){\r\n         longueur = lon;\r\n         largeur = larg;\r\n     }\r\n\r\n     /*\r\n      * @pre -\r\n      * @post retourne la longueur du rectangle\r\n      */\r\n     public double getLongueur(){\r\n         return longueur;\r\n     }\r\n\r\n     /*\r\n      * @pre -\r\n      * @post retourne la largeur du rectangle\r\n      */\r\n     public double getLargeur(){\r\n         return largeur;\r\n     }\r\n\r\n     /*\r\n      * @pre -\r\n      * @post retourne la surface du rectangle\r\n      */\r\n      public double surface(){\r\n        // non fourni\r\n      }\r\n\r\n     /*\r\n      * @pre r != null\r\n      * @post return true si this et r ont la même surface, false sinon\r\n      */\r\n      // A compléter\r\n }\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06Q10",
            "archive_properties": {
                "folders": [
                    "m06Q10"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* rectangle identique",
            "description": "Considérons la classe `Rectangle`:\r\n\r\n``` java\r\n/**\r\n  * Un objet Java représentant un rectangle\r\n  *\r\n  * @author O. Bonaventure\r\n  * @version Oct. 2016\r\n  */\r\n public class Rectangle{\r\n     private double longueur;\r\n     private double largeur;\r\n\r\n     /**\r\n      * @pre long, larg > 0\r\n      * @post a construit un rectangle de longueur lon et de largeur larg\r\n      */\r\n     public Rectangle(double lon, double larg){\r\n         longueur = lon;\r\n         largeur = larg;\r\n     }\r\n\r\n     /*\r\n      * @pre -\r\n      * @post retourne la longueur du rectangle\r\n      */\r\n     public double getLongueur(){\r\n         return longueur;\r\n     }\r\n\r\n     /*\r\n      * @pre -\r\n      * @post retourne la largeur du rectangle\r\n      */\r\n\r\n     public double getLargeur(){\r\n         return largeur;\r\n     }\r\n\r\n     /*\r\n      * @pre -\r\n      * @post retourne la surface du rectangle\r\n      */\r\n     public double surface(){\r\n        // non fourni\r\n     }\r\n\r\n     /*\r\n      * @pre r != null\r\n      * @post return true si this et r ont la même surface, false sinon\r\n      */\r\n     public boolean memeSurface(Rectangle r){\r\n        // non fourni\r\n     }\r\n\r\n     /*\r\n      * @pre r != null\r\n      * @post return true si this et r sont identiques, false sinon\r\n      */\r\n     // A compléter\r\n }\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06Q11",
            "archive_properties": {
                "folders": [
                    "m06Q11"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* getters Date",
            "description": "Considérons à nouveau la classe `Date` qui permet de représenter une\r\ndate. Le squelette du code de cette classe est le suivant :\r\n\r\n``` java\r\n/**\r\n * Une classe pour encoder une date\r\n *\r\n * @author Olivier Bonaventure\r\n * @version Oct. 2016\r\n */\r\npublic class Date\r\n{\r\n public int jour; // le jour du mois\r\n public int mois; // le mois\r\n public int annee; // l'année\r\n\r\n /*\r\n  * @pre 1<= jour <=31, 1<= mois <=12\r\n  * @post retourne une date, les mois commencent à 1 pour janvier\r\n  *       On ne gère pas les années bissextiles, février est supposé toujours\r\n  *       contenir 28 jours\r\n  */\r\n\r\n public Date(int jour, int mois, int annee){\r\n   // code non fourni\r\n }\r\n\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne le jour\r\n  */\r\n public int getJour(){\r\n    // a compléter\r\n }\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne le mois (1=janvier, 2=février, ...\r\n  */\r\n public int getMois(){\r\n    // a compléter\r\n }\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne l'année\r\n  */\r\n public int getAnnee(){\r\n    // a compléter\r\n }\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06Q2",
            "archive_properties": {
                "folders": [
                    "m06Q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* identique",
            "description": "La classe `Date` représente une date. Dans cette classe, écrivez la\r\nméthode `identique` qui permet de tester l\\'égalité entre deux dates.\r\n\r\n``` java\r\n/**\r\n * Une classe pour encoder une date\r\n *\r\n * @author Olivier Bonaventure\r\n * @version Oct. 2016\r\n */\r\npublic class Date {\r\n public int jour; // le jour du mois\r\n public int mois; // le mois\r\n public int annee; // l'année\r\n\r\n /*\r\n  * @pre 1<= jour <=31, 1<= mois <=12\r\n  * @post retourne une date, les mois commencent à 1 pour janvier\r\n  *       On ne gère pas les années bissextiles, février est supposé toujours\r\n  *       contenir 28 jours\r\n  */\r\n\r\n public Date(int jour, int mois, int annee) {\r\n     // code non fourni\r\n }\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne le jour\r\n  */\r\n public int getJour() {\r\n     // code non fourni\r\n }\r\n\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne le mois (1=janvier, 2=février, ...\r\n  */\r\n public int getMois() {\r\n     // code non fourni\r\n }\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne l'année\r\n  */\r\n public int getAnnee() {\r\n     // code non fourni\r\n }\r\n\r\n\r\n /*\r\n  * @pre d!=null\r\n  * @post retourne true si this et d correspondent à la même date, false sinon\r\n  */\r\n public boolean identique(Date d) {\r\n   // à compléter\r\n }\r\n // ...\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06Q3",
            "archive_properties": {
                "folders": [
                    "m06Q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* demain",
            "description": "La classe `Date` représente une date. Dans cette classe, écrivez la\r\nméthode `demain` qui permet de retourner la date qui suit celle-ci.\r\n\r\n``` java\r\n/**\r\n * Une classe pour encoder une date\r\n *\r\n * @author Olivier Bonaventure\r\n * @version Oct. 2016\r\n */\r\npublic class Date\r\n{\r\n public int jour; // le jour du mois\r\n public int mois; // le mois\r\n public int annee; // l'année\r\n\r\n /*\r\n  * @pre 1<= jour <=31, 1<= mois <=12\r\n  * @post retourne une date, les mois commencent à 1 pour janvier\r\n  *       On ne gère pas les années bissextiles, février est supposé toujours\r\n  *       contenir 28 jours\r\n  */\r\n\r\n public Date(int jour, int mois, int annee)\r\n {\r\n     // code non fourni\r\n }\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne le jour\r\n  */\r\n public int getJour()\r\n {\r\n     // code non fourni\r\n }\r\n\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne le mois (1=janvier, 2=février, ...\r\n  */\r\n public int getMois()\r\n {\r\n     // code non fourni\r\n }\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne l'année\r\n  */\r\n public int getAnnee()\r\n {\r\n     // code non fourni\r\n }\r\n\r\n\r\n /*\r\n  * @pre d!=null\r\n  * @post retourne true si this et d correspondent à la même date, false sinon\r\n  */\r\n public boolean identique(Date d) {\r\n   // code non fourni\r\n }\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne la date correspondant au jour qui suit this. Cette méthode\r\n  *       ne supporte pas les années bissextiles, février est supposé avoir toujours\r\n  *       28 jours.\r\n  */\r\n public Date demain() {\r\n // à compléter\r\n }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06Q4",
            "archive_properties": {
                "folders": [
                    "m06Q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* getter",
            "description": "Considérons la classe `Fraction` qui permet de représenter une date. Le\r\nsquelette du code de cette classe est le suivant :\r\n\r\n``` java\r\n/**\r\n * Une classe représentant une fraction\r\n *\r\n * @author O. Bonaventure\r\n * @version Oct. 2016\r\n */\r\npublic class Fraction{\r\n    private int num; // numerateur\r\n    private int den; // denominateur\r\n\r\n    /**\r\n     * @pre num>=0, den>0\r\n     * @post construit la fraction num/den\r\n     */\r\n    public Fraction(int num, int den){\r\n        //code non fourni\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le dénominateur de la fraction\r\n     */\r\n    public int getDen(){\r\n        //à compléter\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le numérateur de la fraction\r\n     */\r\n    public int getNum(){\r\n        //à compléter\r\n    }\r\n    //...\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06Q5",
            "archive_properties": {
                "folders": [
                    "m06Q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* entier",
            "description": "Considérons la classe `Fraction` qui permet de représenter une fraction.\r\nLe squelette du code de cette classe est le suivant :\r\n\r\n``` java\r\n/**\r\n * Une classe représentant une fraction\r\n *\r\n * @author O. Bonaventure\r\n * @version Oct. 2016\r\n */\r\npublic class Fraction{\r\n    private int num; // numerateur\r\n    private int den; // denominateur\r\n\r\n    /**\r\n     * @pre num>=0, den>0\r\n     * @post construit la fraction num/den\r\n     */\r\n    public Fraction(int num, int den){\r\n        //code non fourni\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le dénominateur de la fraction\r\n     */\r\n    public int getDen(){\r\n        //code non fourni\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le numérateur de la fraction\r\n     */\r\n    public int getNum(){\r\n        //code non fourni\r\n    }\r\n    /*\r\n     * @pre -\r\n     * @post retourne true si la valeur numérique de la fraction est égale à une valeur entière\r\n     */\r\n    //Code à compléter\r\n\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06Q6",
            "archive_properties": {
                "folders": [
                    "m06Q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* getters Point",
            "description": "Considérons la classe `Point` qui permet de représenter une point. Le\r\nsquelette du code de cette classe est le suivant :\r\n\r\n``` java\r\npublic class Point{\r\n   private double x;\r\n   private double y;\r\n\r\n   /*\r\n    * @pre -\r\n    * @post a construit le point de coordonnée x,y\r\n    */\r\n   Point(double x, double y) {\r\n    //code non fourni\r\n   }\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne la coordonnée x du Point this\r\n    */\r\n   //à compléter\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne la coordonnée y du Point this\r\n    */\r\n   //à compléter\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06Q7",
            "archive_properties": {
                "folders": [
                    "m06Q7"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* distance",
            "description": "Considérons la classe `Point` qui permet de représenter une point. Le\r\nsquelette du code de cette classe est le suivant :\r\n\r\n``` java\r\npublic class Point{\r\n   private double x;\r\n   private double y;\r\n\r\n   /*\r\n    * @pre -\r\n    * @post a construit le point de coordonnée x,y\r\n    */\r\n   Point(double x, double y) {\r\n    //code non fourni\r\n   }\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne la coordonnée x du Point this\r\n    *\r\n    */\r\n   public double getX() {\r\n       //code non fourni\r\n   }\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne la coordonnée y du Point this\r\n    */\r\n   public double getY() {\r\n       //code non fourni\r\n   }\r\n\r\n   /*\r\n    * @pre p!=null\r\n    * @post retourne la distance entre this et p\r\n    *\r\n    * Voir https://fr.wikipedia.org/wiki/Coordonnées_cartésiennes\r\n    * pour le rappel de la distance entre deux points\r\n    */\r\n    //A compléter\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06Q8",
            "archive_properties": {
                "folders": [
                    "m06Q8"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* surface",
            "description": "Considérons la classe `Rectangle`:\r\n\r\n``` java\r\n/**\r\n  * Un objet Java représentant un rectangle\r\n  *\r\n  * @author O. Bonaventure\r\n  * @version Oct. 2016\r\n  */\r\n public class Rectangle{\r\n     private double longueur;\r\n     private double largeur;\r\n\r\n     /**\r\n      * @pre long, larg >0\r\n      * @post a construit un rectangle de longueur lon et de largeur larg\r\n      */\r\n     public Rectangle(double lon, double larg){\r\n         longueur = lon;\r\n         largeur = larg;\r\n     }\r\n\r\n     /*\r\n      * @pre -\r\n      * @post retourne la longueur du rectangle\r\n      */\r\n     public double getLongueur(){\r\n         return longueur;\r\n     }\r\n\r\n     /*\r\n      * @pre -\r\n      * @post retourne la largeur du rectangle\r\n      */\r\n     public double getLargeur(){\r\n         return largeur;\r\n     }\r\n\r\n     /*\r\n      * @pre -\r\n      * @post retourne la surface du rectangle\r\n      */\r\n     // A compléter\r\n }\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06Q9",
            "archive_properties": {
                "folders": [
                    "m06Q9"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour\r\nla Mission 6.\r\n\r\nVous attendons une archive **.zip** contenant uniquement les fichiers :\r\n\r\n-   TestChanson.java\r\n-   TestTemps.java\r\n-   TextIO.java\r\n-   Chanson.java\r\n-   Temps.java\r\n-   Programme.java\r\n-   README.txt\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06real",
            "archive_properties": {
                "folders": [
                    "m06real"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Bilan Final",
            "description": "Écrivez une classe complète `Employe` dont les instances représentent un\r\nemployé d'entreprise. Un employé est caractérisé par son nom (un string)\r\net son salaire (un entier positif). Il doit être possible de créer un\r\nnouvel employé avec un nom et un salaire et d'effectuer les opérations\r\nsuivantes sur un objet Employe :\r\n\r\n-   obtenir le nom de l'employé\r\n-   obtenir le salaire de l\\'employé\r\n-   obtenir un texte descriptif représentant l'employé sous la forme\r\n    `nom : salaire`\r\n-   augmenter le salaire de l\\'employé d\\'un certain pourcentage\r\n\r\nVous devez donc définir la classe `Employe` qui contiendra les méthodes\r\nsuivantes :\r\n\r\n``` java\r\n/*\r\n * @pre -\r\n * @post Un employé est créé avec le nom et le salaire indiqués en paramètres\r\n */\r\npublic Employe(String n, float s);\r\n\r\n/*\r\n * @pre -\r\n * @post Renvoie le nom de l'employé\r\n */\r\npublic String getNom();\r\n\r\n/*\r\n * @pre -\r\n * @post Renvoie le salaire de l'employé\r\n */\r\npublic float getSalaire();\r\n\r\n/*\r\n * @pre -\r\n * @post Renvoie une représentation textuelle de l'employé\r\n *       au format nom : salaire\r\n */\r\npublic String toString();\r\n\r\n/*\r\n * @pre s est un entier représentant le pourcentage d'augmentation\r\n * @post Le salaire de l'employé est augmenté du pourcentage spécifié\r\n *       (ex : un pourcentage de 100% double le salaire)\r\n */\r\npublic void augmente(float pourcentage);\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Virginie Van den Schrieck",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06_bf",
            "archive_properties": {
                "folders": [
                    "m06_bf"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "QCM",
            "description": "Mission 6. Classes et Objets\r\n============================\r\n\r\nCes questions supposent que vous avez lu les sections suivantes du livre\r\nde référence JavaNotes\\_\r\n\r\n> -   [5.1 : Objects, Instance Methods, and Instance\r\n>     Variables]{.title-ref}\\_\r\n>     -   [5.1.1 : Objects, Classes, and Instances]{.title-ref}\\_\r\n>     -   [5.1.2 : Fundamentals of Objects]{.title-ref}\\_\r\n>     -   [5.1.3 : Getters and Setters]{.title-ref}\\_\r\n> -   [5.2 : Constructors and Object Initialization]{.title-ref}\\_\r\n>     -   [5.2.1 : Initializing Instance Variables]{.title-ref}\\_\r\n>     -   [5.2.2 : Constructors]{.title-ref}\\_\r\n>     -   [5.2.3 : Garbage Collection]{.title-ref}\\_\r\n> -   [5.4 : Programming Example: Card, Hand, Deck]{.title-ref}\\_\r\n>     -   [5.4.1 : Designing the classes]{.title-ref}\\_\r\n>     -   [5.4.2 : The Card Class]{.title-ref}\\_\r\n>     -   [5.4.3 : Example: A Simple Card Game]{.title-ref}\\_\r\n\r\nainsi que l\\'API de la classe `TextIO`\\_. Les sections vues précédemment\r\nrestent bien entendu d\\'actualité.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 6"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m06_qcm",
            "archive_properties": {
                "folders": [
                    "m06_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Démarrage 1 : Paire d'entiers",
            "description": "Considérez la classe `Pair` suivante :\r\n\r\nDéfinissez une méthode `equals` pour cette classe, **qui re-définit\r\ncelle de la classe**\r\n[Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)\r\ntelle que deux paires sont égales si leur deux composantes sont égales.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Alexandre Dubray",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07dem1",
            "archive_properties": {
                "folders": [
                    "m07dem1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Démarrage 2 : Tickets de Parking",
            "description": "> Complétez la classe `Ticket` ci-dessous :\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Alexandre Dubray",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07dem2",
            "archive_properties": {
                "folders": [
                    "m07dem2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Employe - Méthode equals",
            "description": "On vous donne la classe Employe dont voici le corps :\r\n\r\n``` java\r\npublic class Employe{\r\n  private String nom ;\r\n  private double salaire ;\r\n\r\n  /*\r\n   * Constructeur\r\n   * @pre nom != null, salaire > 0\r\n   * @post a construit une instance de la classe Employe avec nom et salaire\r\n   */\r\n  public Employe ( String nom, double salaire){\r\n      this.nom = nom ;\r\n      this.salaire = salaire ;\r\n  }\r\n  /*\r\n   * @pre -\r\n   * @post retourne le nom de l'employé this\r\n   */\r\n  public String getNom(){\r\n      return nom ;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne le salaire de l'employé this\r\n   */\r\n  public double getSalaire() {\r\n      return salaire ;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne un String décrivant l'employé this\r\n   */\r\n  public String toString() {\r\n      //Non fourni\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne true si this et other sont deux employés qui ont le même nom et le même salaire\r\n   */\r\n  public boolean equals(Object other){\r\n      //A compléter\r\n  }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07Q1",
            "archive_properties": {
                "folders": [
                    "m07Q1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* DeStats - toString",
            "description": "On vous donne la classe DeStats dont voici le corps:\r\n\r\n``` java\r\npublic class DeStats extends De {\r\n\r\n    private int lances;\r\n    private int[] resultats;\r\n\r\n    /*\r\n     * @pre s != null;\r\n     * @post Crée une instance de la classe DeStats\r\n     *       avec comme nom s\r\n     */\r\n    public DeStats(String s) {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le tableau des résultats du dé this\r\n     */\r\n    public int[] getResultats() {\r\n        // A complèter\r\n    }\r\n\r\n    /*\r\n     * @pre 1 <= n <= 6\r\n     * @post retourne le nombre de fois que le dé\r\n     *       a donné comme résultat n\r\n     */\r\n    public int statistique(int n) {\r\n        return this.resultat[n-1];\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post incrémente le nombre de lancés et le\r\n     *       nombre de fois qu'un chiffre est sorti.\r\n     *       Retourne le chiffre que le dé a donné.\r\n     */\r\n    public int lance() {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le nombre de lancés du dé this\r\n     */\r\n    public int getLances() {\r\n        return this.lances;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne une description du dé sous forme\r\n     *       d'un String. Le format retourné est le nom du\r\n     *       dé suivi des statistique.\r\n     *       Par exemple, le dé avec le nom \"Dé\", 10 lancés\r\n     *       et 10 fois le 2 aurait comme représentation en String\r\n     *       \"Dé 10 [0, 10, 0, 0, 0, 0]\"\r\n     */\r\n    public String toString() {\r\n        // A complèter\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true si this et o sont deux DeStats identiques\r\n     */\r\n    public boolean equals(Object o) {\r\n        /* Code non fourni */\r\n    }\r\n}\r\n```\r\n\r\nPour information, la classe De ressemble à ceci :\r\n\r\n``` java\r\nimport java.util.Random;\r\n\r\npublic class De {\r\n    private String nom; // le nom de ce dé (par exemple sa couleur)\r\n    protected Random r; // nombre aléatoire\r\n\r\n    /*\r\n     * @pre nom != null\r\n     * @post crée l'instance de la classe De ayant comme nom la chaine n\r\n     *      initilisé le générateur de nombres aléatoires\r\n     */\r\n    public De(String n) {\r\n        nom = n;\r\n        r = new Random();\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post lance le dé et retourne la valeur du dé\r\n     */\r\n    public int lance() {\r\n        return r.nextInt(6)+1;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le générateur de nombres aléatoires utilisé par le dé\r\n     */\r\n    public Random getRandom() {\r\n        return r;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le nom du dé\r\n     */\r\n    public String getNom(){\r\n        return nom;\r\n    }\r\n\r\n    /*\r\n     * @pre n != null\r\n     * @post modifie le nom du dé qui est maintenant n\r\n     */\r\n    public void setNom(String n){\r\n        this.nom = n;\r\n    }\r\n\r\n    /*\r\n     * @pre r != null\r\n     * @post modifie le générateur de nombres aléatoires du dé qui est maintenant r\r\n     */\r\n    public void setRandom(Random r){\r\n        this.r = r;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne une chaîne de caractères représentant le dé\r\n     */\r\n    public String toString(){\r\n        return this.nom;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true ssi other est un dé identique à celui-ci (même nom et même générateur aléatoire)\r\n     */\r\n    public boolean equals(Object other) {\r\n        /* Code non fourni */\r\n    }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07Q10",
            "archive_properties": {
                "folders": [
                    "m07Q10"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* DeStats - equals",
            "description": "On vous donne la classe DeStats dont voici le corps:\r\n\r\n``` java\r\npublic class DeStats extends De {\r\n\r\n    private int lances;\r\n    private int[] resultats;\r\n\r\n    /*\r\n     * @pre s != null;\r\n     * @post Crée une instance de la classe DeStats\r\n     *       avec comme nom s\r\n     */\r\n    public DeStats(String s) {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le tableau des résultats du dé this\r\n     */\r\n    public int[] getResultats() {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre 1 <= n <= 6\r\n     * @post retourne le nombre de fois que le dé\r\n     *       a donné comme résultat n\r\n     */\r\n    public int statistique(int n) {\r\n        return this.resultat[n-1];\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post incrémente le nombre de lancés et le\r\n     *       nombre de fois qu'un chiffre est sorti.\r\n     *       Retourne le chiffre que le dé a donné.\r\n     */\r\n    public int lance() {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le nombre de lancés du dé this\r\n     */\r\n    public int getLances() {\r\n        return this.lances;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne une description du dé sous forme\r\n     *       d'un String. Le format retourné est le nom du\r\n     *       dé suivi des statistique sous forme de tableau\r\n     */\r\n    public String toString() {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true si this et o sont deux DeStats identiques\r\n     */\r\n    public boolean equals(Object o) {\r\n        // A complèter\r\n    }\r\n}\r\n```\r\n\r\nPour information, la classe De ressemble à ceci :\r\n\r\n``` java\r\nimport java.util.Random;\r\n\r\npublic class De {\r\n    private String nom; // le nom de ce dé (par exemple sa couleur)\r\n    protected Random r; // nombre aléatoire\r\n\r\n    /*\r\n     * @pre nom != null\r\n     * @post crée l'instance de la classe De ayant comme nom la chaine n\r\n     *      initilisé le générateur de nombres aléatoires\r\n     */\r\n    public De(String n) {\r\n        nom = n;\r\n        r = new Random();\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post lance le dé et retourne la valeur du dé\r\n     */\r\n    public int lance() {\r\n        return r.nextInt(6)+1;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le générateur de nombres aléatoires utilisé par le dé\r\n     */\r\n    public Random getRandom() {\r\n        return r;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le nom du dé\r\n     */\r\n    public String getNom(){\r\n        return nom;\r\n    }\r\n\r\n    /*\r\n     * @pre n != null\r\n     * @post modifie le nom du dé qui est maintenant n\r\n     */\r\n    public void setNom(String n){\r\n        this.nom = n;\r\n    }\r\n\r\n    /*\r\n     * @pre r != null\r\n     * @post modifie le générateur de nombres aléatoires du dé qui est maintenant r\r\n     */\r\n    public void setRandom(Random r){\r\n        this.r = r;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne une chaîne de caractères représentant le dé\r\n     */\r\n    public String toString(){\r\n        return this.nom;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true ssi other est un dé identique à celui-ci (même nom et même générateur aléatoire)\r\n     */\r\n    public boolean equals(Object other) {\r\n        /* Code non fourni */\r\n    }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07Q11",
            "archive_properties": {
                "folders": [
                    "m07Q11"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Employe - Méthode toString",
            "description": "On vous donne la classe Employe dont voici le corps:\r\n\r\n``` java\r\npublic class Employe{\r\n  private String nom ;\r\n  private double salaire ;\r\n\r\n  /*\r\n   * Constructeur\r\n   * @pre nom != null, salaire > 0\r\n   * @post a construit une instance de la classe Employe avec nom et salaire\r\n   */\r\n  public Employe ( String nom, double salaire){\r\n      this.nom = nom ;\r\n      this.salaire = salaire ;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne le nom de l'employé this\r\n   */\r\n  public String getNom(){\r\n      return nom ;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne le salaire de l'employé this\r\n   */\r\n  public double getSalaire() {\r\n      return salaire ;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne un String décrivant l'employé this\r\n   */\r\n  public String toString() {\r\n      // A compléter\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne true si this et other sont deux employés qui ont le même nom et le même salaire\r\n   */\r\n  public boolean equals(Object other){\r\n      // Non fourni\r\n  }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07Q2",
            "archive_properties": {
                "folders": [
                    "m07Q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Dé - Méthode equals",
            "description": "On vous donne la classe De dont voici le corps :\r\n\r\n``` java\r\nimport java.util.Random;\r\n\r\npublic class De{\r\n  private String nom; // le nom de ce dé (par exemple sa couleur)\r\n  protected Random r ; // nombre aléatoire\r\n\r\n  /*\r\n   * @pre nom != null\r\n   * @post a créé l'instance de la classe De ayant comme nom la chaine n, a initilisé\r\n   *       le générateur de nombres aléatoires\r\n   */\r\n  public De(String n){\r\n      nom = n;\r\n      r = new Random();\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post a lance le dé et retourne la valeur du dé\r\n   */\r\n  public int lance(){\r\n      return r.nextInt(6)+1;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne le générateur de nombres aléatoires utilisé par le dé\r\n   */\r\n  public Random getRandom(){\r\n      return r;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne le nom du dé\r\n   */\r\n  public String getNom(){\r\n      return nom;\r\n  }\r\n\r\n  /*\r\n   * @pre n!=null\r\n   * @post a modifié le nom du dé qui est maintenant n\r\n   */\r\n  public void setNom(String n){\r\n      this.nom = n;\r\n  }\r\n\r\n  /*\r\n   * @pre r!=null\r\n   * @post a modifié le générateur de nombres aléatoires du dé qui est maintenant r\r\n   */\r\n  public void setRandom(Random r){\r\n      this.r = r;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne une chaîne de caractères représentant le dé\r\n   */\r\n  public String toString(){\r\n      return this.nom;\r\n  }\r\n\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne true ssi other est un dé identique à celui-ci (même nom et même générateur aléatoire)\r\n   */\r\n  public boolean equals(Object other) {\r\n      // A compléter\r\n  }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07Q3",
            "archive_properties": {
                "folders": [
                    "m07Q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Directeur - Constructeur",
            "description": "On vous donne la classe Directeur dont voici le corps:\r\n\r\n``` java\r\npublic class Directeur extends Employe{\r\n  private double prime; // en pourcents du salaire\r\n\r\n /*\r\n  * Constructeur\r\n  * @pre nom != null, salaire > 0, 0 <= prime < 1\r\n  * @post a construit une instance de la classe Directeur\r\n  */\r\n  public Directeur(String nom, double salaire, double prime){\r\n      //a compléter\r\n  }\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne la salaire du directeur. Ce salaire est (1+prime)*salaire\r\n  */\r\n  public double getSalaire() {\r\n      // non fourni\r\n  }\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne true si this et other sont identiques\r\n  *      (même nom, même salaire, même prime)\r\n  */\r\n  public boolean equals(Object other){\r\n      // non fourni\r\n  }\r\n\r\n /*\r\n  * @pre -\r\n  * @post retourne la prime de ce directeur\r\n  */\r\n  public double getPrime() {\r\n      // code non fourni\r\n  }\r\n}\r\n```\r\n\r\nPour information, la classe Employé ressemble à ceci :\r\n\r\n``` java\r\npublic class Employe{\r\n  private String nom ;\r\n  private double salaire ;\r\n\r\n  /*\r\n   * Constructeur\r\n   * @pre nom != null, salaire > 0\r\n   * @post a construit une instance de la classe Employe avec nom et salaire\r\n   */\r\n  public Employe (String nom, double salaire){\r\n      this.nom = nom ;\r\n      this.salaire = salaire ;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne le nom de l'employé this\r\n   */\r\n  public String getNom(){\r\n      return nom ;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne le salaire de l'employé this\r\n   */\r\n  public double getSalaire() {\r\n      return salaire ;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne un String décrivant l'employé this\r\n   */\r\n  public String toString() {\r\n      // Non fourni\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne true si this et other sont deux employés\r\n   *       qui ont le même nom et le même salaire\r\n   */\r\n  public boolean equals(Object other){\r\n      // Non fourni\r\n  }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07Q4",
            "archive_properties": {
                "folders": [
                    "m07Q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Directeur - getSalaire",
            "description": "On vous donne la classe Directeur dont voici le corps :\r\n\r\n``` java\r\npublic class Directeur extends Employe {\r\n\r\n    private double prime;\r\n\r\n    /*\r\n     * Constructeur\r\n     * @pre nom != null, salaire > 0, 0 <= prime < 1\r\n     * @post a construit une instance de la classe Directeur\r\n     */\r\n    public Directeur(String nom, double salaire, double prime) {\r\n        //non fourni\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne la salaire du directeur.\r\n     *       Ce salaire est (1+prime)*salaire\r\n     */\r\n    public double getSalaire() {\r\n        // a compléter\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true si this et other sont identiques\r\n     *      (même nom, même salaire, même prime)\r\n     */\r\n    public boolean equals(Object other) {\r\n        // non fourni\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne la prime de ce directeur\r\n     */\r\n    public double getPrime() {\r\n        // code non fourni\r\n    }\r\n}\r\n```\r\n\r\nPour information, la classe Employé ressemble à ceci :\r\n\r\n``` java\r\npublic class Employe {\r\n    private String nom;\r\n    private double salaire;\r\n\r\n    /*\r\n     * Constructeur\r\n     * @pre nom != null, salaire > 0\r\n     * @post a construit une instance de la classe Employe avec nom et salaire\r\n     */\r\n    public Employe(String nom, double salaire){\r\n        this.nom = nom;\r\n        this.salaire = salaire;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le nom de l'employé this\r\n     */\r\n    public String getNom(){\r\n        return nom ;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le salaire de l'employé this\r\n     */\r\n    public double getSalaire() {\r\n        return salaire ;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne un String décrivant l'employé this\r\n     */\r\n    public String toString() {\r\n        // Non fourni\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true si this et other sont deux employés qui ont le même nom et le même salaire\r\n     */\r\n    public boolean equals(Object other) {\r\n        // Non fourni\r\n    }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07Q5",
            "archive_properties": {
                "folders": [
                    "m07Q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Directeur - Equals",
            "description": "On vous donne la classe Directeur dont voici le corps :\r\n\r\n``` java\r\npublic class Directeur extends Employe {\r\n   private double prime; // en pourcents du salaire\r\n\r\n  /*\r\n   * Constructeur\r\n   * @pre nom != null, salaire > 0, 0 <= prime < 1\r\n   * @post a construit une instance de la classe Directeur\r\n   */\r\n\r\n   public Directeur(String nom, double salaire, double prime){\r\n       //non fourni\r\n   }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne la salaire du directeur.\r\n   *       Ce salaire est (1+prime)*salaire\r\n   */\r\n   public double getSalaire() {\r\n       //non fourni\r\n   }\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne true si this et other sont identiques\r\n    *       (même nom, même salaire, même prime)\r\n    */\r\n   public boolean equals(Object other){\r\n       //a compléter\r\n   }\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne la prime de ce directeur\r\n    */\r\n   public double getPrime() {\r\n       // code non fourni\r\n   }\r\n }\r\n```\r\n\r\nPour information, la classe Employé ressemble à ceci :\r\n\r\n``` java\r\npublic class Employe{\r\n\r\n  private String nom;\r\n  private double salaire;\r\n\r\n  /*\r\n   * Constructeur\r\n   * @pre nom != null, salaire > 0\r\n   * @post a construit une instance de la classe Employe avec nom et salaire\r\n   */\r\n  public Employe(String nom, double salaire){\r\n      this.nom = nom ;\r\n      this.salaire = salaire ;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne le nom de l'employé this\r\n   */\r\n  public String getNom(){\r\n      return nom ;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne le salaire de l'employé this\r\n   */\r\n  public double getSalaire() {\r\n      return salaire ;\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne un String décrivant l'employé this\r\n   */\r\n  public String toString() {\r\n      //Non fourni\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne true si this et other sont deux employés qui ont le même nom et le même salaire\r\n   */\r\n  public boolean equals(Object other){\r\n      //Non fourni\r\n  }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07Q6",
            "archive_properties": {
                "folders": [
                    "m07Q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* DeStats - Constructeur",
            "description": "On vous donne la classe DeStats dont voici le corps:\r\n\r\n``` java\r\npublic class DeStats extends De {\r\n\r\n    private int lances;\r\n    private int[] resultats;\r\n\r\n    /*\r\n     * @pre s != null;\r\n     * @post Crée une instance de la classe DeStats\r\n     *       avec comme nom s\r\n     */\r\n    public DeStats(String s) {\r\n        // A complèter\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le tableau des résultats du dé this\r\n     */\r\n    public int[] getResultats() {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre 1 <= n <= 6\r\n     * @post retourne le nombre de fois que le dé\r\n     *       a donné comme résultat n\r\n     */\r\n    public int statistique(int n) {\r\n        return this.resultat[n-1];\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post incrémente le nombre de lancés et le\r\n     *       nombre de fois qu'un chiffre est sorti.\r\n     *       Retourne le chiffre que le dé a donné.\r\n     */\r\n    public int lance() {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le nombre de lancés du dé this\r\n     */\r\n    public int getLances() {\r\n        return this.lances;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne une description du dé sous forme\r\n     *       d'un String. Le format retourné est le nom du\r\n     *       dé suivi des statistique sous forme de tableau\r\n     */\r\n    public String toString() {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true si this et o sont deux DeStats identiques\r\n     */\r\n    public boolean equals(Object o) {\r\n        /* Code non fourni */\r\n    }\r\n}\r\n```\r\n\r\nPour information, la classe De ressemble à ceci :\r\n\r\n``` java\r\nimport java.util.Random;\r\n\r\npublic class De {\r\n    private String nom; // le nom de ce dé (par exemple sa couleur)\r\n    protected Random r; // nombre aléatoire\r\n\r\n    /*\r\n     * @pre nom != null\r\n     * @post crée l'instance de la classe De ayant comme nom la chaine n\r\n     *      initilisé le générateur de nombres aléatoires\r\n     */\r\n    public De(String n) {\r\n        nom = n;\r\n        r = new Random();\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post lance le dé et retourne la valeur du dé\r\n     */\r\n    public int lance() {\r\n        return r.nextInt(6)+1;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le générateur de nombres aléatoires utilisé par le dé\r\n     */\r\n    public Random getRandom() {\r\n        return r;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le nom du dé\r\n     */\r\n    public String getNom(){\r\n        return nom;\r\n    }\r\n\r\n    /*\r\n     * @pre n != null\r\n     * @post modifie le nom du dé qui est maintenant n\r\n     */\r\n    public void setNom(String n){\r\n        this.nom = n;\r\n    }\r\n\r\n    /*\r\n     * @pre r != null\r\n     * @post modifie le générateur de nombres aléatoires du dé qui est maintenant r\r\n     */\r\n    public void setRandom(Random r){\r\n        this.r = r;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne une chaîne de caractères représentant le dé\r\n     */\r\n    public String toString(){\r\n        return this.nom;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true ssi other est un dé identique à celui-ci (même nom et même générateur aléatoire)\r\n     */\r\n    public boolean equals(Object other) {\r\n        /* Code non fourni */\r\n    }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07Q7",
            "archive_properties": {
                "folders": [
                    "m07Q7"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* DeStats - lances",
            "description": "On vous donne la classe DeStats dont voici le corps:\r\n\r\n``` java\r\npublic class DeStats extends De {\r\n\r\n    private int lances;\r\n    private int[] resultats;\r\n\r\n    /*\r\n     * @pre s != null;\r\n     * @post Crée une instance de la classe DeStats\r\n     *       avec comme nom s\r\n     */\r\n    public DeStats(String s) {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le tableau des résultats du dé this\r\n     */\r\n    public int[] getResultats() {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre 1 <= n <= 6\r\n     * @post retourne le nombre de fois que le dé\r\n     *       a donné comme résultat n\r\n     */\r\n    public int statistique(int n) {\r\n        return this.resultat[n-1];\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post incrémente le nombre de lancés et le\r\n     *       nombre de fois qu'un chiffre est sorti.\r\n     *       Retourne le chiffre que le dé a donné.\r\n     */\r\n    public int lance() {\r\n        // A complèter\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le nombre de lancés du dé this\r\n     */\r\n    public int getLances() {\r\n        return this.lances;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne une description du dé sous forme\r\n     *       d'un String. Le format retourné est le nom du\r\n     *       dé suivi des statistique sous forme de tableau\r\n     */\r\n    public String toString() {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true si this et o sont deux DeStats identiques\r\n     */\r\n    public boolean equals(Object o) {\r\n        /* Code non fourni */\r\n    }\r\n}\r\n```\r\n\r\nPour information, la classe De ressemble à ceci :\r\n\r\n``` java\r\nimport java.util.Random;\r\n\r\npublic class De {\r\n    private String nom; // le nom de ce dé (par exemple sa couleur)\r\n    protected Random r; // nombre aléatoire\r\n\r\n    /*\r\n     * @pre nom != null\r\n     * @post crée l'instance de la classe De ayant comme nom la chaine n\r\n     *      initilisé le générateur de nombres aléatoires\r\n     */\r\n    public De(String n) {\r\n        nom = n;\r\n        r = new Random();\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post lance le dé et retourne la valeur du dé\r\n     */\r\n    public int lance() {\r\n        return r.nextInt(6)+1;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le générateur de nombres aléatoires utilisé par le dé\r\n     */\r\n    public Random getRandom() {\r\n        return r;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le nom du dé\r\n     */\r\n    public String getNom(){\r\n        return nom;\r\n    }\r\n\r\n    /*\r\n     * @pre n != null\r\n     * @post modifie le nom du dé qui est maintenant n\r\n     */\r\n    public void setNom(String n){\r\n        this.nom = n;\r\n    }\r\n\r\n    /*\r\n     * @pre r != null\r\n     * @post modifie le générateur de nombres aléatoires du dé qui est maintenant r\r\n     */\r\n    public void setRandom(Random r){\r\n        this.r = r;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne une chaîne de caractères représentant le dé\r\n     */\r\n    public String toString(){\r\n        return this.nom;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true ssi other est un dé identique à celui-ci (même nom et même générateur aléatoire)\r\n     */\r\n    public boolean equals(Object other) {\r\n        /* Code non fourni */\r\n    }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07Q8",
            "archive_properties": {
                "folders": [
                    "m07Q8"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* DeStats - resultats",
            "description": "On vous donne la classe DeStats dont voici le corps:\r\n\r\n``` java\r\npublic class DeStats extends De {\r\n\r\n    private int lances;\r\n    private int[] resultats;\r\n\r\n    /*\r\n     * @pre s != null;\r\n     * @post Crée une instance de la classe DeStats\r\n     *       avec comme nom s\r\n     */\r\n    public DeStats(String s) {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le tableau des résultats du dé this\r\n     */\r\n    public int[] getResultats() {\r\n        // A complèter\r\n    }\r\n\r\n    /*\r\n     * @pre 1 <= n <= 6\r\n     * @post retourne le nombre de fois que le dé\r\n     *       a donné comme résultat n\r\n     */\r\n    public int statistique(int n) {\r\n        return this.resultat[n-1];\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post incrémente le nombre de lancés et le\r\n     *       nombre de fois qu'un chiffre est sorti.\r\n     *       Retourne le chiffre que le dé a donné.\r\n     */\r\n    public int lance() {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le nombre de lancés du dé this\r\n     */\r\n    public int getLances() {\r\n        return this.lances;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne une description du dé sous forme\r\n     *       d'un String. Le format retourné est le nom du\r\n     *       dé suivi des statistique sous forme de tableau\r\n     */\r\n    public String toString() {\r\n        /* Code non fourni */\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true si this et o sont deux DeStats identiques\r\n     */\r\n    public boolean equals(Object o) {\r\n        /* Code non fourni */\r\n    }\r\n}\r\n```\r\n\r\nPour information, la classe De ressemble à ceci :\r\n\r\n``` java\r\nimport java.util.Random;\r\n\r\npublic class De {\r\n    private String nom; // le nom de ce dé (par exemple sa couleur)\r\n    protected Random r; // nombre aléatoire\r\n\r\n    /*\r\n     * @pre nom != null\r\n     * @post crée l'instance de la classe De ayant comme nom la chaine n\r\n     *      initilisé le générateur de nombres aléatoires\r\n     */\r\n    public De(String n) {\r\n        nom = n;\r\n        r = new Random();\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post lance le dé et retourne la valeur du dé\r\n     */\r\n    public int lance() {\r\n        return r.nextInt(6)+1;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le générateur de nombres aléatoires utilisé par le dé\r\n     */\r\n    public Random getRandom() {\r\n        return r;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le nom du dé\r\n     */\r\n    public String getNom(){\r\n        return nom;\r\n    }\r\n\r\n    /*\r\n     * @pre n != null\r\n     * @post modifie le nom du dé qui est maintenant n\r\n     */\r\n    public void setNom(String n){\r\n        this.nom = n;\r\n    }\r\n\r\n    /*\r\n     * @pre r != null\r\n     * @post modifie le générateur de nombres aléatoires du dé qui est maintenant r\r\n     */\r\n    public void setRandom(Random r){\r\n        this.r = r;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne une chaîne de caractères représentant le dé\r\n     */\r\n    public String toString(){\r\n        return this.nom;\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne true ssi other est un dé identique à celui-ci (même nom et même générateur aléatoire)\r\n     */\r\n    public boolean equals(Object other) {\r\n        /* Code non fourni */\r\n    }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07Q9",
            "archive_properties": {
                "folders": [
                    "m07Q9"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour\r\nla Mission 7.\r\n\r\nVous attendons une archive **.zip** contenant uniquement les fichiers :\r\n\r\n-   Article.java\r\n-   ArticlePiece.java\r\n-   ArticleReparation.java\r\n-   Facture.java\r\n-   Piece.java\r\n-   TestFacture.java\r\n-   TestFactureInitial.java\r\n-   README.txt\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Bastien BODART",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07real",
            "archive_properties": {
                "folders": [
                    "m07real"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Bilan Final",
            "description": "Dans le contexte de gestion d\\'une bibliothèque de média, chacun des\r\nobjets de cette bibliothèque est une instance de la classe Java `Item`\r\nci-dessous :\r\n\r\n``` java\r\npublic class Item {\r\n   private final String author, title;\r\n   private final int serial;\r\n\r\n   /**\r\n    * Constructeur\r\n    * @pre author != null , title != null , serial > 0\r\n    * @post Une instance de la classe est créée, et représente un objet ayant comme\r\n    *       auteur author, comme titre title et comme numéro de série serial\r\n    */\r\n   public Item (String author, String title, Integer serial) {\r\n      this.author = author;\r\n      this.title = title;\r\n      this.serial = serial;\r\n   }\r\n\r\n   /**\r\n    * @pre -\r\n    * @post Retourne l'auteur\r\n    */\r\n    public String getAuthor(){\r\n        return this.author;\r\n    }\r\n\r\n    /**\r\n    * @pre -\r\n    * @post Retourne le titre\r\n    */\r\n    public String getAuthor(){\r\n        return this.title;\r\n    }\r\n\r\n    /**\r\n    * @pre -\r\n    * @post Retourne le numéro de série\r\n    */\r\n    public String getAuthor(){\r\n        return this.serial;\r\n    }\r\n\r\n   /**\r\n    * @pre -\r\n    * @post La valeur renvoyée contient une représentation de cet objet\r\n    *       sous la forme : [num série] Auteur, Titre\r\n    */\r\n   public String toString(){\r\n      // À compléter\r\n   }\r\n}\r\n```\r\n\r\nVous devez tout d\\'abord compléter la méthode `toString` de la classe\r\n`Item`.\r\n\r\nOn vous demande ensuite d\\'écrire une classe `CD` permettant de\r\nreprésenter des CD. Un CD est lui même un item de la bibliothèque avec\r\nune information supplémentaire : la durée de l\\'album en secondes (cette\r\ndurée doit être stockée dans un `int`). On doit pouvoir créer un nouvel\r\nobjet CD par exemple avec l\\'instruction :\r\n\r\n``` java\r\nCD r = new CD (\"Radiohead\", \"The Bends\", 2917);  // auteur, titre et durée en secondes\r\n```\r\n\r\net obtenir une représentation textuelle de ce CD grâce à sa méthode\r\n`toString`, qui renvoie par exemple :\r\n\r\n``` java\r\n[100001] Radiohead, The Bends (2917 s)\r\n```\r\n\r\nRemarquez que chaque `Item` possède un serial qui est un numéro de série\r\nunique propre à l'objet (pour pouvoir différencier plusieurs exemplaires\r\ndu même livre par exemple). Il doit être généré automatiquement et être\r\nsupérieur à 100000 pour un CD.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Sébastien Combéfis",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07_bf",
            "archive_properties": {
                "folders": [
                    "m07_bf"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "QCM",
            "description": "Mission 7. Extension et Héritage\r\n================================\r\n\r\nCes questions supposent que vous avez lu les sections suivantes du livre\r\nde référence JavaNotes\\_\r\n\r\n> -   [2.4 : Text Input and Output]{.title-ref}\\_\r\n>     -   [2.4.4 : Formatted Output]{.title-ref}\\_\r\n> -   [4.3 : Parameters]{.title-ref}\\_\r\n>     -   [4.3.3 : Overloading]{.title-ref}\\_\r\n> -   [5.3 : Programming with Objects]{.title-ref}\\_\r\n>     -   [5.3.3 : The class \\\"Object\\\"]{.title-ref}\\_\r\n> -   [5.5 : Inheritance, Polymorphism, and Abstract\r\n>     Classes]{.title-ref}\\_\r\n>     -   [5.5.1 : Extending Existing Classes]{.title-ref}\\_\r\n>     -   [5.5.2 : Inheritance and Class Hierarchy]{.title-ref}\\_\r\n>     -   [5.5.3 : Example: Vehicles]{.title-ref}\\_\r\n>     -   [5.5.4 : Polymorphism]{.title-ref}\\_\r\n> -   [5.6 : this and super]{.title-ref}\\_\r\n>     -   [5.6.1 : The Special Variable this]{.title-ref}\\_\r\n>     -   [5.6.2 : The Special Variable super]{.title-ref}\\_\r\n>     -   [5.6.3 : Constructors in Subclasses]{.title-ref}\\_\r\n> -   [5.7 : Interfaces, Nested Classes, and Other\r\n>     Details]{.title-ref}\\_\r\n>     -   [5.7.4 : Mixing Static and Non-static]{.title-ref}\\_\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 7"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m07_qcm",
            "archive_properties": {
                "folders": [
                    "m07_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 1 : Implémenter une interface",
            "description": "Les interfaces sont très pratiques en termes de conception orientée\r\nobjet et permettent d\\'avoir une vision globale cohérente du\r\nfonctionnement d\\'un programme, de ses différents acteurs et de la\r\nmanière dont ils interagissent. Il est donc important de savoir\r\nimplémenter des interfaces en respectant leurs spécifications. Voici\r\nl\\'interface `DrapeauIF`:\r\n\r\n``` java\r\n// Une interface simple correspondant à un drapeau\r\npublic interface DrapeauIF {\r\n\r\n    /*\r\n     * @pre : -\r\n     * @post : le drapeau prend la valeur passée en argument\r\n     */\r\n    public void set(boolean drapeau);\r\n\r\n    /*\r\n     * @pre : -\r\n     * @post : Si l'argument est 'V' ou 'v', le drapeau\r\n     *         prend la valeur vrai et faux sinon\r\n     */\r\n    public void set(char c);\r\n\r\n    /*\r\n     * @pre : -\r\n     * @post : retourne le drapeau sous forme d'un booléen\r\n     */\r\n    public boolean toBoolean();\r\n}\r\n```\r\n\r\nPrenez connaissance de sont fonctionnement et de ses spécifications.\r\nVoici maintenant la classe `Drapeau` qui implémente l\\'interface\r\n`DrapeauIF`:\r\n\r\n``` java\r\n// Une classe simple avec un objet contenant un booléen\r\npublic class Drapeau implements DrapeauIF {\r\n\r\n    private boolean drapeau; // la valeur du drapeau\r\n\r\n    // Constructeurs\r\n    /*\r\n     * @pre : -\r\n     * @post : un objet de type Drapeau est créé\r\n     *         et représente le drapeau 'false'\r\n     */\r\n    public Drapeau() {\r\n        drapeau = false;\r\n    }\r\n\r\n    /*\r\n     * @pre : -\r\n     * @post : un objet de type Drapeau est créé et\r\n     *         représente le booleen passé en argument\r\n     */\r\n    public Drapeau(boolean drapeau) {\r\n        this.drapeau = drapeau;\r\n    }\r\n\r\n    /*\r\n     * @pre : -\r\n     * @post : un objet de type Drapeau est créé.\r\n     *         Si l'argument est 'V' ou 'v', il représente le\r\n     *         drapeau true.\r\n     *         Sinon, il représente le drapeau false\r\n     */\r\n    public Drapeau(char c) {\r\n        drapeau = (c == 'V' || c == 'v');\r\n    }\r\n\r\n    public void set(boolean drapeau) {\r\n        // A Complèter\r\n    }\r\n\r\n    public void set(char c) {\r\n        // A Complèter\r\n    }\r\n\r\n    public boolean toBoolean() {\r\n        return drapeau;\r\n    }\r\n}\r\n```\r\n\r\nImplémentez les deux alternatives de la méthode `set()` de la classe\r\n`Drapeau` en vous référant aux spécifications énoncées dans l\\'interface\r\n`DrapeauIF`.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 8"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m08dem1",
            "archive_properties": {
                "folders": [
                    "m08dem1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 2 : StringBuffer",
            "description": "En Java, concaténer des `String` avec l\\'opérateur `+` implique la\r\ncréation et la desctruction successive d\\'un grand nombre de `String`.\r\nOn utilise en général un `StringBuffer`\r\n(<http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html>)\r\npour éviter ce problème. En utilisant l\\'API de la classe\r\n`StringBuffer`, implémentez le corps de la méthode `repeat()` qui permet\r\nde répéter un `String` un certain nombre de fois. Voici la signature de\r\ncette méthode :\r\n\r\n``` java\r\n/*\r\n * @pre -\r\n * @post retourne le String s répété n fois.\r\n *      Si s == null ou n == 0, retourne null.\r\n */\r\npublic static String repeat(String s, int n){\r\n    // À implémenter\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 8"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m08dem2",
            "archive_properties": {
                "folders": [
                    "m08dem2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* MyString - Constructeur",
            "description": "On vous donne l\\'interface `MyString` suivante:\r\n\r\n``` java\r\npublic interface MyString {\r\n  /*\r\n   * @pre -\r\n   * @post retourne la longueur de la chaîne de caractère\r\n   */\r\n  public int length();\r\n\r\n  /*\r\n   * @pre 0<=i<this.length()\r\n   * @post retourne le caractère à l'indice i de this\r\n   */\r\n  public char charAt(int i);\r\n\r\n  /*\r\n   * @pre s!=null\r\n   * @post retourne true si la chaine de caratères s est comprise dans la chaine this, false sinon\r\n   */\r\n  public boolean contains(MyString s);\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne la chaine de caractères qui est la concaténation entre this et le caractère c\r\n   */\r\n  public MyString concat(char c);\r\n}\r\n```\r\n\r\nAinsi que la classe suivante :\r\n\r\n``` java\r\npublic class StringTab implements MyString {\r\n  private char[] s;\r\n\r\n  /*\r\n   * @pre -\r\n   * @post construit une instance de la classe StringTab\r\n   */\r\n  public StringTab(char c) {\r\n      // A compléter\r\n      // Constructeur 1\r\n  }\r\n\r\n  public StringTab(char[] c) {\r\n      // A compléter\r\n      // Constructeur 2\r\n  }\r\n\r\n  public MyString concat(char c){\r\n      // Non fourni\r\n  }\r\n  public boolean contains(MyString s) {\r\n      // Non fourni\r\n  }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 8"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m08Q1",
            "archive_properties": {
                "folders": [
                    "m08Q1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* MyString - Concat",
            "description": "On vous donne l\\'interface `MyString` suivante :\r\n\r\n``` java\r\npublic interface MyString {\r\n  /*\r\n   * @pre -\r\n   * @post retourne la longueur de la chaîne de caractère\r\n   */\r\n  public int length();\r\n\r\n\r\n  /*\r\n   * @pre 0<=i<this.length()\r\n   * @post retourne le caractère à l'indice i de this\r\n   */\r\n  public char charAt(int i);\r\n\r\n  /*\r\n   * @pre s != null\r\n   * @post retourne true si la chaine de caratères s est comprise dans la chaine this, false sinon\r\n   */\r\n  public boolean contains(MyString s);\r\n\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne la chaine de caractères qui est la concaténation entre this et le caractère c\r\n   */\r\n   public MyString concat(char c);\r\n}\r\n```\r\n\r\nAinsi que la classe suivante :\r\n\r\n``` java\r\npublic class StringTab implements MyString {\r\n  private char[] s;\r\n\r\n  /*\r\n   * @pre -\r\n   * @post construit une instance de la classe StringTab\r\n   */\r\n  public StringTab(char c) {\r\n      // Non fourni\r\n  }\r\n  public StringTab(char[] c) {\r\n      // Non fourni\r\n  }\r\n  //Partie de code non fournie\r\n\r\n  public MyString concat(char c) {\r\n      // A compléter\r\n  }\r\n  public boolean contains(MyString s) {\r\n      // Non fourni\r\n  }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 8"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m08Q2",
            "archive_properties": {
                "folders": [
                    "m08Q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* MyString - Contains",
            "description": "On vous donne l\\'interface `MyString` suivante:\r\n\r\n``` java\r\npublic interface MyString {\r\n  /*\r\n   * @pre -\r\n   * @post retourne la longueur de la chaîne de caractère\r\n   */\r\n  public int length();\r\n\r\n  /*\r\n   * @pre 0<=i<this.length()\r\n   * @post retourne le caractère à l'indice i de this\r\n   */\r\n  public char charAt(int i);\r\n\r\n  /*\r\n   * @pre s != null\r\n   * @post retourne true si la chaine de caratères s est comprise dans la chaine this, false sinon\r\n   */\r\n  public boolean contains(MyString s);\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne la chaine de caractères qui est la concaténation entre this et le caractère c\r\n   */\r\n  public MyString concat(char c);\r\n}\r\n```\r\n\r\nAinsi que la classe suivante :\r\n\r\n``` java\r\npublic class StringTab implements MyString {\r\n  private char[] s;\r\n\r\n  /*\r\n   * @pre -\r\n   * @post construit une instance de la classe StringTab\r\n   */\r\n  public StringTab(char c) {\r\n      // Non fourni\r\n  }\r\n  public StringTab(char[] c) {\r\n      // Non fourni\r\n  }\r\n  //Partie de code non fournie\r\n\r\n  public MyString concat(char c) {\r\n      // Non fourni\r\n  }\r\n  public boolean contains(MyString s) {\r\n      // A compléter\r\n  }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 8"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m08Q3",
            "archive_properties": {
                "folders": [
                    "m08Q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* ByteString",
            "description": "On vous donne linterface `Byte` suivante :\r\n\r\n``` java\r\npublic interface Byte {\r\n  /*\r\n  * @pre i est un entier positif et 0<=i<=7\r\n  * @post On retourne la valeur du bit à la position i\r\n  */\r\n  public int getBit(int i);\r\n  /*\r\n  * @pre i est un entier positif  et 0<=i<=7\r\n  * @post le bit à la position i est mis à 1\r\n  */\r\n  public void setBit(int i);\r\n  /*\r\n  * @pre i est un entier positif  et 0<=i<=7\r\n  * @post le bit à la position i est remis à 0\r\n  */\r\n  public void resetBit(int i);\r\n  /*\r\n  * @pre -\r\n  * @post La chaîne est décallée d'un bit vers la droite\r\n  * (attention à la structure interne)\r\n  * Le bit de poids faible est mis à 0.\r\n  */\r\n  public void shiftLeft();\r\n  /*\r\n  * @pre -\r\n  * @post La chaîne est décallée d'un bit vers la gauche\r\n  * (attention à la structure interne)\r\n  * Le bit de poids fort prend la valeur du bit de poids faible avant rotation\r\n  */\r\n  public void rotateRight();\r\n  /*\r\n  * @pre -\r\n  * @post On effectue un ET logique entre chaque bit de b et b1\r\n  */\r\n  public Byte and(Byte b1);\r\n}\r\n```\r\n\r\nAinsi que la classe (à compléter) `ByteString` suivante :\r\n\r\n``` java\r\npublic class ByteString implements Byte {\r\n private StringBuilder b; // contient les caractères représentant le byte\r\n\r\n /*\r\n  * @pre -\r\n  * @post a construit un byte dont les huit bits sont mis à zéro\r\n  *       le bit de poids fort est en position 7 dans le StringBuilder\r\n  */\r\n public ByteString() {\r\n     //A COMPLETER\r\n }\r\n\r\n /*\r\n  * @pre s.length==8, s ne contient que des caractères 0 et 1\r\n  * @post a construit un byte dont la représentation naturelle en String est s\r\n  *       La représentation naturelle d'un byte sous la forme d'un String est\r\n  *       le bit de poids fort à gauche. Dans le StringBuilder, on stocke\r\n  *       le byte de façon à avoir le bit de poids faible (resp. fort)\r\n  *       en position 0 (resp. 7).\r\n  *\r\n  *       Exemple\r\n  *\r\n  *       5 en décimal correspond à 00000101 en binaire et\r\n  *       sera stocké dans le StringBuilder 10100000\r\n  */\r\n public ByteString(String s) {\r\n     //A COMPLETER\r\n }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne la représentation naturelle du nombre binaire\r\n   *       c'est-à-dire celle où le bit de poids fort est à gauche\r\n   */\r\n  public String toString() {\r\n      String r=\"\";\r\n      for(int i=b.length()-1; i>=0;i--) {\r\n          r=r+b.charAt(i);\r\n      }\r\n      return r;\r\n  }\r\n\r\n //A COMPLETER\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 8"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m08Q4",
            "archive_properties": {
                "folders": [
                    "m08Q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* ByteTab",
            "description": "On vous donne linterface `Byte` suivante :\r\n\r\n``` java\r\npublic interface Byte {\r\n  /*\r\n  * @pre i est un entier positif et 0<=i<=7\r\n  * @post On retourne la valeur du bit à la position i\r\n  */\r\n  public int getBit(int i);\r\n  /*\r\n  * @pre i est un entier positif  et 0<=i<=7\r\n  * @post le bit à la position i est mis à 1\r\n  */\r\n  public void setBit(int i);\r\n  /*\r\n  * @pre i est un entier positif  et 0<=i<=7\r\n  * @post le bit à la position i est remis à 0\r\n  */\r\n  public void resetBit(int i);\r\n  /*\r\n  * @pre -\r\n  * @post Le tableau est décallée d'un bit vers la droite\r\n  * (attention à la structure interne)\r\n  * Le bit de poids faible est mis à 0.\r\n  */\r\n  public void shiftLeft();\r\n  /*\r\n  * @pre -\r\n  * @post Le tableau est décallée d'un bit vers la gauche\r\n  * (attention à la structure interne)\r\n  * Le bit de poids fort prend la valeur du bit de poids faible avant rotation\r\n  */\r\n  public void rotateRight();\r\n  /*\r\n  * @pre -\r\n  * @post On effectue un ET logique entre chaque bit de b et b1\r\n  */\r\n  public Byte and(Byte b1);\r\n}\r\n```\r\n\r\nAinsi que la classe (à compléter) `ByteTab` suivante :\r\n\r\n``` java\r\npublic class ByteTab implements Byte {\r\n  private boolean b[];\r\n  // true signifie 1\r\n  // false signifie 0\r\n\r\n  /*\r\n   * @pre -\r\n   * @post a construit un Byte dont tous les bits sont mis à 0\r\n   */\r\n  public ByteTab() {\r\n      b=new boolean[8];\r\n      for(int i=0;i<b.length;i++) {\r\n          b[i]=false;\r\n      }\r\n  }\r\n\r\n  /*\r\n  * @pre s.length==8, s ne contient que des caractères 0 et 1\r\n  * @post a construit un byte dont la représentation naturelle en String est s\r\n  *       La représentation naturelle d'un byte sous la forme d'un String est\r\n  *       le bit de poids fort à gauche. Dans le tableau de char, on stocke\r\n  *       le byte de façon à avoir le bit de poids faible (resp. fort)\r\n  *       en position 0 (resp. 7).\r\n  *\r\n  *       Exemple\r\n  *\r\n  *       5 en décimal correspond à 00000101 en binaire et\r\n  *       sera stocké dans le tableau 10100000\r\n  */\r\n  public ByteTab(String s) {\r\n      b=new boolean[8];\r\n      for(int i=0;i<s.length();i++) {\r\n          if(s.charAt(i)=='0')\r\n              b[7-i]=false;\r\n          else\r\n              b[7-i]=true;\r\n      }\r\n  }\r\n\r\n  /*\r\n   * @pre -\r\n   * @post retourne la représentation naturelle du nombre binaire\r\n   *       c'est-à-dire celle où le bit de poids fort est à gauche\r\n   */\r\n  public String toString() {\r\n      String r=\"\";\r\n      for(int i=b.length-1;i>=0;i--) {\r\n          if(b[i])\r\n              r+='1';\r\n          else\r\n              r+='0';\r\n      }\r\n      return r;\r\n  }\r\n\r\n  //A compléter\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 8"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m08Q5",
            "archive_properties": {
                "folders": [
                    "m08Q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Vecteur",
            "description": "On vous donne l\\'interface `Stat` suivante :\r\n\r\n``` java\r\npublic interface Stat {\r\n    /*\r\n     * @pre -\r\n     * @post retourne le plus grand nombre de l'ensemble\r\n     */\r\n    public double max();\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le plus petit nombre de l'ensemble\r\n     */\r\n    public double min();\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne la moyenne des nombres présents dans l'ensemble\r\n     */\r\n    public double moyenne();\r\n}\r\n```\r\n\r\nAinsi que la classe (à compléter) `Vecteur` suivante :\r\n\r\n``` java\r\npublic class Vecteur implements Stat {\r\n    private double[] v;\r\n\r\n    /*\r\n     * @pre n > 0\r\n     * @post construit un vecteur contenant n réels\r\n     *\r\n     */\r\n    public Vecteur(int n) {\r\n        v=new double[n];\r\n    }\r\n\r\n    /*\r\n     * @pre 0 <= i < n\r\n     * @post stocke la valeur d en position i du vecteur\r\n     */\r\n    public void set(int i, double d){\r\n        v[i]=d;\r\n    }\r\n\r\n    /*\r\n     * @pre 0 <= i < n\r\n     * @post retourne la valeur se trouvant en position i du vecteur\r\n     */\r\n    public double get(int i) {\r\n        return v[i];\r\n    }\r\n\r\n    //A COMPLETER\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 8"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m08Q6",
            "archive_properties": {
                "folders": [
                    "m08Q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Matrice Carrée",
            "description": "On vous donne l\\'interface `Stat` suivante :\r\n\r\n``` java\r\npublic interface Stat {\r\n    /*\r\n     * @pre -\r\n     * @post retourne le plus grand nombre de l'ensemble\r\n     */\r\n    public double max();\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne le plus petit nombre de l'ensemble\r\n     */\r\n    public double min();\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne la moyenne des nombres présents dans l'ensemble\r\n     */\r\n    public double moyenne();\r\n}\r\n```\r\n\r\nAinsi que la classe (à compléter) `MatriceCarree` suivante :\r\n\r\n``` java\r\npublic class MatriceCarree implements Stat {\r\n\r\n    public double[][] m;\r\n\r\n    /*\r\n     * @pre n > 0\r\n     * @post a construit une matrice carrée de taille n*n\r\n     */\r\n    public MatriceCarree(int n) {\r\n        m = new double[n][n];\r\n    }\r\n\r\n    /*\r\n     * @pre 0 <= i < n, 0 <= j < n\r\n     * @post stocke la valeur d en position i,j de la matrice\r\n     */\r\n    public void set(int i, int j, double d) {\r\n        m[i][j] = d;\r\n    }\r\n\r\n    /*\r\n     * @pre 0 <= i < n, 0 <= j < n\r\n     * @post retourne la valeur se trouvant en position i,j de la matrice\r\n     */\r\n    public double get(int i, int j){\r\n        return m[i][j];\r\n    }\r\n\r\n    //A COMPLETER\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 8"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m08Q7",
            "archive_properties": {
                "folders": [
                    "m08Q7"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour\r\nla Mission 8.\r\n\r\nVous attendons une archive **.zip** contenant uniquement les fichiers :\r\n\r\n-   Square.java\r\n-   Rectangle.java\r\n-   DrawPanel.java\r\n-   Equilateral.java\r\n-   MyShape.java\r\n-   Segment.java\r\n-   Shape.java\r\n-   Triangle.java\r\n-   README.txt\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 8"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m08real",
            "archive_properties": {
                "folders": [
                    "m08real"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "QCM",
            "description": "Mission 8. Interfaces\r\n=====================\r\n\r\nCes questions supposent que vous avez lu les sections suivantes du livre\r\nde référence JavaNotes\\_\r\n\r\n> -   \r\n>\r\n>     [4.5 : APIs, Packages, and Javadoc]{.title-ref}\\_\r\n>\r\n>     :   -   [4.5.2 : Toolboxes]{.title-ref}\\_\r\n>         -   [4.5.3 : Java\\'s Standard Packages]{.title-ref}\\_\r\n>         -   [4.5.4 : Using Classes from Packages]{.title-ref}\\_\r\n>         -   [4.5.4 : Javadoc]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [5.3 : Programming with Objects]{.title-ref}\\_\r\n>\r\n>     :   -   [5.3.1 : Some Built-in Classes]{.title-ref}\\_\r\n>         -   [5.3.2 : Wrapper Classes and Autoboxing]{.title-ref}\\_\r\n>         -   [5.3.3 : The class \\\"Object\\\"]{.title-ref}\\_\r\n>         -   [5.3.4 : Object-oriented Analysis and\r\n>             Design]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [5.5 : Inheritance, Polymorphism, and Abstract Classes]{.title-ref}\\_\r\n>\r\n>     :   -   [5.5.5 : Abstract Classes]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [5.7 : Interfaces, Nested Classes, and Other Details]{.title-ref}\\_\r\n>\r\n>     :   -   [5.7.1 : Interfaces]{.title-ref}\\_\r\n>         -   [5.7.2 : Nested Classes]{.title-ref}\\_\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 8"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m08_qcm",
            "archive_properties": {
                "folders": [
                    "m08_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 1: Integer.compareTo",
            "description": "La classe `Integer` dispose d\\'une méthode `compareTo()` dont voici la\r\nsignature :\r\n\r\n``` java\r\n/**\r\n * Compares two Integer objects numerically.\r\n * @pre anotherInteger!=null\r\n * @post returns the value 0 if this Integer is equal to\r\n *        the    argument Integer; a value less than 0 if this\r\n *        Integer is numerically less than the argument Integer;\r\n *        and a value greater than 0 if this Integer is\r\n *         numerically\r\n *        greater than the argument Integer (signed comparison).\r\n */\r\n public int compareTo(Integer anotherInteger)\r\n```\r\n\r\nComment feriez-vous pour implémenter une méthode similaire, mais de\r\nsignature :\r\n\r\n``` java\r\npublic int compareTo(Object o)\r\n```\r\n\r\n?\r\n\r\nÉcrivez le corps de cette nouvelle méthode qui prend un argument de type\r\n`Object` au lieu d\\'un argument de type `Integer`. Écrivez la réponse en\r\nune seule ligne. Notez que l\\'argument `o` sera toujours du type\r\n`Integer`. Pensez à utiliser des méthodes qui sont déjà à votre\r\ndisposition.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09dem1",
            "archive_properties": {
                "folders": [
                    "m09dem1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 2 : la méthode premierPrenom()",
            "description": "Un étudiant nommé Jean-Complexe vient vers vous et vous dit que lui et\r\nses amis détestent leur prénom car leur prénom est composé, or, ils\r\ntrouvent cela trop long à prononcer. Ils désireraient ne garder que la\r\npremière partie de leur prénom.\r\n\r\nComme la fin d\\'année approche à grands pas cette histoire vous donne\r\nune idée pour vous entraîner pour l\\'examen de java et vous décidez\r\nd\\'implémenter une méthode qui prend un nom de fichier comme argument.\r\nCe fichier contient sur chaque ligne un prénom composé (les deux parties\r\ndu prénom sont séparées par le caractère `'-'`).\r\n\r\nLe but de votre méthode est de lire chaque ligne du fichier et, pour\r\nchaque ligne, afficher sur la sortie standard uniquement la première\r\npartie de ce nom composé, avec un résultat par ligne. En regardant\r\nl\\'API Java sur les `String`\r\n(<http://docs.oracle.com/javase/7/docs/api/java/lang/String.html>), vous\r\nvous êtes rendu compte que la méthode `split` vous sera d\\'une grande\r\naide.\r\n\r\nBien entendu, vous savez que lire dans des fichier en Java peut\r\nprovoquer des exceptions et votre méthode s\\'arrangera pour les contenir\r\net retourner la valeur `-1` lorsque l\\'une d\\'entre elles apparaîtra.\r\n\r\nPrenons un exemple. Si le contenu du fichier est ci-dessous :\r\n\r\n    Saint-François\r\n    Jean-Pol\r\n    Johnny-Hallyday\r\n\r\nVotre programme affichera ces lignes sur la sortie standard\r\n(`System.out`):\r\n\r\n    Saint\r\n    Jean\r\n    Johnny\r\n\r\nAprès avoir mûrement réfléchi, vous avez décidé de la signature de votre\r\nméthode et il ne vous reste plus qu\\'à l\\'implémenter :\r\n\r\n``` java\r\n/**\r\n *     @pre     filename est le nom d'un fichier.\r\n *              si le fichier désigné par filename est lisible,\r\n *              chaque ligne du fichier contient un String en deux\r\n *              parties, séparées par un \"-\".\r\n *\r\n *     @post    imprime sur la sortie standard la première partie de\r\n *              chaque ligne du fichier désigné par filename, un\r\n *              résultat par ligne.\r\n *              Retourne -1 si une exception a été lancée.\r\n */\r\npublic static int premierPrenom(String filename){\r\n    // À implémenter\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09dem2",
            "archive_properties": {
                "folders": [
                    "m09dem2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Fraction",
            "description": "Un étudiant a écrit la classe suivante, mais il lui manque une méthode\r\npour qu\\'elle puisse être compilée. Pourriez-vous implémenter cette\r\nméthode ?\r\n\r\n``` java\r\npublic class Fraction implements Comparable {\r\n\r\n      private int num; // numerateur\r\n      private int den; // denominateur\r\n\r\n      /**\r\n       * @pre num >= 0, den > 0\r\n       * @post construit la fraction num/den\r\n       */\r\n      public Fraction(int num, int den) {\r\n          this.num=num;\r\n          this.den=den;\r\n      }\r\n\r\n      /*\r\n       * @pre -\r\n       * @post retourne le dénominateur de la fraction\r\n       */\r\n      public int getDen() {\r\n          return this.den;\r\n      }\r\n\r\n      /*\r\n       * @pre -\r\n       * @post retourne le numérateur de la fraction\r\n       */\r\n      public int getNum() {\r\n          return this.num;\r\n      }\r\n\r\n      // Insérez le code manquant\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09Q1",
            "archive_properties": {
                "folders": [
                    "m09Q1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Employe",
            "description": "Un étudiant a écrit la classe suivante, mais il lui manque une méthode\r\npour qu\\'elle puisse être compilée. Pourriez-vous implémenter cette\r\nméthode ?\r\n\r\n``` java\r\npublic class Employe implements Comparable {\r\n   private String nom;\r\n   private String prenom;\r\n   private double salaire;\r\n\r\n   /*\r\n    * Constructeur\r\n    * @pre nom != null, prenom != null, salaire > 0\r\n    * @post a construit une instance de la classe Employe avec nom et salaire\r\n    */\r\n   public Employe (String nom, String prenom, double salaire){\r\n      this.nom = nom;\r\n      this.prenom=prenom;\r\n      this.salaire = salaire;\r\n   }\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne le nom de l'employé this\r\n    */\r\n   public String getNom(){\r\n       return nom ;\r\n   }\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne le prénom de l'employé this\r\n    */\r\n   public String getPrenom() {\r\n       return prenom;\r\n   }\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne le salaire de l'employé this\r\n    */\r\n   public double getSalaire() {\r\n       return salaire;\r\n   }\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne un String décrivant l'employé this\r\n    */\r\n   public String toString() {\r\n       return getPrenom()+\" \"+getNom()+\" (\"+getSalaire()+\")\";\r\n   }\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne true si this et other correspondent au\r\n    *       même employé (même nom, même prénom, même salaire)\r\n    */\r\n   public boolean equals(Object other) {\r\n       if (other instanceof Employe) {\r\n            Employe e = (Employe) other;\r\n            return (this.getNom().equals(e.getNom())\r\n                    && (this.getPrenom().equals(e.getPrenom()))\r\n                    && (this.getSalaire()==e.getSalaire()));\r\n        } else {\r\n            return false;\r\n        }\r\n   }\r\n\r\n   /*\r\n    * @pre -\r\n    * @post retourne un entier négatif si l'employé this\r\n    *        est inférieur dans l'ordre alphabétique à other.\r\n    *      0 si this et other correspondent au même employé\r\n    *        (même nom, même prénom, même salaire)\r\n    *      Un entier positif si l'employé this est supérieur\r\n    *        dans l'ordre alphabétique à other.\r\n    *      Pour tester l'ordre alphabétique, on regarde d'abord\r\n    *        le nom, ensuite le prénom et enfin le salaire\r\n    *        (le salaire inférieur étant considéré comme avant\r\n    *            un salaire supérieur)\r\n    */\r\n   //Insérez ici le code manquant\r\n}\r\n```\r\n\r\nPour rappel, la documentation de l\\'interface Comparable est disponible\r\nvia\r\n<https://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html>\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09Q2",
            "archive_properties": {
                "folders": [
                    "m09Q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Fichiers",
            "description": "La classe `Fichiers` est une classe permettant de réaliser quelques\r\ntâches sur un fichier. On vous demande ici d\\'écrire la méthodes\r\n`countLines` dont les spécifications et la signature sont :\r\n\r\n``` java\r\n/*\r\n * @pre -\r\n * @post ouvre le fichier filename et retourne le nombre\r\n *       de lignes présentes dans ce fichier.\r\n *       Retourne -1 en cas d'erreur de lecture ou d'accès au fichier\r\n */\r\n  public int countLines(String fileName);\r\n```\r\n\r\nPour lire le fichier, nous vous demandons d\\'utilisez un\r\n`BufferedReader`.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09Q3",
            "archive_properties": {
                "folders": [
                    "m09Q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Fichiers : Contains",
            "description": "La classe `Fichiers` est une classe permettant de réaliser quelques\r\ntâches sur un fichier. On vous demande ici d\\'écrire la méthodes\r\n`contains` dont les spécifications et la signature sont :\r\n\r\n``` java\r\n/*\r\n * @pre fileName != null\r\n * @post retourne true si le fichier de nom fileName contient\r\n *       au moins une occurence de la chaîne s,\r\n *       false sinon et en cas d'erreur également\r\n */\r\n public boolean contains(String s, String fileName)\r\n```\r\n\r\nOn vous demande d\\'utiliser un `BufferedReader` pour lire le fichier\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09Q4",
            "archive_properties": {
                "folders": [
                    "m09Q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Fichiers:Accessible",
            "description": "La classe `Fichiers` est une classe permettant de réaliser quelques\r\ntâches sur un fichier. On vous demande ici d\\'écrire la méthodes\r\n`accessible` dont les spécifications et la signature sont :\r\n\r\n``` java\r\n/*\r\n * @pre -\r\n * @post retourne true si le fichier de nom fileName est accessible (c'est-à-dire qu'il peut être ouvert)\r\n *       false sinon\r\n */\r\n public static boolean accessible(String fileName)\r\n```\r\n\r\nOn vous demande d\\'utiliser un `BufferedReader` si vous devez lire le\r\nfichier.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09Q5",
            "archive_properties": {
                "folders": [
                    "m09Q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Fichiers:saveVector",
            "description": "La classe `Fichiers` est une classe permettant de réaliser quelques\r\ntâches sur un fichier. On vous demande ici d\\'écrire la méthodes\r\n`saveVector` dont les spécifications et la signature sont :\r\n\r\n``` java\r\n/*\r\n * @pre v!=null, fileName!=null\r\n * @post sauve dans le fichier dont le nom est fileName le contenu du vecteur v\r\n *       le format du fichier est :\r\n *     première ligne : nombre d'éléments du vecteur\r\n *     lignes suivantes : un élément par ligne en commençant par v[0] ...\r\n */\r\n public void saveVector(int [] v, String fileName)\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09Q6",
            "archive_properties": {
                "folders": [
                    "m09Q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Fichiers:readVector",
            "description": "La classe `Fichiers` est une classe permettant de réaliser quelques\r\ntâches sur un fichier. On vous demande ici d\\'écrire la méthodes\r\n`readVector` dont les spécifications et la signature sont :\r\n\r\n``` java\r\n/*\r\n * @pre fileName!=null\r\n * @post lit dans le fichier dont le nom est fileName le contenu du vecteur v\r\n *       le format du fichier est :\r\n *     première ligne : nombre d'éléments du vecteur\r\n *     lignes suivantes : un élément par ligne en commençant par v[0] ...\r\n *\r\n *     En cas d'erreur (exception, fichier non lisible, nombre incorrect d'éléments\r\n *     dans le fichier, format de nombre incorrect, ...), retourne null\r\n */\r\n public  int[] readVector(String fileName)\r\n```\r\n\r\nPour lire le fichier, nous vous demandons d\\'utiliser un\r\n`BufferedReader`.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09Q7",
            "archive_properties": {
                "folders": [
                    "m09Q7"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour\r\nla Mission 9.\r\n\r\nVous attendons une archive **.zip** contenant uniquement les fichiers :\r\n\r\n-   Dico.java\r\n-   Dictionary.java\r\n-   Word.java\r\n-   README.txt\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Bastien BODART",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09real",
            "archive_properties": {
                "folders": [
                    "m09real"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Bilan Final",
            "description": "Vous devez implémenter une méthode `getMax` dont le but est de\r\nretrouver, dans un fichier, la ligne contenant le nombre flottant avec\r\nla plus grande valeur. Si un tel nombre n\\'existe pas, la méthode doit\r\nrenvoyer -∞. En cas d\\'erreur lors de la lecture du fichier, le\r\nprogramme doit se quitter et afficher exactement `ERREUR` sur\r\n`System.err`.\r\n\r\nVoici la spécification préçise de la méthode :\r\n\r\n``` java\r\n/**\r\n * @pre filename != null, filename est le nom d’un fichier de texte.\r\n *      Chaque ligne valide du fichier représente un seul nombre réel.\r\n * @post - La valeur renvoyée contient le nombre flottant avec la plus grande valeur\r\n *         parmi tous les nombres flottants valides du fichier.\r\n *         S'il n'y a aucun nombre valide, la valeur renvoyée contient -∞.\r\n *       - Si le fichier n’existe pas ou si une erreur d'entrée/sortie survient,\r\n *         le programme se termine en affichant ERREUR System.err.\r\n *\r\n *       Par exemple, la méthode renvoie 10.0 pour le contenu de fichier suivant :\r\n *          0.345.67\r\n *          hello\r\n *          -543.0\r\n *          500.0 1000.0 2000.0\r\n *          10.0\r\n *          3.1416\r\n */\r\npublic static double getMax (String filename)\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Sébastien Combéfis",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Naitali Brandon",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09_bf",
            "archive_properties": {
                "folders": [
                    "m09_bf"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "QCM",
            "description": "Mission 9. Fichiers\r\n===================\r\n\r\nCes questions supposent que vous avez lu les sections suivantes du livre\r\nde référence JavaNotes\\_\r\n\r\n> -   \r\n>\r\n>     [3.7 : Introduction to Exceptions and try..catch]{.title-ref}\\_\r\n>\r\n>     :   -   [3.7.1 : Exceptions]{.title-ref}\\_\r\n>         -   [3.7.2 : try..catch]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [8.1 : Introduction to Correctness and Robustness]{.title-ref}\\_\r\n>\r\n>     :   -   [8.1.1 : Horror Stories]{.title-ref}\\_\r\n>         -   [8.1.2 : Java to the Rescue]{.title-ref}\\_\r\n>         -   [8.1.3 : Problems Remain in Java]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [8.3 : Exceptions and try..catch]{.title-ref}\\_\r\n>\r\n>     :   -   [8.3.1 : Exceptions and Exception Classes]{.title-ref}\\_\r\n>         -   [8.3.2 : The try Statement]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [11.1 : Streams, Readers, and Writers]{.title-ref}\\_\r\n>\r\n>     :   -   [11.1.1 : Character and Byte Streams]{.title-ref}\\_\r\n>         -   [11.1.2 : PrintWriter]{.title-ref}\\_\r\n>         -   [11.1.3 : Data Streams]{.title-ref}\\_\r\n>         -   [11.1.4 : Reading Text]{.title-ref}\\_\r\n>         -   [11.1.5 : The Scanner Class]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [11.2 : Files]{.title-ref}\\_\r\n>\r\n>     :   -   [11.2.1 : Reading and Writing Files]{.title-ref}\\_\r\n\r\nainsi que l\\'API de la classe `java.util.Arrays`\\_.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 9"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m09_qcm",
            "archive_properties": {
                "folders": [
                    "m09_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 1 : Traitement des exceptions",
            "description": "En Java, les exceptions sont un concept clé qui vous permet de gérer le\r\ncomportement de votre programme dans des cas extraordinaires. Voici la\r\nclasse `RevisedRatio` :\r\n\r\n``` java\r\npublic static class RevisedRatio {\r\n    /**\r\n     * @pre n1 et n2 sont des chaînes de caractères != null\r\n     * @post après conversion de n1 et n2 en entier, retourne n1/n2, peut lancer une NumberFormatException si un des strings n'est pas un nombre\r\n     */\r\n    public static int divise(String n1, String n2) {\r\n        int n = Integer.parseInt(n1);\r\n        int d = Integer.parseInt(n2);\r\n        return doDivise(n, d);\r\n    }\r\n\r\n    /**\r\n     * @pre  n et d sont des entiers\r\n     * @post retourne n/d si d!=0, sinon throws AritmeticException\r\n     */\r\n    public static int doDivise(int n, int d) {\r\n        return (n/d);\r\n    }\r\n\r\n    /**\r\n     * @pre  args contient un tableau de String passés en ligne\r\n     *         de commande\r\n     * @post si args contient seulement un String, affiche un\r\n     *         message d'erreur sinon affiche le résultat de la\r\n     *         division de args[0] par args[i] pour tout\r\n     *         0 < i < args.length, un résultat par ligne\r\n     */\r\n    public static int div(String[] args) {\r\n        if(args.length < 2) {\r\n            System.out.println(\"Erreur : la ligne de commande doit être :\");\r\n            System.out.println(\"java ratio num1 num2 num3... \");\r\n            System.exit(-1);\r\n        }\r\n        else {\r\n            for(int i=1; i<args.length;i++) {\r\n                /*1*/    // À réécrire\r\n                System.out.println(args[0] + \"/\" + args[i] +\r\n                    \" = \" + divise(args[0], args[i]));\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public static void main(String[] args){\r\n        if(div(args) != -1){\r\n            System.out.println(\"Tout s'est bien passé\");\r\n            System.exit(0);\r\n        }\r\n        else{\r\n            System.out.println(\"Veuillez donner des arguments \"\r\n                                +\"corrects la prochaine fois.\");\r\n            System.exit(-1);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nLa méthode `div` récupère les arguments de la méthode `main` qui\r\nl\\'appelle et traite la division de `args[0]` par `args[i]` pour tout 0\r\n\\< i \\< args.length. La méthode affiche la réponse sous la forme\r\n\\\"`args[0]/args[i] = reponse`\\\". Par exemple, quand on l\\'appelle avec\r\nles arguments `\"20\"`, `\"5\"` et `\"10\"`, la méthode affiche sur la sortie\r\nstandard :\r\n\r\n``` java\r\n20/5 = 4\r\n20/10 = 2\r\n```\r\n\r\nPour le moment, l\\'appel à cette méthode avec de mauvais arguments\r\npourrait faire crasher le programme en lançant une\r\n`NumberFormatException` ou une `ArithmeticException`.\r\n\r\nRéécrivez entièrement l\\'intérieur de la boucle `for` de manière à ce\r\nque lorsqu\\'une de ces deux exceptions est lancée, la méthode affiche le\r\nmessage d\\'erreur `Vous ne pouvez pas diviser par 0.` pour la division\r\npar 0 et le message\r\n`La chaîne de caractères passée à parseInt() ne contient pas que des chiffres.`\r\npour l\\'erreur de parsing, sur la sortie d\\'erreur standard et retourne\r\ndirectement la valeur `-2`. Sur la sortie d\\'erreur standard, on doit\r\npouvoir voir par exemple, en cas de NumberFormatException:\r\n\r\n``` console\r\nLa chaîne de caractères passée à parseInt() ne contient pas que des chiffres.\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 0"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m10dem1",
            "archive_properties": {
                "folders": [
                    "m10dem1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de démarrage 2 : Écriture dans des fichiers",
            "description": "Écrivez le corps de la méthode `write`, qui prend en argument un entier\r\n`n` et un nom de fichier `filename` et qui écrit les `n` premiers\r\nentiers strictement positifs dans un fichier dont le nom est contenu\r\ndans `filename`, en affichant un seul nombre par ligne. Voici la\r\nsignature de la méthode `write` :\r\n\r\n``` java\r\n/**\r\n *    @pre    n>0, filename != null\r\n *    @post    crée le fichier dont le nom est filename et écrit dans\r\n *            ce fichier les n premiers entiers strictement positifs,\r\n *            un entier par ligne.\r\n *            En cas d'erreur d'I/O, retourne -1.\r\n *            Retourne 0 si tout s'est bien déroulé.\r\n */\r\npublic static int write(int n, String filename)\r\n```\r\n\r\nFaites bien attention à gérer les erreurs d\\'I/O.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 0"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m10dem2",
            "archive_properties": {
                "folders": [
                    "m10dem2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Fraction",
            "description": "Un étudiant a écrit la classe suivante, mais il lui manque une méthode\r\npour qu\\'elle puisse être compilée. Pourriez-vous implémenter cette\r\nméthode ?\r\n\r\n``` java\r\npublic class Fraction implements Comparable<Fraction> {\r\n      private int num; // numerateur\r\n      private int den; // denominateur\r\n\r\n      /**\r\n       * @pre num >= 0, den > 0\r\n       * @post construit la fraction num/den\r\n       */\r\n      public Fraction(int num, int den) {\r\n          this.num = num;\r\n          this.den = den;\r\n      }\r\n\r\n      /*\r\n       * @pre -\r\n       * @post retourne le dénominateur de la fraction\r\n       */\r\n      public int getDen() {\r\n          return this.den;\r\n      }\r\n\r\n      /*\r\n       * @pre -\r\n       * @post retourne le numérateur de la fraction\r\n       */\r\n      public int getNum() {\r\n          return this.num;\r\n      }\r\n\r\n      // Insérez le code manquant\r\n}\r\n```\r\n\r\nTel qu\\'il est écrit, ce code ne compile pas. Il manque une méthode.\r\nPourriez-vous l\\'ajouter (signature et corps) ?\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 0"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m10Q1",
            "archive_properties": {
                "folders": [
                    "m10Q1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Fraction - Constructeur",
            "description": "Revenons à la classe Fraction. Pour faciliter la création de fractions\r\nsur base de données lues depuis le clavier ou dans un fichier, on vous\r\ndemande d\\'ajouter à cette classe un constructeur qui prend comme\r\nargument un String. Si ce String a comme format x/y avec x et y qui sont\r\ndes entiers, il crée l\\'instance de la classe Fraction ayant x comme\r\nnumérateur et y comme dénominateur. Pour les cas de String null / qui ne\r\nrespectent pas le format demandé/ qui génère une division par zéro,\r\nlancez une NumberFormatException.\r\n\r\n``` java\r\npublic class Fraction implements Comparable<Fraction> {\r\n  private int num; // numerateur\r\n  private int den; // denominateur\r\n\r\n  /**\r\n  * @pre den>0\r\n  * @post construit la fraction num/den\r\n  */\r\n  public Fraction(int num, int den) {\r\n      this.num=num;\r\n      this.den=den;\r\n  }\r\n\r\n  /*\r\n  * @pre -\r\n  * @post construit une fraction sur base d'une chaine caractère de la\r\n  * forme num/den  où num est un entier et den un entier non nul\r\n  * lance une exception lorsque la chaîne de caractères passée\r\n  * en argument ne respecte pas ce format ou que le dénominateur est nul\r\n  */\r\n  public Fraction(String s) throws NumberFormatException {\r\n      // à compléter\r\n  }\r\n\r\n  /*\r\n  * @pre -\r\n  * @post retourne le dénominateur de la fraction\r\n  */\r\n  public int getDen() {\r\n      return this.den;\r\n  }\r\n\r\n  /*\r\n  * @pre -\r\n  * @post retourne le numérateur de la fraction\r\n  */\r\n  public int getNum() {\r\n      return this.num;\r\n  }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 0"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m10Q2",
            "archive_properties": {
                "folders": [
                    "m10Q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Student - Constructeur",
            "description": "Dans la classe `Student`, implémentez le second `constructeur` qui prend\r\ncomme argument un `String`.\r\n\r\n``` java\r\n/**\r\n * Une classe décrivant un étudiant\r\n *\r\n * @author O. Bonaventure\r\n * @version Novembre 2016\r\n */\r\nimport java.util.Arrays;\r\npublic class Student {\r\n    public String nom;\r\n    public double[] cotes;\r\n\r\n    /**\r\n     * @pre nom != null, cotes != null\r\n     * @post a construit une instance de la classe Student\r\n     *       lance une exception StudentFormatException si une des\r\n     *       cotes est invalide (non comprise entre 0 et 20)\r\n     */\r\n    public Student(String nom, double[] cotes) throws StudentFormatException {\r\n        //code non fourni\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post construit une instance de la classe Student\r\n     *      en supposant que le String s a le format suivant\r\n     *      nom; 2.5, 3.0, 6.7\r\n     *      Le nom est suivi de ; et une virgule sépare les cotes.\r\n     *       Celles-ci doivent être entre 0 et 20\r\n     *       Il faut au moins une cote\r\n     *       Si le format n'est pas respecté, le constructeur\r\n     *       lance une StudentFormatException\r\n     *       avec comme argument le String passé\r\n     */\r\n    public Student(String s) throws StudentFormatException {\r\n        // Question\r\n    }\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 0"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m10Q3",
            "archive_properties": {
                "folders": [
                    "m10Q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* AList",
            "description": "La classe AList contient une implémentation simple d\\'un ArrayList sur\r\nbase d\\'un tableau dont la taille augmente au fur et à mesure que l\\'on\r\nmodifie la liste. Ecrivez le code des principales méthodes de cette\r\nclasse:\r\n\r\n``` java\r\n/**\r\n * Une implémentation partielle d'une ArrayList en utilisant un tableau\r\n *\r\n * Cette implémentation supporte les méthodes suivantes :\r\n *\r\n * Constructeur : crée une liste vide  •  AList()\r\n * Insère d’un élément à la position index  •  void add (int index, Object obj)\r\n * Renvoie l’objet en position index  •  Object get (int index)\r\n * Remplace l’élément en position index  •  void set (int index, Object obj)\r\n * Retire et renvoie l’élément en position index  •  Object remove (int index)\r\n * Renvoie true si obj appartient à la liste  •  boolean contains (Object obj)\r\n *\r\n * @author O; Bonaventure\r\n * @version Novembre 2016\r\n */\r\npublic class AList {\r\n    private Object[] l;\r\n\r\n    public static final int INIT_SIZE = 5; // taille initiale d'un AList\r\n\r\n    /*\r\n     * @pre -\r\n     * @post a créé une AList initialement vide\r\n     *       permettant de stocker 5 références\r\n     */\r\n    public AList() {\r\n        l = new Object[INIT_SIZE];\r\n    }\r\n\r\n    /*\r\n     * @pre o != null\r\n     * @post retourne true si l'objet o se trouve dans l'AList\r\n     */\r\n    public boolean contains(Object o) {\r\n        // Question\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post retourne l'objet se trouvant à la position index\r\n     *       et null si rien n'est stocké à cette position\r\n     *       ou si index >= length\r\n     */\r\n    public Object get(int index) {\r\n        // Question\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @retourne la taille actuelle de la liste\r\n     */\r\n    public int length() {\r\n        return l.length;\r\n    }\r\n\r\n    /*\r\n     * @pre 0 <= index < this.length()\r\n     * @post remplace la référence se trouvant à l'index dans\r\n     *       la liste par la référence à o\r\n     */\r\n    public void set(int index, Object o) {\r\n        // Question\r\n    }\r\n\r\n    /*\r\n     * @pre -\r\n     * @post remplace l'objet o dans la liste en position index\r\n     *       Si index >= length, augmente d'abord la taille\r\n     *       de la liste en créant un nouveau tableau et\r\n     *       en y recopiant toutes les références de la liste\r\n     *       this avant de remplacer l'objet o à l'indice index\r\n     */\r\n    public void add(int index, Object o) {\r\n        // Question\r\n    }\r\n}\r\n```\r\n\r\nVous pouvez tester vos méthodes individuellement.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Brandon NAITALI",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 0"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m10Q4",
            "archive_properties": {
                "folders": [
                    "m10Q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Vecteur",
            "description": "On vous fournit une classe `Vector` contenant uniquement une méthode\r\n`loadVector` prenant en paramètre un `String` appelé filename. La\r\nméthode à les spécifications suivantes:\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n *\r\n * @author ogoletti\r\n * @version 29/11/16\r\n */\r\npublic class Vector {\r\n\r\n    /**\r\n     * @pre filename != null\r\n     * @post lit dans le fichier dont le nom est fileName le     contenu du vecteur v\r\n     *       le format du fichier est : un élément par ligne     en commençant par v[0] ...\r\n     *     Les lignes à un format incorrect sont ignorées.\r\n     *     En cas d'erreur d'entrée/sortie (exception,     fichier non lisible,\r\n     *     nombre incorrect d'éléments ) retourne null\r\n     */\r\n    public static double[] loadVector(String filename) {\r\n            // Question\r\n        }\r\n}\r\n```\r\n\r\nOn vous demande d\\'utiliser `BufferedReader` pour répondre à cette\r\nquestion.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 0"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m10Q5",
            "archive_properties": {
                "folders": [
                    "m10Q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Matrix",
            "description": "On vous fournit une classe `Matrix` contenant uniquement une méthode\r\n`loadMatrix` prenant en paramètre un `String` appelé filename. La\r\nméthode à les spécifications suivantes:\r\n\r\n``` java\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.FileNotFoundException;\r\n\r\npublic class Matrix {\r\n    /**\r\n     * @pre     filename != null\r\n     * @post    lit dans le fichier dont le nom est fileName le contenu d'une matrice mxn\r\n     *          le format du fichier est :\r\n     *          première ligne : l'entier m\r\n     *          deuxième ligne : l'entier n\r\n     *          lignes suivantes : une chaîne du format i,j val\r\n     *                             où 0<=i<m et 0<=j<n et val est un réel\r\n     *          En cas d'erreur d'entrée/sortie (exception, fichier non lisible,\r\n     *          nombre incorrect d'éléments, mauvais format) retourne null\r\n     */\r\n    public static double[][] loadMatrix(String filename) {\r\n        //A compléter\r\n    }\r\n}\r\n```\r\n\r\nOn vous demande d\\'utiliser `BufferedReader` pour répondre à cette\r\nquestion.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 0"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m10Q6",
            "archive_properties": {
                "folders": [
                    "m10Q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Vous soumettrez votre soumission de la phase de réalisation de la\r\nMission 10 soit ici, soit directement via BlueJ.\r\n\r\nVeuillez soumettre une archive **zip** contenant uniquement les fichiers\r\n**.java** utilisés pour votre mission, ainsi qu\\'n fichier nommé\r\n\\\"README.TXT\\\".\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 0"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m10real",
            "archive_properties": {
                "folders": [
                    "m10real"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "QCM",
            "description": "Mission 10. ArrayList\r\n=====================\r\n\r\nCes questions supposent que vous avez lu les sections suivantes du livre\r\nde référence JavaNotes\\_\r\n\r\n> -   \r\n>\r\n>     [8.3 : Exceptions and try..catch]{.title-ref}\\_\r\n>\r\n>     :   -   [8.3.3 : Throwing Exceptions]{.title-ref}\\_\r\n>         -   [8.3.4 : Mandatory Exception Handling]{.title-ref}\\_\r\n>         -   [8.3.5 : Programming with Exceptions]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [10.1 : Generic Programming]{.title-ref}\\_\r\n>\r\n>     :   -   [10.1.3 : Generic Programming in Java]{.title-ref}\\_\r\n>         -   [10.1.4 : The Java Collection Framework]{.title-ref}\\_\r\n>         -   [10.1.5 : Iterators and for-each Loops]{.title-ref}\\_\r\n>         -   [10.1.6 : Equality and Comparison]{.title-ref}\\_\r\n>         -   [10.1.7 : Generics and Wrapper Classes]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [10.2 : Lists and Sets]{.title-ref}\\_\r\n>\r\n>     :   -   [10.2.1 : ArrayList and LinkedList]{.title-ref}\\_\r\n>         -   [10.2.2 : Sorting]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [11.4 : Networking]{.title-ref}\\_\r\n>\r\n>     :   -   [11.4.1 : URLs and URLConnections]{.title-ref}\\_\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 0"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m10_qcm",
            "archive_properties": {
                "folders": [
                    "m10_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Démarrage 1 : JUnit (partie1)",
            "description": "Dans la phase de réalisation, vous devez utiliser des méthodes provenant\r\ndu framework de test **JUnit** afin de tester votre implémentation dans\r\nBlueJ. L\\'objectif de cet exercice est d\\'utiliser les méthodes de JUnit\r\npour vérifier le bon fonctionnement de la classe `DList`. ci-après :\r\n\r\nIl vous est proposé une classe de test comme exemple dans laquelle les\r\nassertions JUnit ne sont que partiellement écrites. Lisez attentivement\r\nle code de cette classe afin de remplacer les blocs de commentaires du\r\ntype `/*(numero)???*/` par le code qui convient. Si cela est fait\r\ncorrectement, JUnit pourra détecter l\\'erreur contenue dans\r\nl\\'implémentation de la classe `DList`.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Munyabarenzi Clémentine Zaninka",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m11dem11",
            "archive_properties": {
                "folders": [
                    "m11dem11"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Démarrage 2 : JUnit (partie 2)",
            "description": "Suite de la question de démarrage 1.\r\n\r\nLa classe sous test:\r\n\r\nLa partie de la classe test à compléter:\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Munyabarenzi Clémentine Zaninka",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m11dem12",
            "archive_properties": {
                "folders": [
                    "m11dem12"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question de Démarrage 3 : JUnit (partie3) une DList correcte",
            "description": "A la suite de l\\'écriture de la classe `DListTest` faite aux questions\r\nprécédentes, vous avez réussi à découvrir à l\\'aide de JUnit l\\'erreur\r\ncontenue dans la classe testée. Soumettez pour finir une version\r\ncorrigée de cette classe `DList`.\r\n\r\n**Attention, vous devez soumettre la classe DList entière avec\r\nexactement les mêmes attributs et les mêmes méthodes. Seul le corps des\r\nméthodes et les valeurs des attributs peuvent être différents.**\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Munyabarenzi Clémentine Zaninka",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m11dem13",
            "archive_properties": {
                "folders": [
                    "m11dem13"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* PileInt",
            "description": "Une pile d\\'entiers est une structure de données qui permet d\\'empiler\r\ndes entiers. Les entiers sont ajoutés à la pile via son sommet. La pile\r\ngarantit un fonctionnement Last-In First-Out (LIFO, dernier entré,\r\npremier sorti). On vous donne la classe `PileInt` incomplète suivante :\r\n\r\n``` java\r\n/**\r\n * Une pile d'entiers représentée sous la forme d'une structure chaînée\r\n *\r\n * @author O. Bonaventure\r\n * @version Décembre 2016\r\n */\r\n  public class PileInt {\r\n\r\n     // une classe interne représentant un noeud de la pile\r\n      private class Noeud {\r\n          int element;\r\n          Noeud suivant;\r\n\r\n          public Noeud(int i, Noeud n) {\r\n              element = i;\r\n              suivant = n;\r\n          }\r\n      }\r\n\r\n      private Noeud sommet; // le sommet de la pile\r\n      private int profondeur; // le nombre d'entiers dans la pile\r\n\r\n     /**\r\n      * @pre -\r\n      * @post initialise une pile vide\r\n      */\r\n      public PileInt() {\r\n          sommet = null;\r\n          profondeur = 0;\r\n      }\r\n\r\n      /**\r\n       * @pre\r\n       * @post ajoute l'entier i au sommet de la pile\r\n       */\r\n      public void push(int i) {\r\n          // Première question\r\n      }\r\n\r\n      /**\r\n       * @pre -\r\n       * @post retourne l'entier au sommet de la pile et le retire de la pile\r\n       *       lance l'exception IllegalStateException si la pile est vide\r\n       */\r\n      public int pop() throws IllegalStateException {\r\n          // Deuxième question\r\n      }\r\n\r\n      /**\r\n       * @pre -\r\n       * @post retourne la profondeur,\r\n       *      c'est-à-dire le nombre d'éléments dans la pile.\r\n       *      Retourne 0 pour une pile vide.\r\n       */\r\n      public int depth() {\r\n          return profondeur;\r\n      }\r\n  }\r\n```\r\n\r\nComplétez cette classe.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m11Q1",
            "archive_properties": {
                "folders": [
                    "m11Q1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* Pile",
            "description": "Une pile est une structure de données qui permet d\\'empiler les\r\néléments. Les objets sont ajoutés à la pile via son sommet. La pile\r\ngarantit un fonctionnement Last-In First-Out (LIFO, dernier entré,\r\npremier sorti) On vous donne la classe `Pile` incomplète suivante :\r\n\r\n``` java\r\n/**\r\n * Une pile représentée sous la forme d'une structure chaînée\r\n *\r\n * @author O. Bonaventure\r\n * @version Novembre 2016\r\n */\r\n  public class Pile {\r\n\r\n      // une classe interne représentant un noeud de la queue\r\n      private class Noeud {\r\n          Object element;\r\n          Noeud suivant;\r\n\r\n          public Noeud(Object o, Noeud n) {\r\n              element = o;\r\n              suivant = n;\r\n          }\r\n     }\r\n\r\n     private Noeud sommet; // le sommet de la pile\r\n\r\n     /*\r\n      * @pre -\r\n      * @post a initialisé une pile vide\r\n      */\r\n      public Pile() {\r\n          sommet = null;\r\n      }\r\n\r\n     /**\r\n      * @pre o != null\r\n      * @post ajoute l'objet o au sommet de la pile\r\n      */\r\n      public void push(Object o) {\r\n          // code non fourni\r\n      }\r\n\r\n     /**\r\n      * @pre -\r\n      * @post retourne l'élément au sommet de la pile et le supprime\r\n      *       null si la pile est vide\r\n      */\r\n      public Object pop() {\r\n          // Question 1\r\n      }\r\n\r\n     /**\r\n      * @pre -\r\n      * @post retourne la profondeur,\r\n      *      c'est-à-dire le nombre d'éléments dans la pile.\r\n      *      0 pour une pile vide.\r\n      */\r\n      public int depth() {\r\n          // Question 2\r\n      }\r\n  }\r\n```\r\n\r\nComplétez cette classe.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m11Q2",
            "archive_properties": {
                "folders": [
                    "m11Q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q* FIFOQueue",
            "description": "Une queue est une structure de donnée qui dispose d\\'une entrée et\r\nd\\'une sortie. Les objets sont ajoutés à la queue via son entrée et sont\r\nretirés via sa sortie. La queue garantit un fonctionnement First-In\r\nFirst-Out (FIFO, premier entré, premier sorti) On vous donne la classe\r\n`FIFOQueue` incomplète suivante :\r\n\r\n``` java\r\n/**\r\n * Une FIFO queue représentée sous la forme d'une structure chaînée\r\n *\r\n * @author O. Bonaventure\r\n * @version Novembre 2016\r\n */\r\n  public class FIFOQueue {\r\n\r\n     // une classe interne représentant un noeud de la queue\r\n      private class Noeud {\r\n          Object element;\r\n          Noeud suivant;\r\n\r\n          public Noeud(Object o, Noeud n) {\r\n              element = o;\r\n              suivant = n;\r\n          }\r\n      }\r\n\r\n     private Noeud entree; // correspond à tout moment à l'entrée de la queue\r\n     private Noeud sortie; // correspond à tout moment à la sortie de la queue\r\n\r\n     /*\r\n      * @pre -\r\n      * @post a initialisé une queue vide\r\n      */\r\n      public FIFOQueue() {\r\n          entree = null;\r\n          sortie = null;\r\n      }\r\n\r\n     /**\r\n      * @pre o != null\r\n      * @post ajoute l'objet à la queue via le noeud entree\r\n      */\r\n      public void ajoute(Object o) {\r\n          Noeud ajout;\r\n          ajout = new Noeud(o, entree);\r\n          entree = ajout;\r\n          if(sortie == null) {\r\n               sortie = ajout;\r\n          }\r\n     }\r\n\r\n     /**\r\n      * @pre -\r\n      * @post retourne le plus ancien objet de la queue via le noeud sortie et\r\n      *       le retire de la queue\r\n      *       null si la queue est vide\r\n      */\r\n     public Object retire () {\r\n        // A compléter\r\n     }\r\n  }\r\n```\r\n\r\nComplétez cette classe.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m11Q3",
            "archive_properties": {
                "folders": [
                    "m11Q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** Queue",
            "description": "Une queue est une structure de données qui dispose d\\'une entrée et\r\nd\\'une sortie. Les objets sont ajoutés à la queue via son entrée et sont\r\nretirés via sa sortie. La queue garantit un fonctionnement First-In\r\nFirst-Out (FIFO, premier entré, premier sorti) On vous donne la classe\r\n`Queue` incomplète suivante :\r\n\r\n``` java\r\n/**\r\n * Une queue représentée sous la forme d'une structure chaînée\r\n *\r\n * @author O. Bonaventure\r\n * @version Novembre 2016\r\n */\r\n  public class Queue {\r\n\r\n      // une classe interne représentant un noeud de la queue\r\n      private class Noeud {\r\n          Object element;\r\n          Noeud suivant;\r\n          Noeud precedent;\r\n\r\n          public Noeud(Object o, Noeud n, Noeud p) {\r\n              element = o;\r\n              suivant = n;\r\n              precedent = p;\r\n          }\r\n       }\r\n\r\n      private Noeud entree; // l'entrée de la queue\r\n      private Noeud sortie; // la sortie de la queue\r\n\r\n     /*\r\n      * @pre -\r\n      * @post initialise une queue vide\r\n      */\r\n      public Queue() {\r\n          entree = null;\r\n          sortie = null;\r\n      }\r\n\r\n     /**\r\n      * @pre o != null\r\n      * @post ajoute l'objet à la queue\r\n      */\r\n      public void ajoute(Object o) {\r\n          // Question 1\r\n      }\r\n\r\n     /**\r\n      * @pre -\r\n      * @post retourne le plus ancien objet de la queue via le noeud sortie et\r\n      *       le retire de la queue.\r\n      *       Retourne null si la queue est vide\r\n      */\r\n      public Object retire() {\r\n          // Question 2\r\n      }\r\n  }\r\n```\r\n\r\nComplétez cette classe.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m11Q4",
            "archive_properties": {
                "folders": [
                    "m11Q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** OrderedList",
            "description": "Une queue ordonnée est une structure de données qui dispose d\\'une\r\nréférence min et d\\'une référence max. Les réels sont ajoutés à la queue\r\nvia son entrée et sont retirés via sa sortie. A tout moment, la queue\r\nest telle que l\\'élément le plus petit est accessible via la référence\r\nmin et le plus grand via la référence max. On vous donne la classe\r\n`OrderedList` incomplète suivante :\r\n\r\n``` java\r\n/**\r\n * Une liste qui contient des réels dans l'odre croissant\r\n *\r\n * @author O. Bonaventure\r\n * @version Dec. 2016\r\n */\r\n  public class OrderedList {\r\n\r\n     // une classe interne représentant un noeud de la queue\r\n      private static class Noeud {\r\n          double d;\r\n          Noeud suivant;\r\n          Noeud precedent;\r\n\r\n          public Noeud(double d, Noeud n, Noeud p) {\r\n              this.d = d;\r\n              suivant = n;\r\n              precedent = p;\r\n          }\r\n      }\r\n\r\n      private Noeud min; // le plus petit nombre de la liste\r\n      private Noeud max; // le plus grand nombre de la liste\r\n\r\n     /*\r\n      * @pre -\r\n      * @post initialise une liste vide\r\n      */\r\n      public OrderedList() {\r\n          min = null;\r\n          max = null;\r\n      }\r\n\r\n     /**\r\n      * @pre\r\n      * @post ajoute le nombre n à la liste ordonnée. Après ajout, la liste est\r\n      *       ordonnée, le nombre le plus petit est à la référence min et\r\n      *       le plus grand à la référence max\r\n      */\r\n      public void ajoute(double n) {\r\n          // Question 1\r\n      }\r\n\r\n     /**\r\n      * @pre -\r\n      * @post retourne le plus grand élément de la queue et le retire de la queue\r\n      *       lance un exception IllegalStateException si la queue est vide\r\n      */\r\n      public double retireMax() throws IllegalStateException {\r\n          // Question 2\r\n      }\r\n  }\r\n```\r\n\r\nComplétez cette classe.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m11Q5",
            "archive_properties": {
                "folders": [
                    "m11Q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Q** List",
            "description": "Une liste est une structure de données permettant de stocker des objets.\r\nLes objets sont ajoutés à la liste via sa tete. Elle supporte trois\r\ncommandes : ajout pour ajouter un objet à la liste retire pour retirer\r\nun élément se trouvant dans la liste contient pour voir si un objet se\r\ntrouve dans la liste\r\n\r\nOn vous donne la classe `Liste` incomplète suivante :\r\n\r\n``` java\r\n/**\r\n * Une liste représentée sous la forme d'une structure chaînée\r\n *\r\n * @author O. Bonaventure\r\n * @version Décembre 2016\r\n */\r\npublic class Liste {\r\n\r\n   // une classe interne représentant un noeud de la liste\r\n    private class Noeud {\r\n        Object element;\r\n        Noeud suivant;\r\n\r\n        public Noeud(Object o, Noeud n) {\r\n            element = o;\r\n            suivant = n;\r\n        }\r\n    }\r\n\r\n    private Noeud tete; // le début de la liste\r\n\r\n   /*\r\n    * @pre -\r\n    * @post a initialisé une liste vide\r\n    */\r\n    public Liste() {\r\n        tete = null;\r\n    }\r\n\r\n   /**\r\n    * @pre o != null\r\n    * @post ajoute l'objet à la liste\r\n    */\r\n    public void ajoute(Object o) {\r\n        // Code non fourni\r\n    }\r\n\r\n   /*\r\n    * @pre o != null\r\n    * @post retourne true si l'objet o se trouve dans la liste, false sinon\r\n    */\r\n    public boolean contient(Object o) {\r\n        // Question 1\r\n    }\r\n\r\n   /**\r\n    * @pre o != null\r\n    * @post retire toutes les copies de l'objet o de la liste.\r\n    *       Retourne le nombre d'objets qui ont été retiré de la liste\r\n    *       (0 si l'objet o n'était pas présent dans la liste)\r\n    */\r\n    public int retire(Object o) {\r\n        // Question 2\r\n    }\r\n}\r\n```\r\n\r\nComplétez cette classe.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic TAFFIN",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m11Q6",
            "archive_properties": {
                "folders": [
                    "m11Q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour\r\nla Mission 11.\r\n\r\nVous attendons une archive **.zip** contenant uniquement les fichiers :\r\n\r\n-   Classement.java\r\n-   ClassementTemps.java\r\n-   Coureur.java\r\n-   Dlist.java\r\n-   DListTest.java\r\n-   Main.java\r\n-   Resultat.java\r\n-   Temps.java\r\n-   README.txt\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Bastien BODART",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m11real",
            "archive_properties": {
                "folders": [
                    "m11real"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "QCM",
            "description": "Mission 11. Structures chaînées\r\n===============================\r\n\r\nCes questions supposent que vous avez lu les sections suivantes du livre\r\nde référence JavaNotes\\_\r\n\r\n> -   \r\n>\r\n>     [5.7 : Interfaces, Nested Classes, and Other Details]{.title-ref}\\_\r\n>\r\n>     :   -   [5.7.2 : Nested Classes]{.title-ref}\\_\r\n>\r\n> -   [9.1 : Recursion]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [9.2 : Linked Data Structures]{.title-ref}\\_\r\n>\r\n>     :   -   [9.2.1 : Recursive Linking]{.title-ref}\\_\r\n>         -   [9.2.2 : Linked Lists]{.title-ref}\\_\r\n>         -   [9.2.3 : Basic Linked List Processing]{.title-ref}\\_\r\n>         -   [9.2.4 : Inserting into a Linked List]{.title-ref}\\_\r\n>         -   [9.2.5 : Deleting from a Linked List]{.title-ref}\\_\r\n>\r\n> -   \r\n>\r\n>     [9.3 : Stacks, Queues, and ADTs]{.title-ref}\\_\r\n>\r\n>     :   -   [9.3.1 : Stacks]{.title-ref}\\_\r\n>         -   [9.3.2 : Queues]{.title-ref}\\_\r\n\r\nPlusieurs questions se basent sur la classe `StackOfInt` de la section\r\n9.3.1, partiellement reproduite et traduite ici\r\n\r\n``` java\r\n/**\r\n * Une pile d'entiers sous forme de chaîne simplement liée.\r\n * Le sommet de la pile est la tête de la chaîne.\r\n */\r\npublic class StackOfInts {\r\n   /**\r\n    * Un noeud de la liste.\r\n    */\r\n   private static class Node {\r\n      int item;     // donnée\r\n      Node next;    // le noeud suivant\r\n   }\r\n\r\n   private Node top;   // le sommet de la pile\r\n\r\n   /**\r\n    * @pre  -\r\n    * @post Ajoute N au sommet de la pile.\r\n    */\r\n   public void push( int N ) {\r\n      ...\r\n   }\r\n\r\n\r\n   /**\r\n    * @pre  -\r\n    * @post Retire et retourne l'élément au sommet de la pile.\r\n    *       Lance une IllegalStateException si la pile est vide.\r\n    */\r\n   public int pop() {\r\n      ...\r\n   }\r\n\r\n   /**\r\n    * @pre  -\r\n    * @post retourne true si la pile est vide, false sinon.\r\n    */\r\n   public boolean isEmpty() {\r\n      return (top == null);\r\n   }\r\n\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m11_qcm",
            "archive_properties": {
                "folders": [
                    "m11_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen Juin 2011 online : Enoncé",
            "description": "Contexte\r\n========\r\n\r\nUne *grappe d\\'ordinateurs* (computer cluster) est un ensemble\r\nd\\'ordinateurs connectés entre eux et organisés de manière à apparaître\r\ncomme une large ressource de calcul sur laquelle peuvent s\\'exécuter\r\nsimultanément de nombreuses tâches, la répartition des tâches entre les\r\ndifférents ordinateurs étant gérée par le système de manière\r\ntransparente pour l\\'utilisateur. On appelle *processus* (process) une\r\ntâche individuelle dont un utilisateur peut demander l\\'exécution sur la\r\ngrappe.\r\n\r\n![image](m12_examj2011enonce_online/cluster.png){.align-center}\r\n\r\nLe programme que vous devez compléter permet de représenter la gestion\r\ndes processus sur une grappe d\\'ordinateurs. La grappe est décrite par\r\nla classe `Cluster`. Une grappe contient la liste des ordinateurs de la\r\ngrappe, organisée sous forme de **liste chaînée circulaire** : les\r\nnoeuds de la liste sont connectés en boucle, de sorte que la liste n\\'a\r\npas de début ni de fin. Cette organisation est utilisée pour ajouter les\r\nnouveaux processus à chaque ordinateur à tour de rôle, dans la mesure\r\ndes ressources disponibles.\r\n\r\n![image](m12_examj2011enonce_online/listeCirc.png){.align-center}\r\n\r\nLe fonctionnement de la liste est documenté dans la classe `Cluster`. La\r\ntête de liste se décale à chaque ajout de processus pour assurer une\r\nrépartition plus équitable. Par exemple, dans la situation illustrée\r\nci-dessus, l\\'ordinateur 1 est en tête de liste. Si on désire ajouter un\r\nprocessus, et que ni l\\'ordinateur 1 ni le 2 ne disposent des ressources\r\nsuffisantes, le processus sera ajouté à l\\'ordinateur 3, et\r\nl\\'ordinateur 4 deviendra la nouvelle tête de liste.\r\n\r\nUne grappe peut contenir plusieurs types d\\'ordinateurs, dont les\r\nfonctionnalités communes sont décrites dans l\\'interface `ComputerIF`.\r\nDeux implémentations de cette interface sont fournies :\r\n\r\n-   `BasicComputer` qui supporte un seul processus à la fois, et\r\n-   `FullComputer` qui supporte un nombre maximum déterminé de\r\n    processus, gérés dans un tableau.\r\n\r\nUn processus est décrit par la classe `Process`, que vous devez écrire à\r\nla question 3. Le programme utilise aussi sa propre classe\r\nd\\'exceptions, définie dans `UnavailableException`.\r\n\r\nRappelons qu\\'il convient d\\'utiliser la méthode `equals` pour comparer\r\ndes objets, même si cette méthode n\\'est pas explicitement re-définie\r\ndans les classes correspondantes.\r\n\r\nRessources\r\n==========\r\n\r\n-   [The Java API](http://docs.oracle.com/javase/8/docs/api/)\r\n-   [Introduction to Programming Using Java\r\n    (JavaNotes)](http://math.hws.edu/javanotes/)\r\n\r\nAnnexes\r\n=======\r\n\r\nVous trouverez ci-après les sources (incomplètes) du programme auquel se\r\nrapportent les questions :\r\n\r\n-   [ComputerIF.java](#computerif.java)\r\n-   [BasicComputer.java](#basiccomputer.java)\r\n-   [Process.java](#process.java)\r\n-   [UnavailableException.java](#unavailableexception.java)\r\n-   [FullComputer.java](#fullcomputer.java)\r\n-   [Cluster.java](#cluster.java)\r\n\r\n------------------------------------------------------------------------\r\n\r\nComputerIF.java\r\n---------------\r\n\r\n``` java\r\n/**\r\n * Un ordinateur, sur lequel on peut ajouter et retirer des processus.\r\n * L'ordinateur dispose de ressources (nombre de processus, volume de stockage)\r\n * éventuellement limitées, et donc peut refuser l'ajout de processus supplémentaires.\r\n * Un ordinateur a un nom.\r\n *\r\n * @author O. Bonaventure, Ch. Pecheur\r\n * @version Juin 2011\r\n */\r\n\r\npublic interface ComputerIF\r\n{\r\n    /**\r\n     * @pre  p != null, p ne se trouve pas déjà sur cet ordinateur\r\n     * @post le processus p a été ajouté à cet ordinateur, si les ressources\r\n     *       nécessaires sont disponibles.  Retourne true si le processus\r\n     *       a été ajouté, false sinon.\r\n     */\r\n    public boolean addProcess(Process p);\r\n\r\n    /**\r\n     * @pre p != null\r\n     * @post le processus p a été retiré de cet ordinateur, si ce processus\r\n     *       se trouve sur cet ordinateur.  Retourne true si le processus\r\n     *       a été supprimé, false sinon.\r\n     */\r\n    public boolean removeProcess(Process p);\r\n\r\n    /**\r\n     * @pre -\r\n     * @post Tous les processus de cet ordinateur ont été retirés.\r\n     */\r\n    public void removeAllProcesses();\r\n\r\n    /**\r\n     * @pre -\r\n     * @post retourne le nom de l'ordinateur.\r\n     */\r\n    public String getName();\r\n\r\n    /**\r\n     * @pre -\r\n     * @post Retourne la liste des processus de cet ordinateur sous forme de texte,\r\n     *       avec une ligne par processus, chaque ligne comprenant le nom du processus\r\n     *       et sa taille de stockage, séparés par un espace, et se termine par\r\n     *       un passage à la ligne.  Par exemple:\r\n     *\r\n     *       process1 0\r\n     *       bigprocess 200\r\n     *       smallprocess 20\r\n     */\r\n    public String getState();\r\n }\r\n```\r\n\r\nBasicComputer.java\r\n------------------\r\n\r\n``` java\r\n/**\r\n  * Un ordinateur de base, supportant un seul processus et sans capacité de stockage.\r\n  *\r\n  * @author O. Bonaventure, Ch. Pecheur\r\n  * @version Juin 2011\r\n  */\r\n public class BasicComputer implements ComputerIF\r\n {\r\n     private String name; // Nom de l'ordinateur\r\n     private Process proc; // processus éventuel, null si absent\r\n\r\n     /**\r\n      * @pre name != null\r\n      * @post Construit un BasicComputer de nom name.\r\n      */\r\n     public BasicComputer(String name)\r\n     {\r\n         this.name = name;\r\n     }\r\n\r\n     /**\r\n      * @pre -\r\n      * @post retourne le nom de l'ordinateur.\r\n      */\r\n     public String getName()\r\n     {\r\n         return name;\r\n     }\r\n\r\n     /**\r\n      * @pre  p != null, p ne se trouve pas déjà sur cet ordinateur\r\n      * @post le processus p a été ajouté à cet ordinateur, si aucun processus\r\n      *       n'est présent et si p ne demande pas de stockage. Retourne true si\r\n      *       le processus a été ajouté, false sinon.\r\n      */\r\n     public boolean addProcess(Process p)\r\n     {\r\n         if (proc == null && p.getRequiredStorage() == 0) {\r\n             proc = p;\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n\r\n     /**\r\n      * @pre p != null\r\n      * @post le processus p a été retiré de cet ordinateur, s'il s'agit bien du\r\n      *       processus présent. Retourne true si le processus a été supprimé,\r\n      *       false sinon.\r\n      */\r\n     public boolean removeProcess(Process p)\r\n\r\n          QUESTION 1\r\n\r\n\r\n     /**\r\n      * @pre -\r\n      * @post Tous les processus de cet ordinateur ont été retirés. Retire proc\r\n      *       s'il est actif.\r\n      */\r\n     public void removeAllProcesses()\r\n     {\r\n         proc = null;\r\n     }\r\n\r\n     /**\r\n      * @pre -\r\n      * @post Retourne la liste des processus de cet ordinateur sous forme de texte,\r\n      *       avec une ligne par processus, chaque ligne comprenant le nom du processus\r\n      *       et sa taille de stockage, séparés par un espace, et se termine par\r\n      *       un passage à la ligne.  Par exemple:\r\n      *\r\n      *       process1 0\r\n      *       bigprocess 200\r\n      *       smallprocess 20\r\n      */\r\n     public String getState() {\r\n         if (proc != null) {\r\n             return proc.getDescr() + \"\\n\";\r\n         } else {\r\n             return \"\";\r\n         }\r\n     }\r\n }\r\n```\r\n\r\nProcess.java\r\n------------\r\n\r\n``` java\r\nQUESTION 3\r\n```\r\n\r\nUnavailableException.java\r\n-------------------------\r\n\r\n``` java\r\n/**\r\n * Une exception utilisée lorsqu'une opération ne peut être effectuée\r\n * par manque de ressources.\r\n *\r\n * @author O. Bonaventure, Ch. Pecheur\r\n * @version Juin 2011\r\n */\r\npublic class UnavailableException extends Exception\r\n{\r\n    public UnavailableException()\r\n    {\r\n        super();\r\n    }\r\n}\r\n```\r\n\r\nFullComputer.java\r\n-----------------\r\n\r\n``` java\r\n/**\r\n * Un ordinateur avec capacité de stockage limitée et nombre de processus limité.\r\n *\r\n * @author O. Bonaventure, Ch. Pecheur\r\n * @version Juin 2011\r\n */\r\npublic class FullComputer extends BasicComputer\r\n{\r\n    /**\r\n     * Les processus présents sur cet ordinateur.  Les processus sont dans\r\n     * procs[0] .. procs[count-1], et procs[i] == null pour i >= count.\r\n     */\r\n    private Process[] procs;\r\n    private int count;         // nombre de processus présents\r\n    private int storage;       // capacité de stockage totale\r\n    private int availStorage;  // capacit?é de stockage restante\r\n\r\n    /**\r\n     * @pre n > 0, name != null, storage >= 0\r\n     * @post Construit un FullComputer de nom name, supportant n processus\r\n     *       et avec une capacité de stockage égale à storage\r\n     */\r\n\r\n         QUESTION 2\r\n\r\n    /**\r\n     * @pre  p != null, p ne se trouve pas déjà sur cet ordinateur\r\n     * @post le processus p a été ajouté à cet ordinateur, si (1) le nombre de\r\n     *       processus maximal n'est pas atteint et (2) la capacité de stockage\r\n     *       nécessaire pour p est disponible. Retourne true si le processus a\r\n     *       été ajouté, false sinon.\r\n     */\r\n    public boolean addProcess(Process p)\r\n\r\n         QUESTION 4\r\n\r\n\r\n     RESTE DU CODE NON FOURNI\r\n\r\n}\r\n```\r\n\r\nCluster.java\r\n------------\r\n\r\n``` java\r\n/**\r\n * Une grappe (cluster) d'ordinateurs formant une ressource commune pour\r\n * l'exécution de processus.  Les ordinateurs du cluster sont gérés comme\r\n * une liste circulaire, de telle manière que les processus soient distribués\r\n * à tour de rôle à chaque ordinateur, dans la limite de leurs ressources disponibles.\r\n * La tête de la liste correspond prochain ordinateur à recevoir un nouveau processus,\r\n * pour autant qu'il ait les ressources nécessaires.\r\n *\r\n * @author O. Bonaventure, Ch. Pecheur\r\n * @version Juin 2011\r\n */\r\n\r\nimport java.io.*;\r\n\r\npublic class Cluster\r\n{\r\n    // classe interne: un noeud de la liste circulaire des ordinateurs du cluster\r\n    private class ListNode {\r\n        ListNode next;\r\n        ComputerIF elem;\r\n    }\r\n\r\n    /**\r\n     * La tête courante de la liste des ordinateurs. Les noeuds suivants sont\r\n     * chaînés de manière circulaire: la chaîne finit toujours par revenir à\r\n     * current.\r\n     */\r\n    private ListNode current;\r\n    private int count; // nombre d'ordinateurs dans le cluster\r\n\r\n    /**\r\n     * Constructeur\r\n     */\r\n    public Cluster()\r\n    {\r\n        count = 0;\r\n        current = null;\r\n    }\r\n\r\n    /**\r\n     * @pre p != null, p ne se trouve pas déjà sur un ordinateur du cluster.\r\n     * @post Le processus p a été ajouté au premier ordinateur, à partir de la\r\n     *       tête de la liste, disposant des ressources nécessaires. La nouvelle\r\n     *       tête de liste est le noeud qui suit celui de l'ordinateur où p a\r\n     *       été ajouté. Si aucun ordinateur ne dispose de ressources\r\n     *       suffisantes, la tête de liste est inchangée et une\r\n     *       UnavailableException est lancée.\r\n     */\r\n\r\n         QUESTION 5\r\n\r\n\f    /**\r\n     * @pre p != null\r\n     * @post Le processus p a été retiré du premier ordinateur du cluster\r\n     *       sur lequel il se trouvait, à partir de la tête de la liste.\r\n     *       Si p n'est pas trouvé, lance UnavailableException.\r\n     */\r\n    public void removeProcess(Process p) throws UnavailableException\r\n\r\n         CODE NON FOURNI\r\n\r\n\r\n    /**\r\n     * @pre -\r\n     * @post Tous les processus de tous les ordinateurs ont été retirés.\r\n     */\r\n    public void removeAllProcesses()\r\n\r\n         CODE NON FOURNI\r\n\r\n    /**\r\n     * @pre  comp != null, comp ne fait pas déjà partie du cluster.\r\n     * @post L'ordinateur comp est ajouté à la liste des ordinateurs.\r\n     */\r\n    public void addComputer(ComputerIF comp)\r\n    {\r\n        ListNode l = new ListNode();\r\n        l.elem = comp;\r\n       if(count == 0)\r\n        {\r\n           l.next = l;\r\n           current = l;\r\n        }\r\n        else\r\n        {\r\n            l.next = current.next;\r\n            current.next = l;\r\n        }\r\n        count++;\r\n    }\r\n\r\n    /**\r\n     * @pre comp != null\r\n     * @post L'ordinateur comp a été retiré du cluster, s'il s'y trouvait. Si\r\n     *       comp est en tête de liste, la tête de liste passe au noeud suivant,\r\n     *       sinon elle est inchangée. Retourne true si comp a été retiré, false\r\n     *       sinon.\r\n     */\r\n\r\n         QUESTION 6\r\n\r\n    /**\r\n     * @pre filename est un nom de fichier\r\n     * @post Le fichier filename contient l'état du cluster sous forme de texte.\r\n     *       Pour chaque processus de chaque ordinateur du cluster, le fichier\r\n     *       contient une ligne composée du nom et de la capacité demandée,\r\n     *       séparés par un espace. Par exemple :\r\n     *\r\n     *       process1 0\r\n     *       bigprocess 200\r\n     *       smallprocess 20\r\n     *\r\n     *       Le nom des ordinateurs sur lesquels se trouvent les processus n'est\r\n     *       pas sauvegardé. Arrête le programme si une erreur d'I/O se produit.\r\n     */\r\n    public void saveState(String filename)\r\n\r\n         CODE NON FOURNI\r\n\r\n\r\n    /**\r\n     * @pre filename le nom d'un fichier sauvegardé par saveState\r\n     * @post Retire tous les processus présents dans le cluster, puis ajoute au\r\n     *       cluster les processus dont les noms et capacités sont donnés dans\r\n     *       le fichier, selon le format généré par saveState.  Arrête le\r\n     *       programme si une erreur d'I/O se produit ou si la capacité du\r\n     *       cluster est insuffisante.\r\n     */\r\n    public void loadState(String fileName)\r\n\r\n         QUESTION 7\r\n\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Charles Pecheur",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m12_examj2011enonce_online",
            "archive_properties": {
                "folders": [
                    "m12_examj2011enonce_online"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen Juin 2011 online : Question 1",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/m12_examj2011enonce_online).\r\n\r\nQuestion 1 : Implémentez la méthode `removeProcess` de la classe\r\n`BasicComputer`, dont la signature est ci-dessous :\r\n\r\n``` java\r\n/**\r\n * @pre p != null\r\n * @post le processus p a été retiré de cet ordinateur, s'il\r\n *         s'agit bien du processus présent. Retourne true si\r\n *         le processus a été supprimé, false sinon.\r\n */\r\npublic boolean removeProcess(Process p)\r\n{\r\n    /*** VOTRE REPONSE ***/\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m12_examj2011q1_online",
            "archive_properties": {
                "folders": [
                    "m12_examj2011q1_online"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen Juin 2011 online : Question 2",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/m12_examj2011enonce_online).\r\n\r\nQuestion 2 : Écrivez complètement le constructeur de la classe\r\n`FullComputer`. Ce constructeur prend dans l\\'ordre les arguments\r\nsuivants : le nom, le nombre de processus à supporter, la capacité de\r\nstockage. Sa spécification est la suivante :\r\n\r\n``` java\r\n/**\r\n * @pre n > 0, name != null, storage >= 0\r\n * @post Construit un FullComputer de nom name, supportant n processus\r\n * et avec une capacité de stockage égale à storage\r\n */\r\n\r\n /*** VOTRE REPONSE ***/\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Munyabarenzi Clémentine Zaninka",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m12_examj2011q2_online",
            "archive_properties": {
                "folders": [
                    "m12_examj2011q2_online"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen Juin 2011 online : Question 3",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/m12_examj2011enonce_online).\r\n\r\nQuestion 3 : Ecrivez complètement (y compris les spécifications) le\r\ncorps de la classe `Process` qui représente un processus. Chaque\r\nprocessus a un nom (`String`), une capacité de stockage requise (`int`)\r\net un identifiant de processus ou PID (`int`). Les PIDs sont attribus\r\nsquentiellement à la cration de chaque nouveau processus (1 pour le\r\npremier, 2 pour le deuxième, etc.) La classe doit définir :\r\n\r\n-   Un constructeur avec le nom et la capacité comme paramètres, dans\r\n    cet ordre,\r\n-   Des méthodes `getName`, `getRequiredStorage` et `getPid` retournant\r\n    respectivement le nom, la capacité et le PID,\r\n-   Une méthode `toString` retournant une chaîne de caractères\r\n    comprenant le nom du processus et la capacité de stockage\r\n    nécessaire, séparés par un espace,\r\n-   Toutes les variables et méthodes complémentaires nécessaires à votre\r\n    implémentation.\r\n\r\nIl n\\'est pas nécessaire de re-définir la méthode `equals`.\r\n\r\n``` java\r\n/**\r\n  * Un processus, avec un nom (String), une capacité de stockage\r\n  * requise (int) et un identifiant de processus, ou PID (int).\r\n  * Les PIDs sont attribués séquentiellement à la création de chaque\r\n  * nouveau processus (1 pour le premier, 2 pour le deuxième, etc.).\r\n  * Le premier argument du constructeur doit être le nom du processus.\r\n  */\r\n public class Process\r\n {\r\n     /*** VOTRE REPONSE ***/\r\n }\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m12_examj2011q3_online",
            "archive_properties": {
                "folders": [
                    "m12_examj2011q3_online"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen juin 2011 online : Question 4",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/m12_examj2011enonce_online).\r\n\r\nQuestion 4 : Ecrivez le corps de la méthode `addProcess` de la classe\r\n`FullComputer`. Pensez à utiliser les méthodes de la classe `Process`\r\ndéfinies à la question 3. :\r\n\r\n``` java\r\n/**\r\n * @pre p != null, p ne se trouve pas déjà sur cet ordinateur\r\n * @post le processus p a été ajouté à cet ordinateur, si (1)le\r\n *       nombre de processus maximal n'est pas atteint et (2) la capacité de\r\n *       stockage nécessaire pour p est disponible. Retourne true si le\r\n *       processus a été ajouté, false sinon.\r\n */\r\n    public boolean addProcess(Process p)\r\n {\r\n     /*** VOTRE REPONSE ***/\r\n }\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Munyabarenzi Clémentine Zaninka",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m12_examj2011q4_online",
            "archive_properties": {
                "folders": [
                    "m12_examj2011q4_online"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen Juin 2011 online : Question 5",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/jun11.pdf).\r\n\r\nQuestion 5 : Implémentez la méthode `addProcess()` de la classe\r\n`Cluster`, selon la spécification donnée. Aidez-vous de l\\'exemple\r\nprésenté dans l\\'énoncé. Indice: vous pouvez utiliser la valeur de\r\n`count`.\r\n\r\n``` java\r\n/**\r\n * @pre p != null, p ne se trouve pas déjà sur un ordinateur du\r\n *        cluster.\r\n * @post Le processus p a été ajouté au premier ordinateur, à partir\r\n *         de la tête de la liste, disposant des ressources nécessaires.\r\n *         La nouvelle tête de liste est le noeud qui suit celui de\r\n *         l'ordinateur où p a été ajouté. Si aucun ordinateur ne\r\n *         dispose de ressources suffisantes, la tête de liste est\r\n *         inchangée et une UnavailableException est lancée.\r\n */\r\npublic void addProcess(Process p) throws UnavailableException {\r\n    /*** VOTRE REPONSE ***/\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m12_examj2011q5_online",
            "archive_properties": {
                "folders": [
                    "m12_examj2011q5_online"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen juin 2011 online : Question 6",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/jun11.pdf).\r\n\r\nQuestion 6 : Ecrivez complètement la méthode `removeComputer` de la\r\nclasse `Cluster` selon la spécification donnée. Indice: vous pouvez\r\nutiliser la valeur de `count`.\r\n\r\n``` java\r\n/**\r\n * @pre comp != null\r\n * @post L'ordinateur comp a été retiré du cluster, s'il s'y trouvait.\r\n *        Si comp est en tête de liste, la tête de liste passe au noeud suivant,\r\n *          sinon elle est inchangée.\r\n *        Retourne true si comp a été retiré, false sinon.\r\n */\r\n\r\n /*** VOTRE REPONSE ***/\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Munyabarenzi Clémentine Zaninka",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m12_examj2011q6_online",
            "archive_properties": {
                "folders": [
                    "m12_examj2011q6_online"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen Juin 2011 online : Question 7",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/jun11.pdf).\r\n\r\nQuestion 7 : Ecrivez le corps de la méthode `loadState` de la classe\r\n`Cluster` selon la spécification donnée. Notez que la pré-condition\r\ngarantit le format du contenu du fichier; pas besoin donc de traiter les\r\nerreurs de format du texte.\r\n\r\n``` java\r\n/**\r\n* @pre     filename le nom d'un fichier sauvegardé par saveState\r\n* @post    Retire tous les processus présents dans le cluster, puis\r\n*            ajoute au cluster les processus dont les noms et capacités\r\n*            sont donnés dans le fichier, selon le format généré par\r\n*            saveState.  Arrête le programme si une erreur d'I/O se\r\n*            produit ou si la capacité du cluster est insuffisante.\r\n*/\r\npublic void loadState(String fileName){\r\n  /*** VOTRE REPONSE ***/\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m12_examj2011q7_online",
            "archive_properties": {
                "folders": [
                    "m12_examj2011q7_online"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Phase de réalisation: Soumission",
            "description": "Vous pouvez soumettre ici ou via BlueJ votre phase de réalisation pour\r\nla Mission 1.\r\n\r\nVous attendons une archive **.zip** contenant uniquement les fichiers :\r\n\r\n-   MiseEnRoute.java\r\n-   README.txt\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/m1real",
            "archive_properties": {
                "folders": [
                    "m1real"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen Juin 2011: Question 1",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/jun11.pdf).\r\n\r\nRépondez ici à la Question 1 : Implémentez la méthode `removeProcess` de\r\nla classe `BasicComputer`, dont la signature est ci-dessous :\r\n\r\n``` java\r\n/**\r\n * @pre p != null\r\n * @post le processus p a été retiré de cet ordinateur, s'il\r\n *         s'agit bien du processus présent. Retourne true si\r\n *         le processus a été supprimé, false sinon.\r\n */\r\npublic boolean removeProcess(Process p)\r\n{\r\n    // À implémenter\r\n}\r\n```\r\n\r\n**Vu que l\\'examen est sur papier, il est préférable que vous rédigiez\r\nla réponse sur une feuille de papier et que vous la recopiiez ici une\r\nfois que vous êtes sûr de vous. INGInious vous permettra de vérifier si\r\nvotre code est correct mais n\\'oubliez pas qu\\'à l\\'examen, vous\r\nn\\'aurez pas plusieurs essais. Il est donc important de s\\'entraîner à\r\nrédiger du code sur papier pour se mettre en situation d\\'examen et\r\névaluer votre temps pour répondre.**\r\n\r\n**Souvenez-vous qu\\'une réponse correcte sur INGInious ne correspond pas\r\nd\\'office à un 20 à l\\'examen (la clarté, la simplicité du code, les\r\nspécifications sont aussi des critères importants non vérifiés par\r\nINGInious).**\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX12_examj2011q1",
            "archive_properties": {
                "folders": [
                    "mX12_examj2011q1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen Juin 2011: Question 2",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/jun11.pdf).\r\n\r\nRépondez ici à la Question 2 : Écrivez complètement le constructeur de\r\nla classe `FullComputer` dont la spécification est la suivante :\r\n\r\n``` java\r\n/**\r\n * @pre n > 0, name != null, storage >= 0\r\n * @post Construit un FullComputer de nom name, supportant n processus\r\n * et avec une capacité de stockage égale à storage\r\n */\r\n\r\n // À implémenter\r\n```\r\n\r\nCe constructeur prend dans l\\'ordre les arguments suivants : le nom, le\r\nnombre de processus à suporter, la capacité de stockage.\r\n\r\n**Comme l\\'examen est sur papier, il est préférable que vous rédigiez la\r\nréponse sur une feuille de papier et que vous la recopiiez ici une fois\r\nque vous êtes sûr de vous. INGInious vous permettra de vérifier si votre\r\ncode est correct mais n\\'oubliez pas qu\\'à l\\'examen, vous n\\'aurez pas\r\nplusieurs essais. Il est donc important de s\\'entraîner à rédiger du\r\ncode sur papier pour se mettre en situation d\\'examen et évaluer votre\r\ntemps pour répondre.**\r\n\r\n**Souvenez-vous qu\\'une réponse correcte sur INGInious ne correspond pas\r\nd\\'office à un 20 à l\\'examen (la clarté, la simplicité du code, les\r\nspécifications sont aussi des critères importants non vérifiés par\r\nINGInious).**\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Munyabarenzi Clémentine Zaninka",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX12_examj2011q2",
            "archive_properties": {
                "folders": [
                    "mX12_examj2011q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen Juin 2011: Question 3",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/jun11.pdf).\r\n\r\nRépondez ici à la Question 3 : Implémentez la classe `Process`\r\nci-dessous :\r\n\r\n``` java\r\n/**\r\n  * Un processus, avec un nom (String), une capacité de stockage\r\n  * requise (int) et un identifiant de processus, ou PID (int).\r\n  * Les PIDs sont attribués séquentiellement à la création de chaque\r\n  * nouveau processus (1 pour le premier, 2 pour le deuxième, etc.).\r\n  * Le premier argument du constructeur doit être le nom du processus.\r\n  */\r\n public class Process\r\n {\r\n     // À implémenter\r\n }\r\n```\r\n\r\nN\\'oubliez pas d\\'implémenter les méthodes demandées dans la question.\r\n\r\n**Comme l\\'examen est sur papier, il est préférable que vous rédigiez la\r\nréponse sur une feuille de papier et que vous la recopiiez ici une fois\r\nque vous êtes sûr de vous. INGInious vous permettra de vérifier si votre\r\ncode est correct mais n\\'oubliez pas qu\\'à l\\'examen, vous n\\'aurez pas\r\nplusieurs essais. Il est donc important de s\\'entraîner à rédiger du\r\ncode sur papier pour se mettre en situation d\\'examen et évaluer votre\r\ntemps pour répondre.**\r\n\r\n**Souvenez-vous qu\\'une réponse correcte sur INGInious ne correspond pas\r\nd\\'office à un 20 à l\\'examen (la clarté, la simplicité du code, les\r\nspécifications sont aussi des critères importants non vérifiés par\r\nINGInious).**\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX12_examj2011q3",
            "archive_properties": {
                "folders": [
                    "mX12_examj2011q3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen juin 2011: Question 4",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/jun11.pdf).\r\n\r\nRépondez ici à la Question 4 : Ecrivez le corps de la méthode\r\n`addProcess` de la classe `FullComputer`. Pensez à utiliser les méthodes\r\nde la classe `Process` définies à la question 3. :\r\n\r\n``` java\r\n/**\r\n * @pre p != null, p ne se trouve pas déjà sur cet ordinateur\r\n * @post le processus p a été ajouté à cet ordinateur, si (1)le\r\n * nombre de processus maximal n'est pas atteint et (2) la capacité de\r\n * stockage nécessaire pour p est disponible. Retourne true si le\r\n * processus a été ajouté, false sinon.\r\n *\r\n */\r\n public boolean addProcess(Process p)\r\n\r\n // À implémenter\r\n```\r\n\r\n**Comme l\\'examen est sur papier, il est préférable que vous rédigiez la\r\nréponse sur une feuille de papier et que vous la recopiiez ici une fois\r\nque vous êtes sûr de vous. INGInious vous permettra de vérifier si votre\r\ncode est correct mais n\\'oubliez pas qu\\'à l\\'examen, vous n\\'aurez pas\r\nplusieurs essais. Il est donc important de s\\'entraîner à rédiger du\r\ncode sur papier pour se mettre en situation d\\'examen et évaluer votre\r\ntemps pour répondre.**\r\n\r\n**Souvenez-vous qu\\'une réponse correcte sur INGInious ne correspond pas\r\nd\\'office à un 20 à l\\'examen (la clarté, la simplicité du code, les\r\nspécifications sont aussi des critères importants non vérifiés par\r\nINGInious).**\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Munyabarenzi Clémentine Zaninka",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX12_examj2011q4",
            "archive_properties": {
                "folders": [
                    "mX12_examj2011q4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen Juin 2011: Question 5",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/jun11.pdf).\r\n\r\nRépondez ici à la Question 5 : Implémentez la méthode `addProcess()` de\r\nla classe `Cluster`.\r\n\r\nVoici sa signature :\r\n\r\n``` java\r\n/**\r\n * @pre p != null, p ne se trouve pas déjà sur un ordinateur du\r\n *        cluster.\r\n * @post Le processus p a été ajouté au premier ordinateur, à partir\r\n *         de la tête de la liste, disposant des ressources nécessaires.\r\n *         La nouvelle tête de liste est le noeud qui suit celui de\r\n *         l'ordinateur où p a été ajouté. Si aucun ordinateur ne\r\n *         dispose de ressources suffisantes, la tête de liste est\r\n *         inchangée et une UnavailableException est lancée.\r\n */\r\npublic void addProcess(Process p) throws UnavailableException{\r\n    // À implémenter\r\n}\r\n```\r\n\r\n**Comme l\\'examen est sur papier, il est préférable que vous rédigiez la\r\nréponse sur une feuille de papier et que vous la recopiiez ici une fois\r\nque vous êtes sûr de vous. INGInious vous permettra de vérifier si votre\r\ncode est correct mais n\\'oubliez pas qu\\'à l\\'examen, vous n\\'aurez pas\r\nplusieurs essais. Il est donc important de s\\'entraîner à rédiger du\r\ncode sur papier pour se mettre en situation d\\'examen et évaluer votre\r\ntemps pour répondre.**\r\n\r\n**Souvenez-vous qu\\'une réponse correcte sur INGInious ne correspond pas\r\nd\\'office à un 20 à l\\'examen (la clarté, la simplicité du code, les\r\nspécifications sont aussi des critères importants non vérifiés par\r\nINGInious).**\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX12_examj2011q5",
            "archive_properties": {
                "folders": [
                    "mX12_examj2011q5"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen juin 2011: Question 6",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/jun11.pdf).\r\n\r\nRépondez ici à la Question 6 : Ecrivez complètement la méthode\r\n`removeComputer` de la classe `Cluster` dont la spécification et la\r\nsignature sont ci-desosus. Indice: vous pouvez utiliser la valeur de\r\n`count`.\r\n\r\n``` java\r\n/**\r\n * @pr e comp != null\r\n * @po st L'ordinateur comp a été retiré du cluster, s'il s'y\r\n * trouvait. Si comp est en tête de liste, la tête de liste passe au\r\n * noeud suivant, sinon elle est inchangée. Retourne true si comp a\r\n * été retiré, false sinon.\r\n */\r\n\r\n // À implémenter\r\n```\r\n\r\n**Comme l\\'examen est sur papier, il est préférable que vous rédigiez la\r\nréponse sur une feuille de papier et que vous la recopiiez ici une fois\r\nque vous êtes sûr de vous. INGInious vous permettra de vérifier si votre\r\ncode est correct mais n\\'oubliez pas qu\\'à l\\'examen, vous n\\'aurez pas\r\nplusieurs essais. Il est donc important de s\\'entraîner à rédiger du\r\ncode sur papier pour se mettre en situation d\\'examen et évaluer votre\r\ntemps pour répondre.**\r\n\r\n**Souvenez-vous qu\\'une réponse correcte sur INGInious ne correspond pas\r\nd\\'office à un 20 à l\\'examen (la clarté, la simplicité du code, les\r\nspécifications sont aussi des critères importants non vérifiés par\r\nINGInious).**\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Munyabarenzi Clémentine Zaninka",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX12_examj2011q6",
            "archive_properties": {
                "folders": [
                    "mX12_examj2011q6"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Examen Juin 2011: Question 7",
            "description": "Prenez connaissance de l\\'énoncé de l\\'[examen de juin\r\n2011](https://inginious.info.ucl.ac.be/course/LSINF1101/examj2011q1/jun11.pdf).\r\n\r\nRépondez ici à la Question 7 : Implémentez la méthode `loadState()` de\r\nla classe `Cluster`.\r\n\r\nVoici sa signature :\r\n\r\n``` java\r\n/**\r\n* @pre     filename le nom d'un fichier sauvegardé par saveState\r\n* @post    Retire tous les processus présents dans le cluster, puis\r\n*            ajoute au cluster les processus dont les noms et capacités\r\n*            sont donnés dans le fichier, selon le format généré par\r\n*            saveState.  Arrête le programme si une erreur d'I/O se\r\n*            produit ou si la capacité du cluster est insuffisante.\r\n*            Les processus sont répartis équitablement entre les\r\n*            différents ordinateurs du cluster.\r\n*/\r\npublic void loadState(String fileName){\r\n  // À implémenter\r\n}\r\n```\r\n\r\n**Comme l\\'examen est sur papier, il est préférable que vous rédigiez la\r\nréponse sur une feuille de papier et que vous la recopiiez ici une fois\r\nque vous êtes sûr de vous. INGInious vous permettra de vérifier si votre\r\ncode est correct mais n\\'oubliez pas qu\\'à l\\'examen, vous n\\'aurez pas\r\nplusieurs essais. Il est donc important de s\\'entraîner à rédiger du\r\ncode sur papier pour se mettre en situation d\\'examen et évaluer votre\r\ntemps pour répondre.**\r\n\r\n**Souvenez-vous qu\\'une réponse correcte sur INGInious ne correspond pas\r\nd\\'office à un 20 à l\\'examen (la clarté, la simplicité du code, les\r\nspécifications sont aussi des critères importants non vérifiés par\r\nINGInious).**\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "François MICHEL",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX12_examj2011q7",
            "archive_properties": {
                "folders": [
                    "mX12_examj2011q7"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Fonctions mathématiques",
            "description": "Créer un programme permettant de calculer des fonctions mathématiques.\r\nVous ne pouvez pas utiliser les fonctions mathématiques natives de Java.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 1"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX1Q19",
            "archive_properties": {
                "folders": [
                    "mX1Q19"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Exercice complémentaire 2 : Equations du second degré",
            "description": "Ecrivez un programme qui permet de donner, lorsqu\\'elles sont réelles,\r\nles solutions de l\\'[équation du second\r\ndegré](https://fr.wikipedia.org/wiki/Équation_du_second_degré)\r\n\r\nPour cela, écrivez un programme qui demande à l\\'utilisateur de taper\r\nles valeurs de *a*, *b* et *c* et ensuite écrit sur sa sortie standard\r\nles racines si celles-ci sont réelles. Pensez aux différents cas\r\npossibles en fonction des différentes valeurs respectives de *a*, *b* et\r\n*c*.\r\n\r\nPour rappel, vous pouvez calculer la racine carrée du réel `x` en\r\nutilisant `Math.sqrt(x)`.\r\n\r\nVotre réponse devra compléter le code ci-dessous:\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Clémentine Munyabarenzi",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX2ec2",
            "archive_properties": {
                "folders": [
                    "mX2ec2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Question supplémentaire : Division euclidienne",
            "description": "Utilisez une boucle pour réaliser une division euclidienne! le diviseur\r\net dividende vous sont donnés, vous devez trouver le quotient et le\r\nreste.\r\n\r\n> ``` java\r\n> int diviseur;\r\n> int dividende;\r\n>\r\n> int reste = 0;\r\n> int quotient = 0;\r\n> ```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Lucas Ody",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 2"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX2Q2",
            "archive_properties": {
                "folders": [
                    "mX2Q2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Fonctions équation du second degré",
            "description": "Ecrivez la méthode permettant de calculer le nombre de racine d\\'une\r\néquation du second degré On passe a,b et c en paramètre de votre\r\nméthode. La méthode s\\'appelle eqsecdeg1 pour la première partie et\r\neqsecdeg2 pour la seconde.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX3Q8",
            "archive_properties": {
                "folders": [
                    "mX3Q8"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Fonctions solution d'une équation du second degré",
            "description": "Ecrivez la méthode permettant de calculer la valeur d\\'une équation du\r\nsecond degré On passe a,b et c en paramètre de votre méthode. La méthode\r\ns\\'appelle eqsecdegsol1 pour la première partie et eqsecdegsol2 pour la\r\nseconde On vous donne accès à eqsecdeg2 permettant de connaître le\r\nnombre de solutions . Pour la deuxième version s\\'il y a plus qu\\'une\r\nsolution, vous renvoyez -1\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Ludovic Taffin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "java"
                },
                {
                    "category": 2,
                    "text": "Mission 3"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/mX3Q9",
            "archive_properties": {
                "folders": [
                    "mX3Q9"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Révisions : QCM",
            "description": "Revision\r\n========\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/CS1-Java",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[CS1-Java] Introduction à la programmation",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier BONAVENTURE",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                }
            ],
            "url": "https://inginious.org/course/uclouvain-cs1-java/rev_qcm",
            "archive_properties": {
                "folders": [
                    "rev_qcm"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        }
    ],
    "own_categories": {
        "0": "thématique",
        "1": "Misconception",
        "2": "autres"
    },
    "extraction_date": "2019-12-10T18:51:27.852Z",
    "url": "https://github.com/UCL-INGI/CS1-Java"
}