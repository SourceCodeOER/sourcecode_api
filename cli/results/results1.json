{
    "exercises": [
        {
            "title": "Absolute value",
            "description": "The absolute value of a number is defined as *\\|n\\| = n* if *n \\>= 0*,\r\n*\\|n\\| = -n* else.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S1",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/absolute_value",
            "archive_properties": {
                "folders": [
                    "absolute_value"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Advanced queue",
            "description": "You must implement the `enqueue` and `dequeue` functions of a\r\n[Queue]{.title-ref} that is implemented as a simple circular list. This\r\n[Wikipedia\r\npage](https://en.wikipedia.org/wiki/Linked_list#Circularly_linked_vs._linearly_linked)\r\ndescribes such a list as follows:\r\n\r\n\\\"With a circular list, a pointer to the last node gives easy access\r\nalso to the first node, by following one link. Thus, in applications\r\nthat require access to both ends of the list (e.g., in the\r\nimplementation of a queue), a circular structure allows one to handle\r\nthe structure by a single pointer, instead of two.\\\"\r\n\r\n![image](https://upload.wikimedia.org/wikipedia/commons/d/df/Circularly-linked-list.svg)\r\n\r\nAssume that the head of the queue is the leftmost node and that the tail\r\nof the queue is the rightmost node. In the previous example, the head\r\nand the tail are respectively `12` and `37`. So in this case, the only\r\npointer you can use will point to the `37` node.\r\n\r\nYou can use the following datastructures for this exercise:\r\n\r\n``` {.c}\r\ntypedef struct node{\r\n  struct node* next;\r\n  int value;\r\n} node_t;\r\n\r\ntypedef struct queue{\r\n  struct node* tail;\r\n  int size;\r\n} queue_t  ;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/advanced_queue",
            "archive_properties": {
                "folders": [
                    "advanced_queue"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "ArrayList",
            "description": "Vous devez modifier une librairie qui implémente une ArrayList en y\r\najoutant une fonction. Cette ArrayList s\\'utilise comme suit\r\n\r\n``` {.c}\r\nint main(void) {\r\n     struct array_list *head = arraylist_init((size_t) 2, (size_t) sizeof(int));\r\n     int first = 5;\r\n     int second = 6;\r\n     int third = 7;\r\n     int tmp;\r\n\r\n     int ret;\r\n\r\n     if (!head)\r\n             return 0;\r\n\r\n     set_element(head, 0, (void *)&first);\r\n     set_element(head, 1, (void *)&second);\r\n\r\n     get_element(head, 1, (void *)&tmp);\r\n     // tmp contient 6\r\n     add_tail(head, (void *)&third);\r\n     get_element(head, 2, (void *)&tmp);\r\n     // tmp contient 7\r\n     printf(\"array-list size: %d element-size %d\\n\", get_size(head), get_elem_size(head));\r\n     // affiche array-list size: 3 element-size 4\r\n     array_list_destroy(head);\r\n     return 0;\r\n}\r\n```\r\n\r\nLe syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants : -\r\n<http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes) -\r\n<http://sites.uclouvain.be/SystInfo/manpages/man2> (appels systèmes) -\r\n<http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\nlibrairies)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/alist",
            "archive_properties": {
                "folders": [
                    "alist"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Get an array from a binary file using mmap",
            "description": "Given a file containing a linked list of the structure *student\\_t*\r\nfollowing, you have to write a function to load the entire linked list\r\nfrom the file and to return a pointer to the head of this linked list.\r\nAssume that, in the file, if **a** is followed by **b**, you will have\r\n`a->next = b`.\r\n\r\n``` {.c}\r\ntypedef struct student{\r\n    struct student* next;\r\n    int noma;\r\n} student_t;\r\n```\r\n\r\nIn this exercice, you **cannot** use *fopen*, *read*, *fread*, *fgetc*,\r\n*fgets*, which means that you must use\r\n[mmap(2).](https://sites.uclouvain.be/SystInfo/manpages/man2/mmap.2.html)\r\n\r\nIn case of error (using malloc), you have to free **all** the memory you\r\nhave allocated.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Louis Navarre",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Close",
                    "category": 0
                },
                {
                    "text": "Open",
                    "category": 0
                },
                {
                    "text": "Pointer",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "Beta, S5"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/array_mmap",
            "archive_properties": {
                "folders": [
                    "array_mmap"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Traduction de code assembleur",
            "description": "Le syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants :\r\n\r\n-   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n-   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels systèmes)\r\n-   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\n    librairies)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/asm1",
            "archive_properties": {
                "folders": [
                    "asm1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Traduction de code assembleur",
            "description": "Le syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants :\r\n\r\n-   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n-   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels systèmes)\r\n-   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions des\r\n    librairies)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/asm2",
            "archive_properties": {
                "folders": [
                    "asm2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Traduction de code assembleur",
            "description": "Le syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants :\r\n\r\n:   -   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels\r\n        systèmes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\n        des librairies)\r\n\r\n**Attention:** veuillez utiliser la version **HTML** du syllabus\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/asm3",
            "archive_properties": {
                "folders": [
                    "asm3"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Traduction de code assembleur",
            "description": "Le syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants :\r\n\r\n:   -   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels\r\n        systèmes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\n        des librairies)\r\n\r\n**Attention:** veuillez utiliser la version **HTML** du syllabus\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/asm4",
            "archive_properties": {
                "folders": [
                    "asm4"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Simple linked list",
            "description": "We ask you to write two simple functions that are needed to implement a\r\nsimple linked list.\r\n\r\n``` {.c}\r\n/**\r\n* Structure node\r\n*\r\n* @next: pointer to the next node in the list, NULL if last node_t\r\n* @value: value stored in the node\r\n*/\r\ntypedef struct node {\r\n  struct node *next;\r\n  int value;\r\n} node_t;\r\n\r\n/**\r\n* Structure list\r\n*\r\n* @first: first node of the list, NULL if list is empty\r\n* @size: number of nodes in the list\r\n*/\r\ntypedef struct list {\r\n  struct node *first;\r\n  int size;\r\n} list_t;\r\n```\r\n\r\n**In your functions, you cannot use the function**\r\n[calloc(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Malloc",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/basic_linked_list",
            "archive_properties": {
                "folders": [
                    "basic_linked_list"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Bitwise operation: high order bits",
            "description": "In this exercise, we will work with operation on bits. When we speak\r\nabout the position of a bit, index 0 corresponds to lowest order bit, 1\r\nto the second-lowest order bit, \\...\r\n\r\nIn C source code, you can write a number in binary (base 2) by prefixing\r\nit via 0b., e.g. 0b11010 = 26.\r\n\r\nThis exercise will introduce some non-standard data types which\r\nguarantee that the variable has a fixed number of bits. Indeed, on some\r\nmachines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to\r\nperform bitwise operations, we have to know first on how many bits we\r\nare working.\r\n\r\nFor this, C introduces a new class of variable types :\r\n\r\n-   *int8\\_t* (signed integer of 8 bits)\r\n-   *uint8\\_t* (unsigned integer of 8 bits)\r\n-   *uint16\\_t* (unsigned integer of 16 bits)\r\n\r\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These\r\ntypes are defined in \\<stdint.h\\>\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bits_leftmost",
            "archive_properties": {
                "folders": [
                    "bits_leftmost"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Bitwise operation: extract low order bits",
            "description": "In this exercise, we will work with operations on bits. When we speak\r\nabout the position of a bit, index 0 corresponds to lowest order bit, 1\r\nto the second-lowest order bit, \\...\r\n\r\nIn C source code, you can write a number in binary (base 2) by prefixing\r\nit via 0b., e.g. `0b11010` = 26.\r\n\r\nThis exercise will introduce some non-standard data types which\r\nguarantee that the variable has a fixed number of bits. Indeed, on some\r\nmachines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to\r\nperform bitwise operations, we have to know first on how many bits we\r\nare working.\r\n\r\nFor this, C introduces a new class of variable types :\r\n\r\n-   *int8\\_t* (signed integer of 8 bits)\r\n-   *uint8\\_t* (unsigned integer of 8 bits)\r\n-   *uint16\\_t* (unsigned integer of 16 bits)\r\n\r\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These\r\ntypes are defined in \\<stdint.h\\>\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bits_rightmost",
            "archive_properties": {
                "folders": [
                    "bits_rightmost"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Bitwise operation: cycling bits",
            "description": "In this exercise, we will work with operations on bits. When we speak\r\nabout the position of a bit, index 0 corresponds to lowest order bit, 1\r\nto the second-lowest order bit, \\...\r\n\r\nIn C source code, you can write a number in binary (base 2) by prefixing\r\nit via 0b., e.g. 0b11010 = 26.\r\n\r\nThis exercise will introduce some non-standard data types which\r\nguarantee that the variable has a fixed number of bits. Indeed, on some\r\nmachines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to\r\nperform bitwise operations, we have to know first on how many bits we\r\nare working.\r\n\r\nFor this, C introduces a new class of variable types :\r\n\r\n-   *int8\\_t* (signed integer of 8 bits)\r\n-   *uint8\\_t* (unsigned integer of 8 bits)\r\n-   *uint16\\_t* (unsigned integer of 16 bits)\r\n\r\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These\r\ntypes are defined in \\<stdint.h\\>\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bits_spin",
            "archive_properties": {
                "folders": [
                    "bits_spin"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Bitwise operation: resetting the highest order bit",
            "description": "In this exercise, we will work with operations on bits. When we speak\r\nabout the position of a bit, index 0 corresponds to lowest order bit, 1\r\nto the second-lowest order bit, \\...\r\n\r\nIn C source code, you can write a number in binary (base 2) by prefixing\r\nit via 0b., e.g. 0b11010 = 26.\r\n\r\nThis exercise will introduce some non-standard data types which\r\nguarantee that the variable has a fixed number of bits. Indeed, on some\r\nmachines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to\r\nperform bitwise operations, we have to know first on how many bits we\r\nare working.\r\n\r\nFor this, C introduces a new class of variable types :\r\n\r\n-   *int8\\_t* (signed integer of 8 bits)\r\n-   *uint8\\_t* (unsigned integer of 8 bits)\r\n-   *uint16\\_t* (unsigned integer of 16 bits)\r\n\r\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These\r\ntypes are defined in \\<stdint.h\\>\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bits_strong",
            "archive_properties": {
                "folders": [
                    "bits_strong"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Bitwise operation: counting set bits",
            "description": "In this exercise, we will work with operations on bits. When we speak\r\nabout the position of a bit, index 0 corresponds to lowest order bit, 1\r\nto the second-lowest order bit, \\...\r\n\r\nIn C source code, you can write a number in binary (base 2) by prefixing\r\nit via 0b., e.g. 0b11010 = 26.\r\n\r\nThis exercise will introduce some non-standard data types which\r\nguarantee that the variable has a fixed number of bits. Indeed, on some\r\nmachines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to\r\nperform bitwise operations, we have to know first on how many bits we\r\nare working.\r\n\r\nFor this, C introduces a new class of variable types :\r\n\r\n-   *int8\\_t* (signed integer of 8 bits)\r\n-   *uint8\\_t* (unsigned integer of 8 bits)\r\n-   *uint16\\_t* (unsigned integer of 16 bits)\r\n\r\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These\r\ntypes are defined in \\<stdint.h\\>\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bits_sum",
            "archive_properties": {
                "folders": [
                    "bits_sum"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Opérations sur les bits",
            "description": "On souhaite effectuer des opérations spécifiques sur certains bits d\\'un\r\nentier non-signé de 32 bits. Lorsque l\\'on parle de position, l\\'indice\r\n0 correspond au bit le plus faible, et 31 au bit le plus fort. Dans cet\r\nexercice, un [unsigned char]{.title-ref} représente toujours un seul bit\r\net ne pourra donc que prendre les valeurs numériques 0 ou 1 (et non\r\n\\'0\\' et \\'1\\')\r\n\r\nÉcrivez une fonction [unsigned char get\\_bit(unsigned int x, unsigned\r\nint pos)]{.title-ref} qui renvoie le bit à la position [pos]{.title-ref}\r\nde x.\r\n\r\nÉcrivez une fonction [unsigned int set\\_bit(unsigned int x, unsigned int\r\npos, unsigned char value)]{.title-ref} qui met le bit à la position\r\n[pos]{.title-ref} de x à la valeur [value]{.title-ref}.\r\n\r\nÉcrivez une fonction [unsigned char get\\_3\\_leftmost\\_bits(unsigned int\r\nx)]{.title-ref} qui renvoie les 3 bits les plus à gauches de x. Par\r\nexemple, si on a la séquence 11011001, la fonction doit renvoyer la\r\nvaleur correspondant à 00000110.\r\n\r\nÉcrivez une fonction [unsigned char get\\_4\\_rightmost\\_bits(unsigned int\r\nx)]{.title-ref} qui renvoie les 4 bits les plus à droite de x.\r\n\r\nÉcrivez une fonction [unsigned int unset\\_last\\_bit(unsigned int\r\nx)]{.title-ref} qui met à 0 le premier bit de poids fort à 1 qu\\'il\r\ntrouve, et ne fait rien s\\'il n\\'y a pas de bit mis à 1.\r\n\r\nÉcrivez une fonction [unsigned int cycle\\_bits(unsigned int x, unsigned\r\nint n)]{.title-ref} qui déplace tous les bits de n places vers la gauche\r\nselon la formule x\\[(i+n)%32\\] = x\\[i\\] où x\\[i\\] représente le ième bit\r\nde x.\r\n\r\nVous pouvez faire appel aux fonctions [get\\_bit]{.title-ref} et\r\n[set\\_bit]{.title-ref} dans les autres.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bitwise-ops",
            "archive_properties": {
                "folders": [
                    "bitwise-ops"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Gestion d'une librairie",
            "description": "On souhaite gérer le catalogue d\\'une librairie dans lequel chaque livre\r\nest identifié par son auteur et son titre. La structure de données\r\nchoisie est la suivante : il y a une liste chaînée d\\'auteurs dont\r\nchaque élément pointe vers une liste chaînée d\\'ouvrages.\r\n\r\n``` {.c}\r\ntypedef struct cellAuteur {\r\n    char *auteur;\r\n    struct cellLivre *Livres;\r\n    struct cellAuteur *next;\r\n} cellAuteur;\r\n\r\ntypedef struct cellLivre {\r\n    char *titre;\r\n    struct cellLivre *suiv;\r\n} cellLivre;\r\n```\r\n\r\nÉcrivez une fonction [cellAuteur \\*existe(cellAuteur \\*librairie, char\r\n\\*strAuteur)]{.title-ref} qui teste si un auteur existe dans la liste\r\nlibrairie et dans ce cas renvoie un pointeur sur sa cellule de la liste\r\n(et NULL sinon).\r\n\r\nÉcrivez une fonction [int compteOuvrage(cellAuteur \\*librairie, char\r\n\\*strAuteur)]{.title-ref} qui compte le nombre de livres d\\'un auteur\r\ndans la liste librairie.\r\n\r\nÉcrivez une fonction [void add(cellAuteur \\*librairie, char \\*strAuteur,\r\nchar \\*strTitre)]{.title-ref} qui ajoute dans le catalogue un livre de\r\nl\\'auteur indiqué. L\\'auteur existe dans le catalogue. Un même livre ne\r\npeut pas être présent 2 fois dans la catalogue.\r\n\r\nÉcrivez une fonction [void supprimer(cellAuteur \\*\\*librairie, char\r\n\\*strAuteur)]{.title-ref} qui supprime du catalogue un auteur et tous\r\nses livres. L\\'auteur existe dans le catalogue.\r\n\r\nVous avez accès aux fonctions de [string.h]{.title-ref}.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/bookstore",
            "archive_properties": {
                "folders": [
                    "bookstore"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Simple Binary Search Tree",
            "description": "For this task, you will implement a simple binary search on an existing\r\nbinary tree. A binary tree has the following structure:\r\n\r\n![image](BST/bst.png){width=\"540px\" height=\"340px\"}\r\n\r\nThis binary tree is composed of nodes implemented using the following\r\nstructure.\r\n\r\n``` {.c}\r\n/*\r\n* Node has a value, @value, and two children, @left and @right.\r\n* All the children of @left and itself have a smaller value than the node and all the children of @right and itself have a larger value than node\r\n*/\r\ntypedef struct node{\r\n    int value;\r\n    struct node* left; // to smaller values\r\n    struct node* right; // to larger values\r\n} node_t;\r\n```\r\n\r\nThe binary tree itself is defined as follows.\r\n\r\n``` {.c}\r\ntypedef struct bt{\r\n    struct node* root;\r\n} bt_t;\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/BST",
            "archive_properties": {
                "folders": [
                    "BST"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "BST : Insert and Delete",
            "description": "To help you study your english course, you\\'ve got the wonderful idea of\r\ncreating a Binary Search Tree (BST). This will also help you to study\r\nfor the LSINF1252 course! The key of each node will be the english word\r\nand the value will be the french word corresponding. Those are\r\nrepresented using an array of char. So let\\'s define our 2 structures :\r\n\r\n``` {.c}\r\ntypedef struct bt {\r\n    struct node *root;\r\n} bt_t;\r\n\r\ntypedef struct node {\r\n    char *enWord;\r\n    char *frWord;\r\n    struct node *left;\r\n    struct node *right;\r\n} node_t;\r\n```\r\n\r\n**What is a Binary Search Tree (BST) ?**\r\n\r\nA Binary Search Tree is a tree for which every node has a special\r\nproperty : the subtree defined by node.left only contains keys(enWord)\r\nlower than the node\\'s key. Similarly, the subtree defined by node.right\r\nonly contains keys higher than the node\\'s key. This is helpful when\r\nsearching for a specific key in the data structure.\r\n\r\nTODO : SCHEME NEEDED + EXPLAIN WHICH NODE IS THE ROOT. + CHANGE THE CODE\r\n: word -\\> enWord, definition -\\> frWord.\r\n\r\n**Your mission**\r\n\r\nYour mission will be to implement the **insert** and the **delete**\r\nfunctions.\r\n\r\n-   **Insert** function :\r\n\r\nFor each node we know this : every key (*enWord*) in the node.left\r\nsubpart is lower than the key of the node. Similarly, every key\r\n(*enWord*) in the node.right subpart is lower than the key of the node.\r\nWe use the alphabetical order to check if one word is lower or higher\r\nthan another one.\r\n\r\n-   **Delete** function :\r\n\r\nDeleting a node in a tree like that might not be easy ! That\\'s why\r\nI\\'ll explain you how to proceed (you\\'ll have to use this procedure in\r\norder to get the points). If the node we want to delete has 0 or only 1\r\nchild, it\\'s quite easy, we only have to replace this node by his child\r\n(if there is one). When it comes to a node which has two children, it\\'s\r\nharder. We first have to find the right subtree\\'s leftmost child. In\r\nthe example, if we want to suppress *XXX*, the leftmost node of the\r\nright subpart is *YYY*. Then, we can move *YYY* to *XXX* and replace\r\n*YYY* by his child (if it has one).\r\n\r\nSCHEME NEEDED for XXX and YYY.\r\n\r\n*Hints :*\r\n\r\n-   `char *enWord` and `char *frWord` are pointers, memory must be\r\n    allocated by using\r\n    [malloc(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html)\r\n    to copy the strings in the tree.\r\n-   Other useful commands:\r\n    [strcpy(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/strcpy.3.html),\r\n    [strlen(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/strlen.3.html)\r\n    and\r\n    [strcmp(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/strcmp.3.html).\r\n-   Do not forget to free **all** the allocated space deleting an\r\n    element.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Alexandre Gobeaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/BST-Insert_Delete",
            "archive_properties": {
                "folders": [
                    "BST-Insert_Delete"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Parcours d'un arbre binaire de recherche",
            "description": "On souhaite parcourir un arbre binaire de recherche. Un arbre de\r\nrecherche binaire est une structure de données où chaque nœud possède\r\nune clé et une valeur. En outre, chaque nœud peut avoir 2 nœuds fils :\r\nun à gauche dont la clé est toujours inférieure à la sienne, et un à\r\ndroite dont la clé est toujours supérieure à la sienne. Autrement dit si\r\nvous êtes à un nœud dont la clé vaut 10 et que vous cherchez un nœud\r\ndont la clé vaut 5, vous savez que vous devez descendre à gauche pour\r\nespérer trouver un éventuel nœud dont la clé vaut 5.\r\n\r\n``` {.c}\r\ntypedef struct BSTreeNode {\r\n    int key;\r\n    int value;\r\n\r\n    struct BSTreeNode *left;\r\n    struct BSTreeNode *right;\r\n} Node;\r\n```\r\n\r\nÉcrivez une fonction [int has\\_key(Node root, int key)]{.title-ref} qui\r\nvérifie si l\\'arbre binaire dont le sommet est le nœud root possède un\r\nnœud dont la clé vaut key et renvoie 1 si oui, renvoie 0 sinon.\r\n\r\nÉcrivez une fonction [int compare(Node root\\_a, Node\r\nroot\\_b)]{.title-ref} qui vérifie si les 2 arbres binaires passés en\r\nargument sont identiques (ils ont la même structure et tous les nœuds\r\npossèdent la même paire clé/valeur). Renvoie 1 si les arbres sont\r\nidentiques, 0 sinon. Indice : pensez récursivement.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/btree-access",
            "archive_properties": {
                "folders": [
                    "btree-access"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Coder calloc en utilisant malloc",
            "description": "Ecrire la fonction `calloc2`, ayant le même prototype et le même\r\nfonctionnement que\r\n[calloc(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/calloc.3.html)\r\nmais qui utilise\r\n[malloc(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html)\r\npour allouer la mémoire.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/calloc2",
            "archive_properties": {
                "folders": [
                    "calloc2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Comparing functions",
            "description": "Pointers to functions can be used to handle functions in a dynamic\r\nfashion, and will be of great importance later in this course. It is\r\nhence important to grasp how they work.\r\n\r\nIn this exercise, you will code a function which receives pointers to\r\ntwo functions, to determine if these functions are equivalent. Two\r\nfunctions are considered to be equivalent if they always produce the\r\nsame output for the same input.\r\n\r\nThe functions passed by pointers will be of the form\r\n`uint8_t func(uint8_t n)`.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/cmp_func",
            "archive_properties": {
                "folders": [
                    "cmp_func"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Le programme test",
            "description": "La commande\r\n[test(1)](https://sites.uclouvain.be/SystInfo/manpages/man1/test.1.html)\r\npermet d\\'évaluer une expression passée en paramètre. Elle retourne:\r\n\r\n-   `0` si l\\'expression passée en argument est vraie\r\n-   `1` si l\\'expression passée en argument est fausse\r\n\r\nOn vous demande d\\'écrire un sous-ensemble de la commande\r\n[test(1)](https://sites.uclouvain.be/SystInfo/manpages/man1/test.1.html)\r\nen C. Les expressions à implémenter sont `-eq`, `-ge`, `-gt`, `-le`,\r\n`-lt` et `-ne`.\r\n\r\nPour rappel, la commande\r\n[test(1)](https://sites.uclouvain.be/SystInfo/manpages/man1/test.1.html)\r\nest décrite dans la [page de\r\nmanuel](https://sites.uclouvain.be/SystInfo/manpages/man1/test.1.html)\r\nqui lui est consacrée.\r\n\r\nPour répondre à cette question, vous devez structurer votre programme\r\navec des appels de sous-fonction et donc de ne pas faire toute\r\nl\\'exécution dans la fonction `main()`.\r\n\r\nIl existe plusieurs façons pour tester votre code, une de ces façons est\r\nde regarder dans le shell le contenu de la variable `$?` après chaque\r\nexécution de votre programme. Une autre façon est de profiter de\r\nl\\'instruction conditionnelle `if-then-else` du shell.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Gregory Detal",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Fabien Duchêne",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/commandetest",
            "archive_properties": {
                "folders": [
                    "commandetest"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Count the '\\0'",
            "description": "The character \\'\\\\0\\' identifies the end of a string in C. But it can\r\nalso play the role of a real character.\r\n\r\nIn this exercice, write the body of the function `counting_zero`, which\r\ncounts the number of occurence of the character \\'\\\\0\\'.\r\n\r\nYou cannot use any function from the string library.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Louis Navarre",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                },
                {
                    "text": "Sum",
                    "category": 0
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/count_zero",
            "archive_properties": {
                "folders": [
                    "count_zero"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Jeu de dames: tests de base",
            "description": "```{=html}\r\n<p>\r\n  Cette tâche vous permet de vérifier que votre programme de jeu de dames passe les vérifications de base, telles que présence et fonctionnement du Makefile, nommage correct des exécutables, etc. Si votre programme ne passe pas ces tests, il ne sera <b>pas corrigé</b>.\r\n</p>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "David Lebrun",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/dames",
            "archive_properties": {
                "folders": [
                    "dames"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Liste doublement chaînée",
            "description": "Le syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants :\r\n\r\n:   -   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels\r\n        systèmes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\n        des librairies)\r\n\r\n**Attention:** veuillez utiliser la version **HTML** du syllabus\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/DoubleLL",
            "archive_properties": {
                "folders": [
                    "DoubleLL"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Manipulation de liste",
            "description": "Le syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants :\r\n\r\n:   -   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels\r\n        systèmes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\n        des librairies)\r\n\r\n**Attention:** veuillez utiliser la version **HTML** du syllabus\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/EmployeList",
            "archive_properties": {
                "folders": [
                    "EmployeList"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Factorial",
            "description": "The factorial of an integer *n!* is defined as `n! = 1*2*3*...*(n-1)*n`,\r\nwith *0! = 1*.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S1",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/factorial",
            "archive_properties": {
                "folders": [
                    "factorial"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Parcours de fichiers",
            "description": "Parcourez un fichier sans jamais utiliser l\\'appel système read. Le\r\nsyllabus est accessible depuis <http://sites.uclouvain.be/SystInfo>\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/Filemap",
            "archive_properties": {
                "folders": [
                    "Filemap"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Déterminer la valeur de retour d'un programme exécutable",
            "description": "Dans un programme similaire à un shell, on vous demander d\\'écrire une\r\nfonction qui permet de lancer un exécutable et d\\'indiquer si :\r\n\r\n-   le programme ne s\\'est pas exécuté ou a retourné une valeur de\r\n    retour positive\r\n-   le programme s\\'est exécuté correctement et a retourné une valeur de\r\n    retour =0\r\n-   le programme a été interrompu par un signal\r\n\r\nLe syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants :\r\n\r\n:   -   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels\r\n        systèmes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\n        des librairies)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/fork",
            "archive_properties": {
                "folders": [
                    "fork"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Threads : plus grand commun diviseur",
            "description": "On cherche à calculer le plus grand commun diviseur de deux très grands\r\nnombres. Pour ce faire, on calcule tous les diviseurs de chacun des 2\r\nnombres, et on regarde quel est leur PGCD. Pour ce faire, on déclare la\r\nliste chaînée suivante, permettant d\\'enregistrer en mémoire les\r\ndiviseurs d\\'un nombre :\r\n\r\n``` {.c}\r\nstruct Node {\r\n    unsigned int divisor;\r\n    struct Node *next;\r\n};\r\n```\r\n\r\nÉcrivez une fonction [void \\*factorize(void \\*n)]{.title-ref} qui\r\nretourne un pointeur vers une liste chaînée contenant tous les diviseurs\r\ndans l\\'ordre décroissant du nombre de type [unsigned int]{.title-ref}\r\nvers lequel n pointe.\r\n\r\nÉcrivez une fonction [unsigned int gcd(unsigned int a, unsigned int\r\nb)]{.title-ref} qui va lancer l\\'exécution de [factorize]{.title-ref}\r\npour a et b dans 2 threads différents et va extraire des deux listes\r\nrenvoyées le PGCD. Le nombre 1 est considéré comme un diviseur. Cette\r\nfonction renvoie 0 si une erreur s\\'est produite.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/gcd",
            "archive_properties": {
                "folders": [
                    "gcd"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Conversions hexadécimales",
            "description": "On souhaite convertir un entier non signé vers sa représentation\r\nhexadécimale. Par exemple l\\'entier 42 vaut \\\"2A\\\" en hexadécimal. De\r\nmême, on souhaite faire la conversion dans l\\'autre sens.\r\n\r\nÉcrivez une fonction [unsigned int hex\\_to\\_int(char \\*hex)]{.title-ref}\r\nqui prend en argument une chaîne de caractères représentant un nombre\r\nhexadécimal (cette chaîne ne peut comporter que les chiffres de 0 à 9 et\r\nles lettres A à F).\r\n\r\nÉcrivez une fonction [char \\*int\\_to\\_hex(unsigned int value, char\r\n\\*dest)]{.title-ref} qui prend en argument un entier non-signé et\r\nenregistre sa représentation hexadécimale dans la chaîne de caractères\r\nindiquée par dest. On suppose que dest est un tableau de 9 char au\r\nminimum. La fonction devra toujours renvoyer le pointeur dest.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/hexadecimal",
            "archive_properties": {
                "folders": [
                    "hexadecimal"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Indexation d'un texte",
            "description": "On souhaite indexer un texte afin de savoir quels mots reviennent le\r\nplus fréquemment dans un corpus. Le processus d\\'indexation se fait en 2\r\nphases : on compte d\\'abord le nombre d\\'occurrences de chaque mot, et\r\non supprime ensuite de la table d\\'indexation tous les mots qui n\\'ont\r\npas été indexés au moins N fois. Le corpus est une chaîne de caractères\r\ncomposées uniquement de minuscules et où le seul délimiteur est un\r\nespace (pas de ponctuation). Votre programme n\\'est jamais censé\r\nproduire d\\'erreurs de segmentation.\r\n\r\nOn définit la structure suivante représentant une entrée de l\\'index :\r\n\r\n``` {.c}\r\ntypedef struct indexEntry {\r\n    char word[26];\r\n    int count; //nombre de fois qu'un mot est apparu dans le corpus\r\n    struct indexEntry *next;\r\n} Entry;\r\n```\r\n\r\nÉcrivez une fonction [Entry \\*build\\_index(char \\*corpus)]{.title-ref}\r\nqui renvoie l\\'index associé au corpus passé en paramètre. Vous pouvez\r\nmodifier la chaine passée en argument.\r\n\r\nÉcrivez une fonction [void filter\\_index(Entry \\*\\*index\\_head, int\r\ntreshold)]{.title-ref} qui supprime de l\\'index tous les mots qui n\\'ont\r\npas été recensés au moins treshold fois.\r\n\r\nVous avez accès aux fonctions de [string.h]{.title-ref} et de\r\n[stdlib.h]{.title-ref}.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/index-text",
            "archive_properties": {
                "folders": [
                    "index-text"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Tri par insertion",
            "description": "On désire implémenter un algorithme de tri par insertion sur un tableau\r\nde N entiers, le tableau et sa taille étant passés en argument.\r\n\r\nL\\'algorithme de tri est le suivant : Pour chaque élément d\\'indice i (i\r\nvariant de 1 à N-1)\r\n\r\n-   cet élément devient la clé\r\n-   on la compare avec l\\'élément d\\'indice i-1\r\n-   si la clé est plus petite, on les échange et on recommence la\r\n    comparaison avec l\\'élément précédent (d\\'indice i-2) et ainsi de\r\n    suite, tant que la clé est plus petite que l\\'élément qui lui\r\n    précède (ou qu\\'on est revenu au début du tableau)\r\n-   quand la clé est à sa place (c\\'est-à-dire qu\\'elle est plus grande\r\n    que ou égale à l\\'élément qui lui précède), la boucle intérieure est\r\n    finie et on passe à l\\'élément d\\'indice i+1.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/insertion-sort",
            "archive_properties": {
                "folders": [
                    "insertion-sort"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Intersection de fichiers",
            "description": "Le syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants :\r\n\r\n:   -   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels\r\n        systèmes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\n        des librairies)\r\n\r\n**Attention:** veuillez utiliser la version **HTML** du syllabus\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/intersection",
            "archive_properties": {
                "folders": [
                    "intersection"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Listes chaînées: concepts de base",
            "description": "```{=html}\r\n<p>\r\n  Une liste chaînée est une structure de données permettant de représenter une séquence d’éléments. Dans cet exercice, une liste chaînée sera représentée par un pointeur sur la structure suivante:\r\n</p>\r\n<pre class=\"code\">\r\ntypedef struct node {\r\n  int value;\r\n  struct node *next;\r\n} node;\r\n</pre>\r\n<p>\r\n  La liste vide est représentée par un pointeur nul. Le but des questions suivantes est de vous familiariser avec les listes chaînées en C. (Remarque : vous ne devez jamais traiter le cas des listes contenant un cycle.)\r\n</p>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/linked_lists_1",
            "archive_properties": {
                "folders": [
                    "linked_lists_1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Listes chaînées: exercices avancés",
            "description": "```{=html}\r\n<p>\r\n  Cet exercice contient des exercices plus avancés sur les listes chaînées. Il est conseillé de commencer par le premier exercice sur les listes chaînées avant celui-ci. À nouveau, une liste chaînée sera représentée par un pointeur sur la structure suivante\r\n</p>\r\n<pre class=\"code\">\r\n     typedef struct node {\r\n       int value; /* valeur du nœud */\r\n       struct node *next; /* pointeur vers l’élément suivant */\r\n     } node;\r\n</pre>\r\n<p>\r\n  La liste vide est représentée par un pointeur nul. Le but de l’exercice est de comprendre comment manipuler les pointeurs pour modifier des structures chaînées.\r\n</p>\r\n<p>\r\n  Dans toutes les sous-questions, vous devez réutiliser les nœuds des listes passées en argument et modifier leur structure. Il n’est jamais nécessaire d’allouer un nouveau nœud. (Remarque : vous ne devez jamais traiter le cas des listes contenant un cycle.)\r\n</p>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/linked_lists_2",
            "archive_properties": {
                "folders": [
                    "linked_lists_2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Filtering a linked list",
            "description": "You have a linked list. Each element of the list is a `struct node`.\r\n\r\n``` {.c}\r\nstruct node {\r\n    struct node *next;\r\n    int hash;\r\n    int id;\r\n    char name[20];\r\n    char buffer[100];\r\n    unsigned int timestamp;\r\n    char acl;\r\n    short flow;\r\n    char *parent;\r\n    void *fifo;\r\n};\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/linked_structs",
            "archive_properties": {
                "folders": [
                    "linked_structs"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Reading arguments",
            "description": "When you execute a C program, its function `main()` is called with, as\r\nparameters, the name of the program and the arguments after the\r\nexecutable\\'s name.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "S2"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/main_argc",
            "archive_properties": {
                "folders": [
                    "main_argc"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "malloc, realloc et free INCOMPLETE",
            "description": "La type de la plupart des variables en C est facile à déterminer.\r\nNéanmoins, le C contient aussi des types qui ne diffèrent que de façons\r\nsubtiles, comme les\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/malloc",
            "archive_properties": {
                "folders": [
                    "malloc"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Multiplication de matrices",
            "description": "Écrivez une fonction\r\n`int access(int *A, int taille, int ordonnee, int abscisse)` qui renvoie\r\nl\\'élément d\\'abscisse et d\\'ordonnée indiquées dans une matrice carrée\r\ntaille x taille d\\'entiers (il s\\'agit donc de l\\'élément\r\n[A\\[ordonnee\\]\\[abscisse\\]]{.title-ref}). Les indices\r\n[ordonnee]{.title-ref} et [abscisse]{.title-ref} vont de 1 à\r\n[taille]{.title-ref}.\r\n\r\nÉcrivez une fonction qui effectue la multiplication de deux matrices\r\ncarrées taille x taille d\\'entiers. Le prototype de la fonction est la\r\nsuivante : [void mult(int \\*A, int \\*B, int \\*C, int\r\ntaille)]{.title-ref} et elle calcule C = A x B. Les trois matrices sont\r\nstockées sous forme de tableau ligne par ligne et la place de la matrice\r\nC est déjà allouée.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/matrix-mult",
            "archive_properties": {
                "folders": [
                    "matrix-mult"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "strlen, strcat et strcasecmp",
            "description": "La libraire\r\n[string(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/string.3.html)\r\nimplémente un grand nombre de fonctions de manipulation des strings qui\r\nvous seront utiles lors de différents projets de programmation.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Pointer",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S2"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/mini-projet-string",
            "archive_properties": {
                "folders": [
                    "mini-projet-string"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Reading from the wire",
            "description": "Back in 1977, you want to read your e-mail with your freshly bought\r\nApple II. You are connected to the ARPANET through a modem, but\r\nunfortunately the modem\\'s manufacturer has only given a single function\r\n`modem_read`, to read the data received by the modem, with the following\r\nprototype :\r\n\r\n`void modem_read(void *buffer, int *buf_len);`\r\n\r\nThis function fills the supplied buffer with the data received from the\r\nmodem (an array of `char`), and writes the number of bytes written to\r\nthe value pointed by `buf_len`. It can write up to maximum 256 bytes in\r\na single call. This function is guaranteed to return.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Pointer",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/modem_read",
            "archive_properties": {
                "folders": [
                    "modem_read"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Manipulate the memory",
            "description": "Given the following structure *university\\_t*:\r\n\r\n``` {.c}\r\ntypedef struct university {\r\n    char* city;\r\n    int creation;\r\n    person_t* rector;\r\n} university_t;\r\n```\r\n\r\nAnd the structure *person\\_t*:\r\n\r\n``` {.c}\r\ntypedef struct person {\r\n    char* name;\r\n    int salary;\r\n    int age;\r\n} person_t;\r\n```\r\n\r\nYou are asked to implement the functions `init_all` and `free_all`,\r\nwhich respectively initialises the structure *universiy\\_t* and frees\r\nall the memory associated with it.\r\n\r\nThe *name* and the *city* have been allocated with *malloc*.\r\n\r\n*Hint:* all the data may not have been initialised correctly. Therefore,\r\nyou have to handle all the cases (e.g. some pointers can be already\r\nNULL, and don\\'t need to be freed).\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Louis Navarre",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Alexandre Gobeaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S3",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/multi-free",
            "archive_properties": {
                "folders": [
                    "multi-free"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Mes propres sémaphores",
            "description": "On souhaite écrire notre propre type de sémaphore à l\\'aide de mutex. On\r\ndéclare pour ce faire les 2 structures suivantes :\r\n\r\n``` {.c}\r\ntypedef struct semProcess {\r\n    pthread_mutex_t mutex;\r\n    struct semProcess *next;\r\n} sem_process_t;\r\n\r\ntypedef struct mySem {\r\n    int value;\r\n    int capacity;\r\n    sem_process_t *blocked_procs;\r\n    pthread_mutex_t mutex;\r\n} mysem_t;\r\n```\r\n\r\nChaque sémaphore contient une valeur et une liste de processus bloqués.\r\nLe mutex de mySem devra être utilisé pour éviter que des appels\r\nconcurrents des fonctions sousmentionnées sur la même sémaphore ne\r\nsoient pas exécutés simultanément.\r\n\r\nÉcrivez une fonction [int mysem\\_wait(mysem\\_t \\*sem)]{.title-ref} qui\r\nbloque le fil d\\'exécution si [value]{.title-ref} de [sem]{.title-ref}\r\nvaut 0 et ajoute le processus à la fin de la liste des processus\r\nbloqués. Pour bloquer un processus, vous devrez ajouter un\r\n[sem\\_process\\_t]{.title-ref} à [blocked\\_procs]{.title-ref} du\r\nsémaphore et verrouiller le mutex de [sem\\_process\\_t]{.title-ref}. Si\r\n[value]{.title-ref} est plus grand que 0, il est décrémenté.\r\n\r\nÉcrivez une fonction [int mysem\\_post(mysem\\_t \\*sem)]{.title-ref} qui\r\nincrémente [value]{.title-ref} de [sem]{.title-ref} si aucun autre\r\nprocessus n\\'est bloqué, et sinon débloque le premier processus de la\r\nliste des processus bloqués. [value]{.title-ref} ne peut jamais excéder\r\n[capacity]{.title-ref}. **ATTENTION** : Ne libérez pas la structure\r\nsem\\_process\\_t d\\'un processus libéré, contentez-vous de supprimer son\r\nmutex. Considérez que la fonction [mysem\\_close]{.title-ref} que vous\r\nn\\'avez pas à implémenter s\\'occupe de la libération des ressources.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/my-sem",
            "archive_properties": {
                "folders": [
                    "my-sem"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "My strlen - REVIEWED",
            "description": "Your objective is to implement\r\n[strlen](https://sites.uclouvain.be/SystInfo/manpages/man3/strlen.3.html)\r\none of the basic functions of the C library that deals with strings.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/my_strlen",
            "archive_properties": {
                "folders": [
                    "my_strlen"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Ordered  linked list",
            "description": "Given the provided implementation of a linked list, you need to\r\nimplement the `insert` function based on a specific order relation. The\r\ngoal is to implement an ordered list similar to a\r\n[LinkedList]{.title-ref} with a [Comparator]{.title-ref} in Java.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/order_relation_linked_list",
            "archive_properties": {
                "folders": [
                    "order_relation_linked_list"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Soumission du projet de seconde session",
            "description": "Cette tâche permet de vérifier la validité de l\\'archive à soumettre\r\npour le projet de seconde session sur les matrices creuses. Une archive\r\nne passant pas le test ne sera pas corrigée.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/p3check",
            "archive_properties": {
                "folders": [
                    "p3check"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Palindrome",
            "description": "Palindrome are strings of text which read the same backward as forward,\r\ni.e. : \\\"racecar\\\", \\\"a man a plan a canal panama\\\" or \\\"kayak\\\".\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/palindrome",
            "archive_properties": {
                "folders": [
                    "palindrome"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Producteurs/Consommateurs",
            "description": "Le syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants :\r\n\r\n:   -   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels\r\n        systèmes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\n        des librairies)\r\n\r\n**Attention:** veuillez utiliser la version **HTML** du syllabus\r\n\r\n![image](PC/buffer.png)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/PC",
            "archive_properties": {
                "folders": [
                    "PC"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Pointer arithmetic",
            "description": "A hacker wanted to challenge you and encrypted your hard drive. To\r\nunlock your drive, he gave you a function\r\n`get_key(int a, char b, int c)` which returns the decryption key if the\r\ncorrect parameters are given.\r\n\r\nHe then hid the parameters *a*, *b* and *c* in memory, and gave you a\r\npointer from which you can retrieve these parameters.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S3",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/pointer_types",
            "archive_properties": {
                "folders": [
                    "pointer_types"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Polynômes",
            "description": "On souhaite gérer des polynômes réels de degré inférieur ou égal à 10 en\r\nutilisant la structure suivante :\r\n\r\n[typedef struct { double coeff\\[10\\]; } poly;]{.title-ref}\r\n\r\nqui servira à représenter le polynôme où coeff\\[0\\] est le coefficient\r\ndu terme indépendant, coeff\\[1\\] le coefficient du terme en x, etc.\r\n\r\nÉcrivez une fonction [double eval(poly \\*P, double x)]{.title-ref} qui\r\ncalcule la valeur du polynôme P au point x. On pourra se servir de la\r\nformule de Horner : P(x) = ((\\...(a\\_9\\*x + a\\_8)*x + a\\_7)*x + \\...)x +\r\na\\_1)\\*x + a\\_0 où a\\_i est coeff\\[i\\].\r\n\r\nÉcrivez une fonction [void derivee(poly \\*P, poly \\*Pderiv)]{.title-ref}\r\nqui inscrit dans [Pderiv]{.title-ref} la dérivée du polynôme P.\r\n\r\nÉcrivez une fonction double [racine(poly \\*P, double x0)]{.title-ref}\r\nqui calcule via la méthode de Newton la racine du polynôme P. La méthode\r\nest la suivante : on part d\\'un point initial, et on construit une suite\r\nde points qui se rapprochent de la racine en calculant à chaque étape un\r\nnouveau point à partir de la valeur du polynôme et de sa dérivée :\r\nx\\_n+1 = x\\_n - P(x\\_n)/P\\'(x\\_n). La fonction s\\'arrête lorsque\r\nabs(P(x\\_n)) \\< 0.0001. On suppose que le calcul converge toujours vers\r\nune racine.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/poly",
            "archive_properties": {
                "folders": [
                    "poly"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Printing data",
            "description": "In this exercise, you will familiarize yourself with the functions\r\n[printf(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/printf.3.html)\r\n(printing on the standard output) and\r\n[sprintf(3)](%60printf%20%3Chttps://sites.uclouvain.be/SystInfo/manpages/man3/sprintf.3.html)\r\n(text formatting).\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/printf",
            "archive_properties": {
                "folders": [
                    "printf"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Modification de fichier",
            "description": "La fonction `reverse`, dont les spécifications sont reprises ci-dessous,\r\npermet de manipuler les données dans un fichier.\r\n\r\nLe syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo> Les pages de manuel sont\r\naccessibles depuis les URLs suivants :\r\n\r\n-   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n-   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels systèmes)\r\n-   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\n    librairies)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/reverse",
            "archive_properties": {
                "folders": [
                    "reverse"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Calculatrice en notation polonaise inversée",
            "description": "La notation polonaise inversée permet d\\'écrire de façon non-ambigüe\r\nsans parenthèses des formules arithmétiques. Par exemple, le calcul ((1\r\n+ 2) × 4) + 3 peut être noté 1 2 + 4 \\* 3 + en notation polonaise\r\ninverse, ou encore 3 4 1 2 + \\* +. L\\'avantage de cette notation est\r\nqu\\'elle est très facilement compréhensible par un ordinateur : on\r\nimagine une pile où on peut soit ajouter un élément sur la pile, soit\r\nretirer le dernier élément ajouté. En parcourant la formule\r\narithmétique, si on rencontre un nombre, on l\\'ajoute à la pile, si on\r\nrencontre une opérande (par ex. le symbole \\'+\\'), on retire les 2\r\nderniers éléments de la pile, on en fait la somme et on ajoute le\r\nrésultat à la pile.\r\n\r\nPour ce problème, vous ne pourrez utiliser que la variable globale\r\n[double stack\\[STACK\\_SIZE\\]]{.title-ref}, représentant la pile, et [int\r\nstack\\_height]{.title-ref}, représentant la hauteur actuelle de la pile,\r\nqui seront déjà initialisées à 0 et accessibles par vos fonctions. Vous\r\npouvez supposer que les exemples utilisés par les tests feront en sorte\r\nque le nombre d\\'éléments actuels dans la pile ne dépassera jamais\r\n[STACK\\_SIZE]{.title-ref}.\r\n\r\nÉcrivez une fonction void push(double value)\\` qui permet d\\'ajouter\r\nl\\'élément value à la pile.\r\n\r\nÉcrivez une fonction [double pop(void)]{.title-ref} qui enlève et\r\nretourne l\\'élément au sommet de la pile.\r\n\r\nÉcrivez une fonction [double rpn(char \\*expr)]{.title-ref} qui calcule\r\nl\\'expression en notation polonaise inverse contenue dans expr et\r\nretourne le résultat. Vous pouvez supposer que [expr]{.title-ref}\r\ncontiendra toujours une expression correcte où il ne restera jamais\r\nqu\\'un seul élément sur la pile à la fin de l\\'exécution. Indice :\r\nutilisez la fonction strtok(3) pour séparer les différents éléments de\r\nla chaîne et la fonction atof(3) pour convertir l\\'éventuel nombre\r\nrencontré en double. Exemple : \\\"4 2 5 \\* + 1 3 2 \\* + /\\\" est censé\r\nrenvoyer 2. Les opérandes possibles sont + (addition), - (soustraction),\r\n\\* (multiplication) et / (division).\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/rpn-calc",
            "archive_properties": {
                "folders": [
                    "rpn-calc"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Redirection des flux de sortie et d'erreur standards",
            "description": "Dans un shell, il est parfois nécessaire d\\'exécuter des programmes en\r\nredirigeant leurs flux standards de sortie et d\\'erreur vers un fichier.\r\n\r\nLe syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants : -\r\n<http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes) -\r\n<http://sites.uclouvain.be/SystInfo/manpages/man2> (appels systèmes) -\r\n<http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions des\r\nlibrairies)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/run_redir",
            "archive_properties": {
                "folders": [
                    "run_redir"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Capture The Flag 1",
            "description": "Téléchargez [cette\r\narchive](https://inginious.info.ucl.ac.be/course/LSINF1252/s1_ctf1/archive.tar.gz),\r\nouvrez `FirstMission` et suivez les instructions. Un code individuel\r\nvous sera fourni à la fin de l\\'exercice. Entrez-le ci-dessous pour\r\nconfirmer que vous avez complètement réalisé cet exercice.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "Command line",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S1"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_ctf1",
            "archive_properties": {
                "folders": [
                    "s1_ctf1"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Capture The Flag 2",
            "description": "Téléchargez [cette\r\narchive](https://inginious.info.ucl.ac.be/course/LSINF1252/s1_ctf2/CTF2.tar.gz).\r\nPlacez son contenu dans un dossier de votre choix, lisez le fichier\r\n`FirstMission` et suivez les consignes.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "S1",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_ctf2",
            "archive_properties": {
                "folders": [
                    "s1_ctf2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Diff",
            "description": "3 students are suspected of doing illegal things with computers of the\r\nuniversity. They know that the computers send logs to the server and so\r\nhid their activity from the server. But they don\\'t know that logs are\r\nalso saved on the different computers. There are the logs from the\r\nserver and from the students, use\r\n[diff(1)](https://sites.uclouvain.be/SystInfo/manpages/man1/diff.1.html)\r\nto compare them and find which students are innocent.\r\n\r\n-   [syslog](https://inginious.info.ucl.ac.be/course/LSINF1252/s1_diff/syslog.log)\r\n-   [student\r\n    1](https://inginious.info.ucl.ac.be/course/LSINF1252/s1_diff/student1.log)\r\n-   [student\r\n    2](https://inginious.info.ucl.ac.be/course/LSINF1252/s1_diff/student2.log)\r\n-   [student\r\n    3](https://inginious.info.ucl.ac.be/course/LSINF1252/s1_diff/student3.log)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "multiple_choice"
                },
                {
                    "text": "Command line",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S1"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_diff",
            "archive_properties": {
                "folders": [
                    "s1_diff"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "grep",
            "description": "The [grep(1)\r\ncommand](https://sites.uclouvain.be/SystInfo/manpages/man1/grep.1.html)\r\ncan be used to detect or extract lots of information from text files.\r\nWhen working with source code,\r\n[grep(1)](https://sites.uclouvain.be/SystInfo/manpages/man1/grep.1.html)\r\ncan help you to find in which files some functions or constants have\r\nbeen defined. For this exercise, we will use the source code of the\r\n[CUnit](http://cunit.sourceforge.net) testing framework that you can\r\ndownload as a [tar\r\narchive](https://inginious.info.ucl.ac.be/course/LSINF1252/s1_grep/CUnit.tar).\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "S1",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_grep",
            "archive_properties": {
                "folders": [
                    "s1_grep"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Pipes",
            "description": "In this exercise you will learn to use pipes, refer to [this\r\nsection](https://sites.uclouvain.be/SystInfo/notes/Theorie/html/intro.html#shell)\r\nfor their use.\r\n\r\nDownload the following\r\n[input](https://inginious.info.ucl.ac.be/course/LSINF1252/s1_pipes/input.txt)\r\nfrom where you want to extract an alphabetically **sorted** list of\r\n**unique** hashtags. This can easily be done with pipes. To only select\r\nhashtags from the input, you can either use `sed '/ [^{#}]/d'` or\r\n[grep(1)](https://sites.uclouvain.be/SystInfo/manpages/man1/grep.1.html).\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "Command line",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S1"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_pipes",
            "archive_properties": {
                "folders": [
                    "s1_pipes"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "tar",
            "description": "Unix users often need to backup files and directories or send them over\r\nthe Internet.\r\n[tar(1)](https://sites.uclouvain.be/SystInfo/manpages/man1/tar.1.html)\r\nis a very useful tool which can be used to create compressed archives of\r\ndirectories and all the files that they contain. At the end of a\r\nproject, you will have created the following files (you can download\r\nthem from\r\n[here](https://inginious.info.ucl.ac.be/course/LSINF1252/s1_tar/Enonce.zip))\r\n\r\n``` {.console}\r\n/\r\n    file\r\n    folder1/\r\n        file1.c\r\n        file2.c\r\n        file3.c\r\n    folder2/\r\n        file1.h\r\n        fime2.h\r\n        file3.h\r\n```\r\n\r\nUsing\r\n[tar(1)](https://sites.uclouvain.be/SystInfo/manpages/man1/tar.1.html),\r\ncreate a `.tar.gz` compressed archive which contains all these files and\r\ndirectories and submit it below.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Tom Rousseaux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "Command line",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S1"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s1_tar",
            "archive_properties": {
                "folders": [
                    "s1_tar"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "make basics",
            "description": "*Estimated time: 20 minutes*\r\n\r\n`make` is a task runner for targets described in a\r\n[Makefile]{.title-ref}. It is mostly used to control the compilation of\r\nan executable from source code. Thus, you can use it to automate the\r\ntidious task of compiling your c code, or even automate the compilation\r\nof a report made with LaTeX.\r\n\r\n`make` a new beginning\r\n======================\r\n\r\nTo give you a first taste, open up a *terminal* and type the following\r\ncommand: `make`.\r\n\r\n`make` will greet you with the following message:\r\n\r\n``` {.}\r\nmake: *** No targets specified and no makefile found.  Stop.\r\n```\r\n\r\nSo what happened? `make` first start to search in your *current\r\ndirectory* for a file called `Makefile`. This file contains\r\n*instructions*, aka *rules*, that tell `make` what to do. Since there is\r\nno such file, `make` stops almost instantly.\r\n\r\n`make` it simple\r\n================\r\n\r\nNow write a simple hello world program, which you will save into a file\r\ncalled `hello.c`. This program will print the following on the standard\r\noutput:\r\n\r\n``` {.}\r\nHello make\r\n```\r\n\r\nNow, fire up your terminal, use `cd path/to/hello/folder/` to go to the\r\ndirectory which contains `hello.c` ([download\r\nhello.c](https://inginious.info.ucl.ac.be/course/LSINF1252/s2_make/hello.c)\r\nto compare with what you did) and type: `make hello`\r\n\r\nNow the `make` comes alive and tells you something like:\r\n\r\n``` {.}\r\ngcc     hello.c   -o hello\r\n```\r\n\r\nWow! What happened? When you typed `make hello`, `hello` is what is\r\ncalled a **target**. A **target** is usually the name of a file that is\r\ngenerated by a program; examples of targets are executable or object\r\nfiles.\r\n\r\nBasically, `make` will search for a file named `hello` and detect from\r\nthat file what programming language it uses. For most languages, `make`\r\nhas some basic builtin recipes, called **implicit rules**, to compile\r\nit. Here the **recipe** is given in the above output.\r\n\r\nIn that output:\r\n\r\n-   `gcc` stands for *GNU C Compiler*;\r\n-   `hello.c` the C program to be compiled;\r\n-   `-o hello` an option to place the output of the compilation in the\r\n    file `hello`.\r\n\r\nNow if you type `ls` in your command line, you will see that a file\r\n`hello` appeared. This is the **executable** built by `make` from\r\n`hello.c`. Now you can execute it and verify what is printed on the\r\nstandard output.\r\n\r\nIf you type again `make hello` in your command line, it will tell you:\r\n\r\n``` {.}\r\nmake: 'hello' is up to date.\r\n```\r\n\r\nThat is because `make` only builds the files that are changed. If\r\n`hello` is more recent than its source file `hello.c`, `make` will skip\r\nthe compilation process.\r\n\r\nTo see this, modify `hello.c` to write the following on the standard\r\noutput:\r\n\r\n``` {.}\r\nHello, make!\r\n```\r\n\r\nFinally, run `make hello` again. Since `hello.c` is more recent than\r\n`hello`, `make` will compile the source file again.\r\n\r\nThats it, you made your first experiences with `make`.\r\n\r\nNow I strongly recommend you read [sections 2.1 to 2.3. in the GNU make\r\nmanual](https://www.gnu.org/software/make/manual/make.html#Introduction).\r\nIt will only take you 10 minutes (included in the above given estimated\r\ntime) and will help you understand how to `make` magic happen.\r\n\r\nOnce you read these 3 sections, let us practice a bit.\r\n\r\nTo try the following questions locally, you can download a zip file of\r\nthe questions folder\r\n[here](https://inginious.info.ucl.ac.be/course/LSINF1252/s2_make/make_me.zip).\r\n\r\n------------------------------------------------------------------------\r\n\r\nReferences\r\n==========\r\n\r\n-   <https://sites.uclouvain.be/SystInfo/notes/Outils/html/make.html>\r\n-   <https://www.gnu.org/software/make/manual/>\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Pablo Gonzalez Alvarez",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "makefile"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S2",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s2_make",
            "archive_properties": {
                "folders": [
                    "s2_make"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "make basics - calculator",
            "description": "*Estimated time: 5 minutes*\r\n\r\nYou have just built a simple calculator. When typing `ls` in your\r\ncommand line, the source folder has the following structure:\r\n\r\n``` {.console}\r\ncalc.c    calc.h    Makefile    operations.c    operations.h\r\n```\r\n\r\n`calc.c` contains the calculator which handles the 4 basic operations:\r\naddition, substraction, multiplication, and division. These 4 operations\r\nare implemented in `operations.c`.\r\n\r\nAs you might have noticed, there are also two other files: `calc.h` and\r\n`operations.h`. These are the corresponding **header** files of `calc.c`\r\nand `operations.c`. These headers contain the function prototypes and\r\nspecifications, but not their definitions. They can also contain\r\n`extern` declarations of variables. For more on that, see [this\r\npage](https://www.tutorialspoint.com/cprogramming/c_header_files.htm) or\r\nchapter 4 in [\\[kernighan2006c\\]](#kernighan2006c){.citation}.\r\n\r\nWhen compiling this calculator, you need to specify in the `Makefile`\r\nrules the header files needed by `calc.c`, that is both `calc.h` and\r\n`operations.h`.\r\n\r\n------------------------------------------------------------------------\r\n\r\n::: {#citations}\r\n\r\n[kernighan2006c]{#kernighan2006c .citation-label}\r\n\r\n:   Kernighan, B. W., & Ritchie, D. M. (2006). The C programming\r\n    language.\r\n:::\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Pablo Gonzalez Alvarez",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "makefile"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S2",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s2_make_calc",
            "archive_properties": {
                "folders": [
                    "s2_make_calc"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "make basics - multiple choice questions",
            "description": "*Estimated time: 5 minutes*\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Pablo Gonzalez Alvarez",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "multiple_choice"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S2",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s2_make_mcq",
            "archive_properties": {
                "folders": [
                    "s2_make_mcq"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Cunit basics",
            "description": "*Estimated time: 5 minutes*\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "CUnit",
                    "category": 0
                },
                {
                    "text": "S3",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s3_cunit_basics",
            "archive_properties": {
                "folders": [
                    "s3_cunit_basics"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "make more basics",
            "description": "*Estimated time: 20 minutes*\r\n\r\nFirst, read [sections 2.4 to 2.7. in the GNU make\r\nmanual](https://www.gnu.org/software/make/manual/make.html#Variables-Simplify).\r\nIt will only take you 10 minutes (included in the above given estimated\r\ntime) and will help you understand how to `make` more magic happen.\r\n\r\nAs you have just read, one very useful use of Makefiles is to use\r\nvariables. You can use a variable to define the C compiler you will use\r\nand the flags you want it to use.\r\n\r\nFor instance, let us consider the following excerpt of a Makefile:\r\n\r\n``` {.console}\r\n# See gcc/clang manual to understand all flags\r\nCFLAGS += -std=c99 # Define which version of the C standard to use\r\nCFLAGS += -Wall # Enable the 'all' set of warnings\r\nCFLAGS += -Werror # Treat all warnings as error\r\nCFLAGS += -Wshadow # Warn when shadowing variables\r\nCFLAGS += -Wextra # Enable additional warnings\r\nCFLAGS += -O2 -D_FORTIFY_SOURCE=2 # Add canary code, i.e. detect buffer overflows\r\nCFLAGS += -fstack-protector-all # Add canary code to detect stack smashing\r\n\r\n# Object files\r\nOBJ = # TODO\r\n\r\n## all        : Build calculator (by default)\r\n# Default target\r\nall: calc\r\n\r\n## calc        : Build calculator\r\ncalc: # TODO\r\n\r\ncalc.o: # TODO\r\n\r\noperations.o: # TODO\r\n\r\n.PHONY: clean mrproper help\r\n\r\n## clean        : Remove auto-generated files\r\nclean:\r\n    @rm -f src/*.o\r\n\r\n## mrproper    : Remove both auto-generated & built files\r\nmrproper: clean\r\n    @rm -f calc\r\n\r\n## help        : Show different make options\r\nhelp: Makefile\r\n    @sed -n 's/^##//p' $<\r\n```\r\n\r\nIn this file we used 3 variables: `CC` to define the C Compiler;\r\n`CFLAGS` to define the C Compiler flags; `OBJ` to define the object\r\nfiles. This is a common use of variables to both simplify the Makefile\r\nand easily change the settings of the compiler.\r\n\r\nNotice the use of two `.PHONY` targets: `clean` which will remove\r\nauto-generated files, e.g. object files; `mrproper` which will remove\r\nboth auto-generated & built files, e.g. executable files; `help` which\r\nwill search for lines starting with `##` and print them on `stdout`\r\nwithout the `##`. Try it out by tipping `make help`.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Pablo Gonzalez Alvarez",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S3",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s3_make",
            "archive_properties": {
                "folders": [
                    "s3_make"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "make more basics - multiple choice questions",
            "description": "*Estimated time: 15 minutes*\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "multiple_choice"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S3",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s3_make_mcq",
            "archive_properties": {
                "folders": [
                    "s3_make_mcq"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "make tests",
            "description": "*Estimated time: 15 minutes*\r\n\r\nThis week, we will see how to automate the testing process. You have the\r\nfollowing project folder structure:\r\n\r\n``` {.}\r\nsrc/\r\n    calc.c\r\n    calc.h\r\n    operations.c\r\n    operations.h\r\ntest/\r\n    calc_test.c\r\n    operations_test.c\r\nMakefile\r\n```\r\n\r\nThe `Makefile` is partially done, but somehow the target `test` for\r\nbuilding the tests was lost.\r\n\r\n``` {.}\r\nCC = gcc\r\n# See gcc/clang manual to understand all flags\r\nCFLAGS += -std=c99 # Define which version of the C standard to use\r\nCFLAGS += -Wall # Enable the 'all' set of warnings\r\nCFLAGS += -Werror # Treat all warnings as error\r\nCFLAGS += -Wshadow # Warn when shadowing variables\r\nCFLAGS += -Wextra # Enable additional warnings\r\nCFLAGS += -O2 -D_FORTIFY_SOURCE=2 # Add canary code, i.e. detect buffer overflows\r\nCFLAGS += -fstack-protector-all # Add canary code to detect stack smashing\r\n\r\n# We have no libraries to link against except libc, but we want to keep\r\n# the symbols for debugging\r\nLDFLAGS= -rdynamic -lcunit\r\n\r\n## all        : Build calc (by default)\r\n# Default target\r\nall: calc\r\n\r\n## debug        : Build calc in debug mode\r\n# If we run `make debug` instead, keep the debug symbols for gdb\r\n# and define the DEBUG macro.\r\ndebug: CFLAGS += -g -DDEBUG -Wno-unused-parameter -fno-omit-frame-pointer\r\ndebug: clean calc\r\n\r\n## calc        : Build calc\r\n# We use an implicit rule: look for the files {calc,operations}.{c,h},\r\n# compile them and link the resulting *.o into an executable named calc\r\ncalc: calc.o operations.o\r\n    $(CC) $(CFLAGS)  -o calc {calc,operations}.o\r\n\r\n# We use an implicit rule: look for the files calc.{c,h},\r\n# compile them w/out linking\r\ncalc.o: src/calc.c src/calc.h\r\n    $(CC) $(CFLAGS) -c src/calc.{c,h}\r\n# We use an implicit rule: look for the files operations.{c,h},\r\n# compile them w/out linking\r\noperations.o: src/operations.c src/operations.h\r\n    $(CC) $(CFLAGS) -c src/operations.{c,h}\r\n\r\n# YOUR CODE HERE #\r\n\r\n# Declare clean, mrproper and help as a phony targets\r\n.PHONY: clean mrproper help\r\n\r\n## clean        : Remove auto-generated files from build\r\nclean:\r\n    @rm -f *.o\r\n\r\n## clean-debug        : Removve auto-generated files from debug mode build\r\nclean-debug:\r\n    @rm -f src/*.gch\r\n## mrproper    : Remove both auto-generated & built files\r\nmrproper: clean clean-debug\r\n    @rm -f calc\r\n\r\n## help        : Show different make options\r\nhelp: Makefile\r\n    @sed -n 's/^##//p' $<\r\n```\r\n\r\nTo try locally, you can download the project folder [\\_here\r\n\\<\\>]{.title-ref}\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Pablo Gonzalez Alvarez",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "makefile"
                },
                {
                    "text": "make & Makefile",
                    "category": 0
                },
                {
                    "text": "S3",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S4"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s3_make_tests",
            "archive_properties": {
                "folders": [
                    "s3_make_tests"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Save struct into file",
            "description": "*Estimated time: 25 minutes*\r\n\r\nYou are currently processing an array composed of `struct point` defined\r\nbelow. In this programme, you need to store the content of the entire\r\narray in a file to be able to reuse it later. Write a C function to\r\nwrite the array composed of `struct point` into a file. The file may\r\nalready exist or not. After the execution of the function, the file\r\nshould only contain the array. If the file has to be created, the user\r\nwho created it must have the permission to read it.\r\n\r\n``` {.c}\r\ntypedef struct point {\r\n    int x;\r\n    int y;\r\n    int z;\r\n} point_t;\r\n```\r\n\r\nUse only `open(2)`, `write(2)` and `close(2)`. You can only call\r\n`write(2)` once.\r\n\r\nHint : read carefully the man page of `open(2)` to manage all the cases\r\nmentioned above. Be sure to open the file with the appropriate rights.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Open",
                    "category": 0
                },
                {
                    "text": "Close",
                    "category": 0
                },
                {
                    "text": "File",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S5"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s4_file_save_struct",
            "archive_properties": {
                "folders": [
                    "s4_file_save_struct"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Reading integers in a binary file",
            "description": "*Estimated time: 25 minutes*\r\n\r\nGiven a binary file containing some (possibly none) positive integers\r\n(`int`) that were stored in the file by successive calls of\r\n`write(fd,&num,sizeof(int))` write code that computes the sum of all\r\nintegers that were stored in the file. The function returns the sum when\r\nthere are no errors. In case of errors, it returns.\r\n\r\n-   If `open()` fails, return `-1`.\r\n-   If `read()` fails, return `-2`.\r\n-   If `close()` fails, return `-3`.\r\n\r\nYou can only use `open(2)`, `read(2)`, `write(2)` and `close(2)`.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Close",
                    "category": 0
                },
                {
                    "text": "Open",
                    "category": 0
                },
                {
                    "text": "Sum",
                    "category": 0
                },
                {
                    "text": "File",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S5"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s4_read_file_array_integer",
            "archive_properties": {
                "folders": [
                    "s4_read_file_array_integer"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Get and set on array stored in binary file",
            "description": "*Estimated time: 30 minutes*\r\n\r\nGiven a file containing a large array of integers, you have to write a\r\nfunction to edit the element at a given index in the array and another\r\nfunction to retrieve a specific element from this array.\r\n\r\nSince the array is huge, you cannot load it completely in memory.\r\nConsequently, you have to naviguate directly through the array in the\r\nfile by using `lseek(2)`.\r\n\r\nYou may want to use `fstat(2)` to obtain informations about a given\r\nfile.\r\n\r\nUse only `open(2)`, `read(2)`, `write(2)`, `close(2)` and `lseek(2)`.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Close",
                    "category": 0
                },
                {
                    "text": "Open",
                    "category": 0
                },
                {
                    "text": "S5",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s5_big_array_get_set",
            "archive_properties": {
                "folders": [
                    "s5_big_array_get_set"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "File copy",
            "description": "*Estimated time: 30 minutes*\r\n\r\nGiven a file containing arbitrary bytes, you must write a function that\r\ncopies the file. Obviously, your function cannot modify the content of\r\nthe original file. Beware that the copied file should have the same\r\npermissions as the original file.\r\n\r\nUse only `open(2)`, `read(2)`, `write(2)`, `stat(2)` and `close(2)`.\r\n\r\n*Hint: you may need either to go through the file or to get the total\r\nsize to copy all of it.*\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Close",
                    "category": 0
                },
                {
                    "text": "Permission",
                    "category": 0
                },
                {
                    "text": "Copy",
                    "category": 0
                },
                {
                    "text": "Open",
                    "category": 0
                },
                {
                    "text": "S5",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s5_file_copy",
            "archive_properties": {
                "folders": [
                    "s5_file_copy"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "File exists",
            "description": "*Estimated time: 10 minutes*\r\n\r\nUsing\r\n[open(2)](https://sites.uclouvain.be/SystInfo/manpages/man2/open.2.html),\r\ndetermine if a file exists.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "File",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S5"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/s5_file_exists",
            "archive_properties": {
                "folders": [
                    "s5_file_exists"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Search and replace",
            "description": "Le syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants : -\r\n<http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes) -\r\n<http://sites.uclouvain.be/SystInfo/manpages/man2> (appels systèmes) -\r\n<http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions des\r\nlibrairies)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Juin 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/Search_and_replace",
            "archive_properties": {
                "folders": [
                    "Search_and_replace"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Bitwise operation: setting a bit",
            "description": "In this exercise, we will work with operations on bits. When we speak\r\nabout the position of a bit, index 0 corresponds to lowest order bit, 1\r\nto the second-lowest order bit, \\...\r\n\r\nIn C source code, you can write a number in binary (base 2) by prefixing\r\nit via 0b., e.g. 0b11010 = 26.\r\n\r\nThis exercise will introduce some non-standard data types which\r\nguarantee that the variable has a fixed number of bits. Indeed, on some\r\nmachines, a *int* could use 2, 4 or 8 bytes. Hence, if we want to\r\nperform bitwise operations, we have to know first on how many bits we\r\nare working.\r\n\r\nFor this, C introduces a new class of variable types :\r\n\r\n-   *int8\\_t* (signed integer of 8 bits)\r\n-   *uint8\\_t* (unsigned integer of 8 bits)\r\n-   *uint16\\_t* (unsigned integer of 16 bits)\r\n\r\nYou can mix *uint* or *int* with bit-lengths 8, 16, 32 and 64). These\r\ntypes are defined in \\<stdint.h\\>\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/set_bit",
            "archive_properties": {
                "folders": [
                    "set_bit"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Écrire un shell",
            "description": "```{=html}\r\n<p>\r\n  Le shell est un outil dans les systèmes UNIX qui vous permet facilement exécuter d’autres programmes, et même de les combiner de façon intelligente : vous pouvez, par exemple, utiliser <code>grep foo fichier</code> pour trouver les lignes qui contiennent <code>foo</code> dans un fichier, <code>wc -l fichier</code> pour compter le nombre de lignes dans un fichier ; mais en les combinant, on peut écrire <code>grep foo fichier | wc -l</code> pour compter le nombre de lignes qui contiennent dans un fichier.\r\n</p>\r\n<p>\r\n  Dans cet exercice, vous allez implémenter la partie du shell qui exécute une commande ou qui en combine deux. (Remarque : toutes les tableaux d’arguments passés à vos fonctions contiennent comme premier élément le chemin vers l’exécutable et comme dernier élément <code>NULL</code>).\r\n</p>\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/shell",
            "archive_properties": {
                "folders": [
                    "shell"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Simple stack",
            "description": "You are asked to implement the `pop` and `push` functions of the\r\nfollowing\r\n[stack](https://en.wikipedia.org/wiki/Stack_(abstract_data_type))\r\ninterface :\r\n\r\n``` {.c}\r\nstruct node {\r\n    node *next;\r\n    char *name;\r\n};\r\n```\r\n\r\n![image](https://upload.wikimedia.org/wikipedia/commons/b/b4/Lifo_stack.png){.align-right\r\nwidth=\"386px\" height=\"270px\"}\r\n\r\n*Hints* :\r\n\r\n-   `char *name` is also a pointer, memory must be allocated by using\r\n    [malloc(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html)\r\n    to copy the string on the stack.\r\n-   Other useful commands:\r\n    [strncpy(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/strncpy.3.html)\r\n    and\r\n    [strlen(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/strlen.3.html).\r\n-   Do not forget to free **all** the allocated space when popping one\r\n    element.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S4",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/simple_stack",
            "archive_properties": {
                "folders": [
                    "simple_stack"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Sleepy malloc",
            "description": "The\r\n[malloc(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html)\r\nfunction may fail, for instance if the OS has no free memory remaining.\r\nIn this case, it may be possible that some other processes may free some\r\nmemory after some time.\r\n\r\nIn our program, instead of reporting an error immediately if no free\r\nmemory is available, we will wait some time to see if the OS has freed\r\nmemory for us.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Maxime Mawait",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S3",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/sleep_malloc",
            "archive_properties": {
                "folders": [
                    "sleep_malloc"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Soumission du projet fractale",
            "description": "Cette tâche vous permet de soumettre votre projet. Elle va également\r\nvalider le format de votre archive, la présence des fichiers requis, la\r\nprésence des cibles requises dans votre Makefile et la bonne compilation\r\nde votre projet. Le format requis est décrit dans l\\'énoncé disponible\r\nsur Moodle.\r\n\r\nVotre archive doit respecter le format de nommage\r\n[fractal\\_NUMGroupe\\_NOM1\\_NOM2.zip]{.title-ref}. **Un seul des deux\r\nmembres du groupe doit soumettre.**\r\n\r\nLa dernière soumission **valide** sera considérée pour l\\'évaluation. En\r\nl\\'absence de telle soumission (donc si votre soumission comporte une\r\nerreur), votre projet **ne sera pas considéré pour l\\'évaluation**.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Quentin De Coninck",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/soumission-projet-fractale",
            "archive_properties": {
                "folders": [
                    "soumission-projet-fractale"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Global and local variables",
            "description": "In a C program, variables are stored in different regions in memory,\r\ndepending on where the variables have been initialized. Each memory\r\nregion has different properties about how the variables can be accessed,\r\nmodified, \\... This exercise will show you how global variables and\r\nvariables on the stack are managed.\r\n\r\n``` {.c}\r\nint result;\r\n\r\nvoid sum1(int a1, int b1) {\r\n    a1 = a1 + b1;\r\n}\r\n\r\nvoid main(int argc, char **argv) {\r\n    int a1 = 5, b1 = 6;\r\n\r\n    sum1(a1, b1);\r\n    printf(\"sum1: %d\\n\", a1);\r\n\r\n    int a2 = 3, b2 = 7;\r\n    sum2(a2, b2)\r\n    printf(\"sum2: %d\\n\", result);\r\n\r\n    int a3 = 1, b3 = 8;\r\n    sum3(&a3, &b3);\r\n    printf(\"sum3: %d\\n\", a3);\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "match"
                },
                {
                    "text": "Pointer",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/stack_vs_heap",
            "archive_properties": {
                "folders": [
                    "stack_vs_heap"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Exponentially static counter - REVIEWED",
            "description": "A variable declared inside a function with the keyword *static* implies\r\nthat the value of this variable will be kept across the different calls\r\nto this function.\r\n\r\nFor example, the first call to your function should return `1`. The next\r\ncall `2`, then `4`, \\..., `4096`, `1`, \\...\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Mathieu Xhonneux",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/static_counter",
            "archive_properties": {
                "folders": [
                    "static_counter"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Improved strcpy",
            "description": "The classic function\r\n`char *strcpy(char *destination, const char *source);`\r\n[strcpy(3)](https://linux.die.net/man/3/strcpy) needs a destination\r\nbuffer where the source string is copied. We ask you to code a function\r\nwhich allocates a buffer itself, and then performs the copy.\r\n\r\nThe use of copy functions as `memcpy` is not allowed.\r\n\r\n*Hint* : use\r\n[malloc(3)](https://sites.uclouvain.be/SystInfo/manpages/man3/malloc.3.html)\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Nicolas Rybowski",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Malloc",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S3"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/strcpy",
            "archive_properties": {
                "folders": [
                    "strcpy"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Manipulation de chaines de caractères",
            "description": "Le syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants :\r\n\r\n:   -   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels\r\n        systèmes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\n        des librairies)\r\n\r\n**Attention:** veuillez utiliser la version **HTML** du syllabus\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/strsplit",
            "archive_properties": {
                "folders": [
                    "strsplit"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Echange de valeurs de fractions",
            "description": "Soit la définition de la structure représentant des fractions entières\r\nsuivante:\r\n\r\n``` {.c}\r\nstruct fract_t {\r\n        int num;\r\n        int denum;\r\n};\r\n```\r\n\r\nOn veut pouvoir swapper (échanger) les valeurs de deux fractions en\r\nutilisant la fonction `void swap(struct fract_t *a, struct fract_t *b)`.\r\nEcrivez le code de cette fonction.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Fabien Duchêne",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Christoph Paasch",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S2",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/swap",
            "archive_properties": {
                "folders": [
                    "swap"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Swap my integers",
            "description": "\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Arthur van Stratum",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "Pointer",
                    "category": 2
                },
                {
                    "category": 2,
                    "text": "S2"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/swap2int",
            "archive_properties": {
                "folders": [
                    "swap2int"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Through the array",
            "description": "In C, an array is a set of variables sharing the same data type :\r\n`int array[3] = {42, 1337, 0};`.\r\n\r\nAn item of an array can be retrieved through its index. For example\r\n`array[1]` gives the second element of the array (here `1337`).\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Martin",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S1",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/tab_find",
            "archive_properties": {
                "folders": [
                    "tab_find"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Trier une liste chainée",
            "description": "Le but de cet exercice est de trier une liste chaînée. Pour ce faire, on\r\nvous laisse le choix de l\\'algorithme que vous souhaitez implémenter. La\r\nseule contrainte est que la liste se décrit comme suit :\r\n\r\n``` {.c}\r\nstruct list {\r\n    struct node* head;\r\n}\r\nstruct node {\r\n    int elem;\r\n    struct node* next;\r\n}\r\n```\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Cécile Hautecoeur",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "text": "Aurélie Massart",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "StudentJob"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/tri",
            "archive_properties": {
                "folders": [
                    "tri"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "true false",
            "description": "true false\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "category": 2,
                    "text": "Beta"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/truefalse",
            "archive_properties": {
                "folders": [
                    "truefalse"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Les types (1/2)",
            "description": "Le type de la plupart des variables en C est facile à déterminer.\r\nNéanmoins, le C contient aussi des types qui diffèrent de façons parfois\r\nsubtiles.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S3",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/types",
            "archive_properties": {
                "folders": [
                    "types"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Les types (2/2)",
            "description": "Le type de la plupart des variables en C est facile à déterminer.\r\nNéanmoins, le C contient aussi des types qui diffèrent de façons parfois\r\nsubtiles.\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Kilian Verhetsel",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "text": "S3",
                    "category": 2
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/types2",
            "archive_properties": {
                "folders": [
                    "types2"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        },
        {
            "title": "Stockage d'un vecteur de réels dans un fichier",
            "description": "Le syllabus est accessible depuis l\\'URL\r\n<http://sites.uclouvain.be/SystInfo>\r\n\r\nLes pages de manuel sont accessibles depuis les URLs suivants :\r\n\r\n:   -   <http://sites.uclouvain.be/SystInfo/manpages/man1> (commandes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man2> (appels\r\n        systèmes)\r\n    -   <http://sites.uclouvain.be/SystInfo/manpages/man3> (fonctions\r\n        des librairies)\r\n\r\n**Attention:** veuillez utiliser la version **HTML** du syllabus\r\n",
            "tags": [
                {
                    "text": "INGINIOUS",
                    "autoGenerated": true,
                    "category_id": "_PLATFORM_"
                },
                {
                    "text": "https://github.com/UCL-INGI/LSINF1252",
                    "autoGenerated": true,
                    "category_id": "_SOURCE_"
                },
                {
                    "text": "[LSINF1252] Systèmes informatiques",
                    "autoGenerated": true,
                    "category_id": "_COURSE_"
                },
                {
                    "text": "Olivier Bonaventure",
                    "autoGenerated": true,
                    "category_id": "_AUTHOR_"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "code"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_PROGRAMMING-LANGUAGE_",
                    "text": "c"
                },
                {
                    "autoGenerated": true,
                    "category_id": "_EXERCISE-TYPE_",
                    "text": "exam"
                },
                {
                    "category": 2,
                    "text": "Septembre 2016"
                }
            ],
            "url": "https://inginious.info.ucl.ac.be/course/LSINF1252/Vectorfile",
            "archive_properties": {
                "folders": [
                    "Vectorfile"
                ],
                "files": [
                    "course.yaml"
                ]
            }
        }
    ],
    "own_categories": {
        "0": "thématique",
        "1": "Misconception",
        "2": "autres"
    },
    "extraction_date": "2019-12-08T22:44:25.118Z",
    "url": "https://github.com/UCL-INGI/LSINF1252"
}