openapi: 3.0.0
info:
  description: "API for Source Code"
  version: "1.0.0"
  title: "Source Code"
  license:
    name: "GPL-3.0-or-later"
    url: "https://choosealicense.com/licenses/gpl-3.0/"

# Pas utile pour l'instant mais c'est mieux pour apr√®s
servers:
  - url: http://localhost:3000
    description: Internal staging server for testing
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server

# To fast distinguish what could be done by guest, user and admin
tags:
  - name: guest
    description: "Everything a(n) visitor / not authentified user could do"
  - name: user
    description: "Everything an authentified user could do (more than a guest)"
  - name: admin
    description: "Everything an administrator could do (more than an user)"

paths:
  /auth/login:
    post:
      summary: "Logs user into the system"
      operationId: signIn
      tags:
        - guest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Auth"
      responses:
        '200':
          description: A JSON containing the JWT Token and some information about the user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/JWTToken"
                  - type: object
                    description: Some basic information on this user
                    properties:
                      user:
                        type: object
                        properties:
                          fullName:
                            type: string
                            description: "The full name of this user"
                            example: "Alexandre Dewit"
                            minLength: 1
                            maxLength: 50
                          role:
                            type: string
                            enum: [admin, user]
                            description: "What kind of user are we ?"  
                        required:
                          - fullName
                          - role
                    required:
                      - user
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /auth/register:
    post:
      summary: "Creates a new user into the system"
      operationId: register
      tags:
        - guest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Auth"
                - type: object
                  properties:
                    fullName:
                      type: string
                      example: "Alexandre Dewit"
                      description: "The full name of this new user"
                      minLength: 1
                      maxLength: 50
                  required:
                    - fullName
      responses:
        '200':
          description: OK
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /api/create_exercise:
    post:
      summary: "Creates a new exercise into the system"
      operationId: createSingleExercise
      tags:
        - user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExerciseForm"
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/ExerciseForm"
                - type: object
                  properties:
                    exerciseFile:
                      type: string
                      format: binary
                      description: "The sources of this exercise, in zip format"
                  required:
                    - exerciseFile
            encoding:
              exerciseFile:
              # MIME for zip https://stackoverflow.com/a/7027582/6149867
                contentType: application/zip, application/x-zip-compressed, multipart/x-zip
      responses:
        '200':
          description: OK
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /api/exercises/{id}:
    get:
      summary: "Retrieve this specific exercise data"
      operationId: getExerciseByID
      tags:
        - guest
      parameters:
        - name: id
          in: path
          description: "The exercise ID"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Exercise data inside a JSON"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchableExerciseModel"
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    put:
      summary: "Update this specific exercise data"
      operationId: UpdateExercise
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: "The exercise ID"
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExerciseUpdateForm"
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/ExerciseUpdateForm"
                - type: object
                  description: "If we want to also to change the sources zip file of this exercise"
                  properties:
                    exerciseFile:
                      type: string
                      format: binary
                      description: "The sources of this exercise, in zip format"
                  required:
                    - exerciseFile
            encoding:
              exerciseFile:
              # MIME for zip https://stackoverflow.com/a/7027582/6149867
                contentType: application/zip, application/x-zip-compressed, multipart/x-zip
      responses:
        '200':
          description: OK
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /api/search:
    post:
      summary: "Search exercises that matches criteria"
      tags:
        - guest
      operationId: searchExercises
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCriterias"
            examples:
              searchExample1:
                $ref: "#/components/examples/searchExample1"
              searchExample2:
                $ref: "#/components/examples/searchExample2"            
      responses:
        '200':
          description: "An object that contains the results and additionnal information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResult"
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /api/tags:
    post:
      summary: "Submit a tag proposal"
      tags:
        - user
      operationId: submitTagProposal
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagProposal"
      responses:
        '200':
          description: OK
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    put:
      summary: "Validate or modify a Tag"
      tags:
        - admin
      operationId: updateTag
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagFull"
      responses:
        '200':
          description: OK
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    get:
      summary: "Retrieve all tags"
      tags:
        - guest
      operationId: getTags
      parameters:
        - in: query
          style: form
          name: settings
          explode: true
          schema:
            type: object
            properties:
              tags_ids:
                type: array
                items:
                  type: integer
                  minimum: 0
                minItems: 1
                description: "Only consider the given tag ID(S)"
              categories_ids:
                type: array
                items:
                  type: integer
                  minimum: 0
                minItems: 1
                description: "Only consider the given tag categories ID(S)"
              state:
                type: string
                enum: ["default", "validated", "pending"]
                default: "default"
                description: "Filter the tags by their validity. The default value ('default') stands for no filtering."
      responses:
        '200':
          description: "An array of tag"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagFull"
                uniqueItems: true
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /api/tags_categories:
    get:
      summary: "Retrieve only Tag categories"
      operationId: getTagCategories
      tags:
        - guest
      responses:
        '200':
          description: "An array of tag categories"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag_Category"
                uniqueItems: true
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    put:
      summary: "Update a Tag category"
      operationId: updateTagCategory
      security:
        - bearerAuth: []
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag_Category"
      responses:
        '200':
          description: "OK"
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"

  /api/tags_by_categories:
    get:
      summary: "Retrieve Tag categories with their related tags"
      tags:
        - guest
      operationId: getTagCategoriesWithTags
      parameters:
        - in: query
          style: form
          name: settings
          explode: true
          schema:
            allOf:
              - type: object
                properties:
                  state:
                    type: string
                    enum: ["default", "validated", "pending"]
                    default: "default"
                    description: "Filter the tags by their validity. The default value ('default') stands for no filtering."
                  onlySelected:
                    type: array
                    description: "If not empty, only consider the given tag categories ID(S). If empty, no tag category is ignored"
                    default: []
                    uniqueItems: true
                    items:
                      type: integer
                      minimum: 0
                      example: 42
                      description: "A Tag Category ID"
      responses:
        '200':
          description: "An array of Tag category with their related tags"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagCategoryWithTags"
                uniqueItems: true
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /api/bulk_create_exercises:
    post:
      summary: "Creates multiple exercises into the system"
      tags:
        - user
      operationId: createMultipleExercises
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MultipleExercisesForm"
          multipart/form-data:
            schema:
              type: object
              properties:
                exercisesData:
                  $ref: "#/components/schemas/MultipleExercisesForm"
                files:
                  type: array
                  description: "The sources of the exercises, each in zip format"
                  minItems: 1
                  items:
                    type: string
                    format: binary
                    description: "The source of an exercise, in zip format"
                filesMapping:
                  type: array
                  description: "Mapping between the given file (to find out which data belong to exercise)"
                  minItems: 1
                  items:
                    type: object
                    properties:
                      filename:
                        type: string
                        description: "The name of the given source file"
                        example: "file1.zip"
                      exercise:
                        type: integer
                        description: "The location of the related exercise in the exercisesData array"
                    required:
                      - filename
                      - exercise
              required:
                - exercisesData
                - files
                - filesMapping
      responses:
        '200':
          description: OK
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /api/bulk_create_or_find_tag_categories:
    post:
      summary: "Creates or Find tag categories"
      tags:
        - admin
      operationId: createOrFindTagCategories
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagCategoriesForm"
      responses:
        '200':
          description: "An array of tag categories"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag_Category"
                uniqueItems: true
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /api/bulk_modify_exercises_validity:
    put:
      summary: "Validate / Unvalidate given exercises"
      operationId: "ValidateExercises"
      tags:
        - admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exercises:
                  type: array
                  description: "An array of exercises IDs"
                  minItems: 1
                  uniqueItems: true
                  items:
                    type: integer
                    minimum: 0
                    example: 42
                    description: "An exercise ID"
                state:
                  type: boolean
                  description: "Should the given exercises be validated or not ?"
                  default: true
                  example: false
              required:
                - exercises
      responses:
        '200':
          description: "OK"
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /api/bulk_delete_exercises:
    delete:
      summary: "Delete given exercises"
      operationId: "DeleteExercises"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: "An array of exercises IDs"
              minItems: 1
              uniqueItems: true
              items:
                type: integer
                minimum: 0
                example: 42
                description: "An exercise ID"
      responses:
        '200':
          description: "OK"
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /api/vote_for_exercise:
    post:
      summary: "Vote (or update the vote) of the current logged user for given exercise"
      operationId: "voteForExercise"
      tags:
        - user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exercise_id:
                  type: integer
                  minimum: 0
                  description: "The ID of the exercise we want to vote / modify a vote"
                  example: 42
                score:
                  type: number
                  format: double
                  minimum: 0.0
                  example: 5.0
                  description: "The score we want to give to this exercise"
              required:
                - score
                - exercise_id
      responses:
        '200':
          description: OK
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /api/configurations:
    get:
      description: "Get all configurations of the current logged user"
      operationId: "FetchOwnConfigurations"
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "An array of configurations"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExistentConfiguration"
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    put:
      description: "Update a configuration"
      operationId: "UpdateConfiguration"
      tags:
        - user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExistentConfiguration"
      responses:
        '200':
          description: OK
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
    post:
      description: "Create a configuration"
      operationId: "CreateConfiguration"
      tags:
        - user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationProposal"
      responses:
        '200':
          description: OK
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"   
components:
  schemas:
    JWTToken:
      type: object
      properties:
        token:
          type: string
          description: The JWT Token
      required:
        - token
    ErrorObject:
      type: object
      properties:
        message:
          type: string
          description: The main error message ( for example "Bad Request", "Unauthorized", etc. )
        errors:
          type: array
          items:
            type: object
            description: Explanation about an error
      required:
        - message
        - errors
    Auth:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "jy95@perdu.com"
        password:
          type: string
          format: password
          example: "42"
      required:
        - email
        - password
# Basic model of a Exercise 
    BasicExerciseModel:
      type: object
      properties:
        title:
          type: string
          example: "A Super Exercise"
          minLength: 3
          maxLength: 100
          description: "The title of this exercise"
        description:
          type: string
          maxLength: 5000
          example: "..."
          description: "The preamble of this exercise"
      required:
        - title
        - description
# If already in database, we have other fields (in addition of the basic Model)
    AlreadyPresentExerciseModel:
      allOf:
        - $ref: '#/components/schemas/BasicExerciseModel'
        - type: object
          properties:
            id:
              type: integer
              example: 42
              minimum: 0
              description: "The Id of this exercise"
            version:
              type: integer
              example: 42
              minimum: 0
              description: "The version of this exercise (optimistic lock)"
            createdAt:
              type: string
              format: date-time
              example: "2019-10-26 21:46:02.325+02"
              description: "Date of creation of this exercise"
            updatedAt:
              type: string
              format: date-time
              example: "2019-10-26 21:46:02.325+02"
              description: "Date of the latest update of this exercise"
            isValidated:
              type: boolean
              description: "Is this exercise validated by an admin ?"
              example: false
            file:
              type: string
              nullable: true
              description: "If not null, it is a uploaded file we can download with the GET endpoint /files/{filename}"
              example: "sources-88af5adc-1837-11ea-8d71-362b9e155667.zip"
            url:
              type: string
              pattern: '^https?:\/\/[^\s$.?#].[^\s]*$'
              example: "https://inginious.info.ucl.ac.be/course/LEPL1402/Streams"
              nullable: true
              description: "If not null, the link to the exercise on a plateform"
          required:
            - id
            - version
            - createdAt
            - updatedAt
            - isValidated
            - file
            - url
# For search / get context, we have other fields (in addition of the AlreadyPresentExerciseModel )
    SearchableExerciseModel:
      allOf:
        - $ref: "#/components/schemas/AlreadyPresentExerciseModel"
        - type: object
          properties:
            metrics:
              type: object
              properties:
                votes:
                  type: integer
                  example: 42
                  minimum: 0
                  description: "Number of votes for this exercise"
                avg_score:
                  type: number
                  minimum: 0.0
                  example: 5.0
                  description: "The average score of this exercise"
              required:
                - votes
                - avg_score
            tags:
              type: array
              items:
                $ref: '#/components/schemas/TagWithCategory'
# Each exercise has a least one tag
              minItems: 1
              uniqueItems: true
          required:
            - metrics
            - tags
# A Tag Category
    Tag_Category:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          example: 42
          description: "The Id of this Tag_Category"
        category:
          type: string
          example: "difficulty"
          minLength: 3
          maxLength: 100
          description: "The text of this Tag_Category"
      required:
        - id
        - category
# A Tag
    Tag:
      type: object
      properties:
        tag_id:
          type: integer
          example: 42
          minimum: 0
          description: "The Id of this Tag"
        tag_text:
          type: string
          example: "easy"
          minLength: 1
          maxLength: 100
          description: "The text of this Tag"
      required:
        - tag_id
        - tag_text
# Tag with Tag category
    TagWithCategory:
      allOf:
        - $ref: "#/components/schemas/Tag"
        - type: object
          properties:
            category:
              type: object
              properties:
                category_text:
                  type: string
                  example: "difficulty"
                  minLength: 3
                  maxLength: 100
                  description: "The text of the Tag Category linked with this tag"
                category_id:
                  type: integer
                  example: 42
                  minimum: 0
                  description: "The category ID linked with this tag"
              required:
                - category_text
                - category_id
          required:
            - category
    TagCategoryWithTags:
      allOf:
        - $ref: "#/components/schemas/Tag_Category"
        - type: object
          properties:
            tags:
              type: array
              description: "An array of related tags to this Tag Category"
              minItems: 1
              uniqueItems: true
              items:
                $ref: "#/components/schemas/Tag"
          required:
            - tags
# Tag proposal
    TagProposal:
      type: object
      properties:
        text:
          type: string
          example: "easy"
          minLength: 1
          maxLength: 100
          description: "The text of this Tag"
        category_id:
          type: integer
          minimum: 0
          example: 42
          description: "the category id to which this tag is related"
      required:
        - text
        - category_id
# Tag updated / validated
    TagFull:
      allOf:
        - $ref: "#/components/schemas/Tag"
        - type: object
          properties:
            category_id:
              type: integer
              example: 42
              minimum: 0
              description: "the category id to which it is related"
            isValidated:
              type: boolean
              example: false
              description: "Is this tag validated or not"
            version:
              type: integer
              minimum: 0
              description: "The version of this exercise (optimistic lock)"
              example: 42 
          required:
            - category_id
            - isValidated
            - version
# When we want to upload a new exercise, we need other fields for that
    ExerciseForm:
      allOf:
        - $ref: "#/components/schemas/BasicExerciseModel"
        - type: object
          properties:
            tags:
              type: array
              items:
                oneOf:
                  - type: integer
                    minimum: 0
                    description: "A Tag ID ( already existent in database )"
                  - $ref: "#/components/schemas/TagProposal"
                    description: "A not-existent Tag we want to add"
              description: "Mixed array that contains existent tag(s) or not"
              uniqueItems: true
              minItems: 1 # We must always put at least one tag in the database
            url:
              type: string
              pattern: '^https?:\/\/[^\s$.?#].[^\s]*$'
              example: "https://inginious.info.ucl.ac.be/course/LEPL1402/Streams"
              nullable: true
              description: "If not null, the link to the exercise on a plateform"
          required:
            - tags
# When we want to update a already existent exercise, we also need the version
    ExerciseUpdateForm:
      allOf:
        - $ref: "#/components/schemas/ExerciseForm"
        - type: object
          properties:
            version:
              type: integer
              description: "The version of this exercise (optimistic lock)"
              minimum: 0
              example: 42
          required:
            - version
# Result after a call to /search
    SearchResult:
      type: object
      properties:
        metadata:
          type: object
          description: "Fields for pagination"
          properties:
            currentPage:
              type: integer
              example: 1
              minimum: 1
              description: "Current number of page"
              default: 1
            totalItems:
              type: integer
              example: 42
              minimum: 0
              description: "How much exercises match the given criterias"
            totalPages:
              type: integer
              minimum: 0
              example: 5
              description: "How much pages of exercises match the given criterias"
            pageSize:
              type: integer
              minimum: 0
              example: 10
              default: 10
              description: "How many entries of exercises on each page"
        data:
          type: array
          items:
            $ref: "#/components/schemas/SearchableExerciseModel" 
            description: "An array of exercise data"
      required:
        - metadata
        - data
# Common criteria ( for pagination )
    CommonCriterias:
      type: object
      properties:
        limit:
          type: integer
          minimum: 0
          description: "Maximal number of items we want to retrieve"
          example: 42
        offset:
          type: integer
          minimum: 0
          description: "Number of items we want to skip (useful with limit for pagination)"
          example: 42
# Search criteria
    SearchCriterias:
      type: object
      properties:
        metadata:
          type: object
          description: "Fields for pagination"
          properties:
            page:
              type: integer
              description: "Page number (start at 1)"
              minimum: 1
              default: 1
              example: 1
            size:
              type: integer
              minimum: 0
              description: "Number of items by page"
              default: 10
              example: 10
        data:
          type: object
          description: "Search criterias"
          properties:
            title:
              type: string
              description: "Something we want to find inside the title of exercises"
              maxLength: 100
              example: "SINF2MS"
            tags:
              type: array
              items:
                oneOf:
                  - type: integer
                    format: int32
                    example: 1
                  - type: array
                    items:
                      type: integer
                      format: int32
                    minItems: 1 # Not allowing empty array if we use
              description: "Tags search encoded in Conjunctive Normal Form. (for NOT predicat, use a negative integer)"
              example: [-1, [2, 3]]
            state:
              type: string
              enum: ["default", "validated", "pending"]
              default: "default"
              description: "Filter the exercises by their validity. The default value ('default') stands for no filtering."
    MultipleExercisesForm:
      type: array
      minItems: 1
      items:
        $ref: "#/components/schemas/ExerciseForm" 
        description: "An array of exercises"
    TagCategoriesForm:
      type: array
      minItems: 1
      items:
        oneOf:
          - type: string
            description: "The name of the Tag Category"
            example: "author"
          - type: object
            description: "Category to add, under one that already exists"
            properties:
              text:
                type: string
                description: "The name of the Tag Category"
                example: "author"
                minLength: 3
                maxLength: 100
              category:
                type: integer
                format: int32
                minimum: 0
                description: "The ID of the Tag Category parent"
            required:
              - text
              - category
# Configurations
    ConfigurationProposal:
      type: object
      properties:
        name:
          description: "The name of this configuration"
          type: string
          example: "All Java exercises"
        title:
          description: "The used title for search"
          type: string
          example: "[LSINF1252]"
          maxLength: 100
          minLength: 1
        tags:
          description: "An array of tags IDS"
          type: array
          example: [42]
          items:
            type: integer
            minimum: 0
          minLength: 1
      required:
        - name
        - tags
    ExistentConfiguration:
      allOf:
        - $ref: "#/components/schemas/ConfigurationProposal"
        - type: object
          properties:
            id:
              description: "The id of this configuration"
              type: integer
              minimum: 0
              example: 42
          required:
            - id
# 1) Define the security scheme type (HTTP bearer)
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

# 2) Apply the security globally to all operations
#security:
#  - bearerAuth: []         # use the same name as above

  examples:
# Examples for /search
    searchExample1:
      description: "Search the first 10 exercises that have 'Java' in their title and have some specific tags ( 1 AND (2 OR 3 OR 4) )"
      value:
        data:
          title: "Java"
          tags: [1, [2, 3, 4]]
    searchExample2:
      description: "Search the exercises on page 2 that have 'Java' in their title but with specific tags ( (NOT 1) AND (2 OR 3)  )"
      value:
        metadata:
          page: 2
          size: 10
        data:
          title: "Java"
          tags: [-1, [2, 3]]