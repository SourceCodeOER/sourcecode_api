openapi: 3.0.0
info:
  description: "API for exercises library"
  version: "1.0.0"
  title: "Exercises Library"
  license:
    name: "MIT"
    url: "https://choosealicense.com/licenses/mit/"

# Pas utile pour l'instant mais c'est mieux pour apr√®s
servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing

paths:
  /auth/login:
    post:
      summary: "Logs user into the system"
      responses:
        '200':
          description: A JSON containing the JWT Token under the token key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWTToken"
        '400':
          description: "Bad Request (missing email / password)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
        '401':
          description: "Unauthorized (wrong email / password)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorObject"
  /auth/register:
    post:
      summary: "Creates a new user into the system"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Auth"
      responses:
        '200':
          description: OK
        '409':
          description: "Conflit : already a user with the same email"
  /api/create_exercise:
    post:
      summary: "Creates a new exercise into the system"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExerciseForm"
      responses:
        '200':
          description: OK
  /api/exercises/{id}:
    get:
      summary: "Retrieve this specific exercise data"
      parameters:
        - name: id
          in: path
          description: "The exercise ID"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Exercise data inside a JSON"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchableExerciseModel"
        '404':
          description: "Exercise not found"
    post:
      summary: "Update this specific exercise data"
      parameters:
        - name: id
          in: path
          description: "The exercise ID"
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExerciseUpdateForm"
      responses:
        '200':
          description: OK
        '404':
          description: "Exercise not found"
  /search:
    post:
      summary: "Search exercises that matches criteria"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchCriterias"
      responses:
        '200':
          description: "An object that contains the results and additionnal information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResult"
              examples:
                searchExample1:
                  $ref: "#/components/examples/searchExample1"
                searchExample2:
                  $ref: "#/components/examples/searchExample2"
components:
  schemas:
    JWTToken:
      type: object
      properties:
        token:
          type: string
          description: The JWT Token
      required:
        - token
    ErrorObject:
      type: object
      properties:
        message:
          type: string
          description: The error message
        error:
          type: object
          description: "Full error object (only on developpment environnement)"
      required:
        - message
    Auth:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "jy95@perdu.com"
        passport:
          type: string
          format: password
          example: "42"
      required:
        - email
        - passport
# Basic model of a Exercise 
    BasicExerciseModel:
      type: object
      properties:
        title:
          type: string
          example: "A Super Exercise"
          description: "The title of this exercise"
        description:
          type: string
          example: "..."
          description: "The preamble of this exercise"
      required:
        - title
        - description
# If already in database, we have other fields (in addition of the basic Model)
    AlreadyPresentExerciseModel:
      allOf:
        - $ref: '#/components/schemas/BasicExerciseModel'
        - type: object
          properties:
            id:
              type: integer
              example: 42
              description: "The Id of this exercise"
            version:
              type: integer
              example: 42
              description: "The version of this exercise (optimistic lock)"
            createdAt:
              type: string
              format: date-time
              example: "2019-10-26 21:46:02.325+02"
              description: "Date of creation of this exercise"
            updatedAt:
              type: string
              format: date-time
              example: "2019-10-26 21:46:02.325+02"
              description: "Date of the latest update of this exercise"
          required:
            - id
            - version
            - createdAt
            - updatedAt
# For search / get context, we have other fields (in addition of the AlreadyPresentExerciseModel )
    SearchableExerciseModel:
      allOf:
        - $ref: "#/components/schemas/AlreadyPresentExerciseModel"
        - type: object
          properties:
            metrics:
              type: object
              properties:
                vote_count:
                  type: integer
                  example: 42
                  description: "Number of votes for this exercise"
                avg_vote_score:
                  type: number
                  format: double
                  example: 5.0
                  description: "The average score of this exercise"
              required:
                - vote_count
                - avg_vote_score
            tags:
              type: array
              items:
                $ref: '#/components/schemas/TagWithCategory'
# Each exercise has a least one tag
              minItems: 1
          required:
            - metrics
            - tags
# A Tag Category
    Tag_Category:
      type: object
      properties:
        id:
          type: integer
          example: 42
          description: "The Id of this Tag_Category"
        kind:
          type: string
          example: "difficulty"
          description: "The text of this Tag_Category"
      required:
        - id
        - kind
# A Tag
    Tag:
      type: object
      properties:
        id:
          type: integer
          example: 42
          description: "The Id of this Tag"
        text:
          type: string
          example: "easy"
          description: "The text of this Tag"
      required:
        - id
        - text
# Tag with category (for /search)
    TagWithCategory:
      type: object
      properties:
        id:
          type: integer
          example: 42
          description: "The Id of this Tag"
        text:
          type: string
          example: "easy"
          description: "The text of this Tag"
        kind:
          type: string
          example: "difficulty"
          description: "The text of the Tag Category linked with this tag"
      required:
        - id
        - text
        - kind
# When the user wants to create new tag that isn't validated
    NotOfficialTag:
      type: object
      properties:
        text:
          type: string
          example: "Dafny"
          description: "The text of this not-official Tag"
        category:
          type: integer
          example: 42
          description: "The Tag_Category ID for this not-official Tag"
      required:
        - text
        - category
# When we want to upload a new exercise, we need other fields for that
    ExerciseForm:
      allOf:
        - $ref: "#/components/schemas/BasicExerciseModel"
        - type: object
          properties:
            official_tags:
              type: array
              items:
                type: integer
                description: "A Tag ID"
              description: "Array of Integer that contains ID of already existent tags in database"
# We must always put at least one tag in the database
              minItems: 1
            not_official_tags:
              type: array
              items:
                $ref: '#/components/schemas/NotOfficialTag'
# Optional but if we use that, we must have at least a Tag
              minItems: 1
          required:
            - official_tags
# When we want to update a already existent exercise, we also need the version
    ExerciseUpdateForm:
      allOf:
        - $ref: "#/components/schemas/ExerciseForm"
        - type: object
          properties:
            version:
              type: integer
              description: "The version of this exercise (optimistic lock)"
              example: 42
          required:
            - version
# Result after a call to /search
    SearchResult:
      type: object
      properties:
        count:
          type: integer
          description: "How much exercises match the given criterias"
          example: 42
        rows:
          type: array
          items:
            $ref: "#/components/schemas/SearchableExerciseModel" 
            description: "An array of exercise data"
      required:
        - count
        - rows
# Search criteria
    SearchCriterias:
      type: object
      properties:
        limit:
          type: integer
          description: "Maximal number of items we want to retrieve"
          example: 42
        offset:
          type: integer
          description: "Number of items we want to skip (useful with limit for pagination)"
          example: 42
        title:
          type: string
          description: "Something we want to find inside the title of exercises"
          example: "SINF2MS"
        tags:
          type: array
          items:
            oneOf:
              - type: integer
                format: int32
                example: 1
              - type: array
                items:
                  type: integer
                  format: int32
# Not allowing empty array if we use
                minItems: 1 
          description: "Tags search encoded in Conjunctive Normal Form. (for NOT predicat, use a negative integer)"
          example: [-1, [2, 3]]
# 1) Define the security scheme type (HTTP bearer)
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

# 2) Apply the security globally to all operations
#security:
#  - bearerAuth: []         # use the same name as above

  examples:
# Examples for /search
    searchExample1:
      description: "Search the first 10 exercises that have 'Java' in their title and have some specific tags ( 1 AND (2 OR 3 OR 4) )"
      value:
        limit: 10
        title: "Java"
        tags: [1, [2, 3, 4]]
    searchExample2:
      description: "Search the 5 other exercises that have 'Java' in their title but with specific tags ( (NOT 1) AND (2 OR 3)  )"
      value:
        limit: 10
        offset: 5
        title: "Java"
        tags: [-1, [2, 3]]