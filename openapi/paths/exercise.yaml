paths:
  /api/exercises/{id}:
    parameters:
        - name: id
          in: path
          description: "The exercise ID"
          required: true
          schema:
            type: integer
        - name: includeOptions
          in: query
          description: "To include additional properties when fetching exercise"
          style: deepObject
          schema:
            $ref: "../definitions.yaml#/components/schemas/IncludeOptions"
    get:
      summary: "Retrieve this specific exercise data"
      operationId: getExerciseByID
      x-controller: exercises
      x-operation: getExerciseByID
      security:
        - {}
        - bearerAuth: []
      tags:
        - guest
        - user
      responses:
        '200':
          description: "Exercise data inside a JSON"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "../definitions.yaml#/components/schemas/SearchableExerciseModel"
                  - type: object
                    properties:
                      vote:
                        type: number
                        minimum: 0.0
                        example: 5.0
                        description: "If this endpoint was used by an authentified user, it will fetch his/her vote if it exists"
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "../definitions.yaml#/components/schemas/ErrorObject"
    put:
      summary: "Update this specific exercise data"
      description: |
        Update this specific exercise data  
        You are free to add new tags / keywords but you **must** add at least 3 validated tags.
        The following restrictions are applied on simple user(s) (no restriction for admin) :  

        1. He/She can only modify his/her own exercises
        2. Only the following states are allowed for the field "state" :
          - DRAFT
          - PENDING
      operationId: UpdateExercise
      x-controller: exercises
      x-operation: UpdateExercise
      tags:
        - user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "../definitions.yaml#/components/schemas/ExerciseUpdateForm"
                - type: object
                  properties:
                    removePreviousFile:
                      type: boolean
                      default: false
                      example: true
                      description: "If set to true, the API will delete the previous file when updating the exercise"
          multipart/form-data:
            schema:
              allOf:
                - $ref: "../definitions.yaml#/components/schemas/ExerciseUpdateForm"
                - type: object
                  description: "If we want to also to change the sources zip file of this exercise"
                  properties:
                    exerciseFile:
                      type: string
                      format: binary
                      description: "The sources of this exercise, in zip format"
                  required:
                    - exerciseFile
            encoding:
              exerciseFile:
              # MIME for zip https://stackoverflow.com/a/7027582/6149867
                contentType: application/zip, application/x-zip-compressed, multipart/x-zip
      responses:
        '200':
          description: OK
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "../definitions.yaml#/components/schemas/ErrorObject"
  /api/export:
    post:
      operationId: ExportExercises
      x-controller: exercises
      x-operation: ExportExercises
      description: |
        To export exercises that match optional criteria.  

        The JSON result is compliant with the [format](https://github.com/SourceCodeOER/cli#what-is-the-format-of-the-json-object-)
        of our [cli](https://github.com/SourceCodeOER/cli) which means that if you wish to reupload the exercises in the future,
        it's simple as you just have to rely on the [cli](https://github.com/SourceCodeOER/cli) command "uploader".
        Please consider the following facts before using it : 
          
          1. Don't forget to rename the key "categories" to "own_categories"

          2. If you wish to upload them without their files, remove the property "file" in each exercise : 
            ```js
              let json_result = { /* ... */ };
              const exercisesWithoutFile = json_result["exercises"].map(exercise => {
                  delete exercise["file"]
                  return exercise;
              });
              Object.assign(json_result, { "exercises": exercisesWithoutFile });
            ```

          3. If you wish to upload them with their files, download their files and modify each property "file" according our [format](https://github.com/SourceCodeOER/cli#what-is-the-format-of-the-json-object-)
        of our [cli](https://github.com/SourceCodeOER/cli).

      tags:
        - admin
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "../definitions.yaml#/components/schemas/CommonCriterias"  
      responses:
        '200':
          description: "Exercises data inside a JSON"
          content:
            application/json:
              schema:
                type: object
                properties:
                  exercises:
                    description: "The fetched exercises (with their tags)"
                    type: array
                    items:
                      allOf:
                        - $ref: "../definitions.yaml#/components/schemas/AlreadyPresentExerciseModel"
                        - type: object
                          properties:
                            tags:
                              type: array
                              description: "The tags linked to this exercise"
                              items:
                                type: object
                                properties:
                                  text:
                                    type: string
                                    description: "The text of this Tag"
                                    example: "INGINIOUS"
                                    minLength: 1
                                    maxLength: 100
                                  category:
                                    type: integer
                                    example: 42
                                    minimum: 0
                                    description: "The category of this tag"
                                  isValidated:
                                    type: boolean
                                    default: false
                                    example: false
                                    description: "Is this tag validated or not ?"
                                required:
                                  - isValidated
                                  - category
                                  - text
                          required:
                            - tags
                  categories:
                    description: Map whose keys are the IDS of the categories and value their text
                    type: object
                    example:
                      "1":  "source"
                      "2": "institution"
                      "3": "auteur"
                required:
                  - exercises
                  - categories
        # Definition of all error statuses
        default:
          description: "Whatever error : 4XX - Client error (Bad Request, Unauthorized, etc.) , 5XX - Server error"
          content:
            application/json:
              schema:
                $ref: "../definitions.yaml#/components/schemas/ErrorObject"        

components:
  securitySchemes:
    bearerAuth:
      $ref: "../security.yaml#/components/securitySchemes/bearerAuth"
